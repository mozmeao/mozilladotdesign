{"version":3,"sources":["node_modules/browser-pack/_prelude.js","develop/mozilla.design/js/index.js","develop/mozilla.design/js/vendor/CustomEase.js","node_modules/@barba/core/dist/barba.umd.js","node_modules/@barba/prefetch/dist/barba-prefetch.umd.js","node_modules/gsap/AttrPlugin.js","node_modules/gsap/BezierPlugin.js","node_modules/gsap/CSSPlugin.js","node_modules/gsap/DirectionalRotationPlugin.js","node_modules/gsap/EasePack.js","node_modules/gsap/RoundPropsPlugin.js","node_modules/gsap/TimelineLite.js","node_modules/gsap/TimelineMax.js","node_modules/gsap/TweenLite.js","node_modules/gsap/TweenMax.js","node_modules/gsap/TweenMaxBase.js","node_modules/jquery/dist/jquery.js","node_modules/lazysizes/lazysizes.js","node_modules/object-fit-images/dist/ofi.common-js.js","node_modules/popper.js/dist/umd/popper.js"],"names":[],"mappings":"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":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* imports */\nimport 'lazysizes';\nvar $ = require('jquery');\nvar Popper = require('popper.js');\nvar objectFitImages = require('object-fit-images');\nimport { TweenMax, TimelineLite, Power2, Elastic, CSSPlugin } from \"gsap/TweenMax\";\nimport barba from '@barba/core';\nimport barbaPrefetch from '@barba/prefetch';\nimport CustomEase from './vendor/CustomEase';\nbarba.use(barbaPrefetch);\n\nif ('scrollRestoration' in history) {\n  history.scrollRestoration = 'manual';\n}\n\n$('body').removeClass('nojs');\n\n/* helpers */\nlet windowHeight = '';\nconst appHeight = () => {\n  if( windowHeight !== window.innerHeight ) {\n    windowHeight = window.innerHeight;\n    const doc = document.documentElement;\n    doc.style.setProperty(\"--app-height\", `${windowHeight}px`);\n  }\n};\n\nfunction checkAppHeight() {\n  appHeight();\n  requestAnimationFrame(checkAppHeight);\n}\nrequestAnimationFrame(checkAppHeight);\n\n/* transitions */\nlet transitionDuration = 300;\nlet defaultEasing = CustomEase.create(\"custom\", \"M0,0 C0.07,0.95 0,1 1,1\");\n\nbarba.hooks.beforeEnter((data) => {\n  $(window).scrollTop(0); // scroll to top here\n  // $('img').each(function(idx, elem){\n  //    lazySizes.loader.unveil(elem);\n  //  });\n\n  // update body class\n  let regexp = /\\<body.*\\sclass=[\"'](.+?)[\"'].*\\>/gi,\n          match = regexp.exec(data.next.html);\n      match[1] += ' in-transition';\n      if(!match || !match[1]) return;\n      document.body.setAttribute('class', match[1].replace('nojs',''));\n\n  let faviconRegexp = /\\<link.*? href=\"(.*?.ico)\".*\\>/gi,\n      faviconMatch = faviconRegexp.exec(data.next.html);\n      if(!faviconMatch || !faviconMatch[1]) return;\n      $('#favicon').attr('href', faviconMatch[1]);\n\n  // update header\n  var headerContent = $(data.next.html).find('.update-content');\n  $('.update-content').replaceWith(headerContent);\n});\n\nbarba.init({\n  debug: false,\n  prevent: ({ el }) => el.classList && el.classList.contains('prevent'),\n  transitions: [{\n    \"name\": \"home\",\n    to: {\n      namespace: [\"home\"]\n    },\n    from: {\n      namespace: [\"brand\"]\n    },\n    before: function(data) {\n      const done = this.async();\n      $('header').css({opacity: 0});\n      $('body').removeClass('mobile-menu-open quick-links-open mobile-interior-section-nav--is-open');\n      $('body').addClass('in-transition home');\n      TweenLite.to($('.page-section--main'), 1, {ease: defaultEasing, opacity:0, onComplete: function(){\n        done();\n      } } );\n    },\n    beforeEnter: function(data) {\n      const done = this.async();\n      $('header').css({opacity: 0});\n      done();\n    },\n    afterEnter: function(data) {\n      const done = this.async();\n      init();\n      done();\n    }\n  }, {\n    \"name\": \"brand\",\n    to: {\n      namespace: [\"brand\"]\n    },\n    from: {\n      namespace: [\"home\",\"brand\"]\n    },\n    before: function(data){\n      $('body').removeClass('mobile-menu-open quick-links-open mobile-interior-section-nav--is-open');\n      if( data.next.url.path == '/firefox/' || data.next.url.path == '/design/firefox/' ) {\n        $('body').addClass('in-transition firefox-transition');\n      }\n      else if( data.next.url.path.includes(\"/mozilla/\") ) {\n        $('body').addClass('in-transition mozilla-transition');\n      } else {\n        $('body').addClass('in-transition white-transition');\n      }\n    },\n    leave: function(data){\n      const done = this.async();\n      $(data.current.container).append('<div class=\"screen\"></div>');\n      $(data.next.container).append('<div class=\"screen active\"></div>');\n      let targetY = 0;\n      let regexp = /\\<body.*\\sclass=[\"'](.+?)[\"'].*\\>/gi,\n              match = regexp.exec(data.next.html);\n          if(match[1].indexOf('page-child') != -1 ) {\n            targetY = $('header').outerHeight();\n          }\n\n      TweenLite.to($('.screen'), 1, {ease: defaultEasing, y:targetY, onComplete: done } )\n    },\n    enter: function(data) {\n      const done = this.async();\n      done();\n    },\n    afterEnter: function(data) {\n      var done = this.async();\n      init();\n      done();\n    },\n    after: function(data) {\n      const done = this.async();\n      TweenLite.to($('.screen'), 0.6, {ease: Power2.easeInOut, opacity: 0, onComplete: function(){\n        $('.screen').remove();\n        $('body').removeClass('mozilla-transition firefox-transition white-transition');\n        $('.section-nav').removeClass('stuck');\n        $('body').removeClass('in-transition');\n        done();\n      }});\n    }\n  }]\n});\n\n/* other functionality */\n\n$(document).ready(function(){\n  init();\n});\n\nconst init = function() {\n\n  if( $('.homepage-loader').length ) {\n    initHomepageLoader();\n  }\n\n  initNav();\n\n  initSectionNav();\n  initCodeTabs();\n  initZaps();\n  initTypetesters();\n  initColorTables();\n  if( $('body').hasClass('home') ) {\n    $('body').addClass('in-transition');\n    transitionHome();\n  }\n  objectFitImages();\n  $('.section-nav').removeClass('stuck');\n\n  if( $('.card-listing').length ) {\n    $(window).on('resize', function(){\n      checkBrandInteractives();\n    }).trigger('resize');\n    $(document).on('lazyloaded', function(e){\n      checkBrandInteractives();\n      lazySizes.autoSizer.checkElems();\n    });\n  }\n\n  initBrandInteractives();\n  lazySizes.autoSizer.checkElems();\n}\n\nconst checkBrandInteractives = function() {\n  $('.brand-interactive').each(function(){\n    // let targIframe = $(this).find('iframe');\n    // targIframe.css({\n    //   width: ( $(window).width() > 1000 ) ? $(window).width() : 1000,\n    //   height: ( $(window).width() > 1000 ) ? $(window).width() : 2000\n    // });\n    lazySizes.autoSizer.checkElems();\n  });\n}\n\nconst initHomepageLoader = function() {\n  $('img').each(function(idx, elem){\n     lazySizes.loader.unveil(elem);\n   });\n  $('body').addClass('homepage-loader-animation');\n  setTimeout(function(){\n    $('.homepage-loader').addClass('state-1');\n  }, 10);\n\n  setTimeout(function(){\n    $('.homepage-loader').removeClass('state-1').addClass('state-2');\n  }, 250);\n\n  setTimeout(function(){\n    $('.homepage-loader').removeClass('state-1').removeClass('state-2').addClass('state-3');\n  }, 500);\n\n  setTimeout(function(){\n    $('body').removeClass('homepage-loader-animation');\n    $('.homepage-loader').remove();\n  }, 1000);\n}\n\nconst transitionHome = function() {\n  var tl = new TimelineLite();\n  tl.add( TweenLite.to($('header'), 1, {ease: Power2.easeOut, opacity:1} ) );\n  tl.staggerTo($('.card-listing--card'), 0.5, {y:0, opacity: 1}, 0.15, \"+=0\", function(){\n    $('body').removeClass('in-transition');\n  });\n  tl.play();\n  //\n  // $('img').each(function(idx, elem){\n  //    lazySizes.loader.unveil(elem);\n  //  });\n}\n\nconst initNav = function(){\n  function checkHasScrolled() {\n    if( $(window).scrollTop() == 0 ) {\n      $('body').removeClass('has-scrolled');\n    } else {\n      $('body').addClass('has-scrolled');\n    }\n    if( $(window).scrollTop() >= $(window).height() ) {\n      $('body').addClass('has-scrolled-100vh');\n    } else {\n      $('body').removeClass('has-scrolled-100vh')\n    }\n  }\n  $(window).on('scroll', function(){\n    requestAnimationFrame(checkHasScrolled)\n  }).trigger('scroll');\n\n  $('.mobile-nav-toggle').on('click', function(e){\n    e.preventDefault();\n    $('body').toggleClass('mobile-menu-open');\n  });\n\n  $('.mobile-nav .menu-item-has-children > a .arrow').remove();\n\n  $('.mobile-nav .menu-item-has-children > a').addClass('prevent').append('<span class=\"arrow\"></span>');\n  $('.mobile-nav .menu-item-has-children > a > .arrow').on('click', function(e){\n    e.preventDefault();\n    e.stopPropagation();\n    $(this).parents('.menu-item-has-children').toggleClass('open');\n  });\n\n  $('.quick-links-toggle').on('click', function(e){\n    e.preventDefault();\n    $('body').toggleClass('quick-links-open');\n  });\n}\n\nconst initSectionNav = function() {\n  $(window).on('scroll', function(){\n    if( $('.bumper, footer:visible').length ) {\n      let screenBottomOffset = $(window).scrollTop() + $(window).height(),\n          bumperOffset = $('.bumper, footer').offset().top;\n\n      if( bumperOffset <= screenBottomOffset ) {\n        $('.section-nav').addClass('stuck');\n      } else {\n        $('.section-nav').removeClass('stuck');\n      }\n    }\n\n    $('body').removeClass('mobile-interior-section-nav--is-open');\n  }).trigger('scroll');\n\n  $('.mobile-interior-section-nav .section-toggle').on('touchstart click', function(e){\n    e.preventDefault();\n    $('body').toggleClass('mobile-interior-section-nav--is-open');\n  });\n}\n\nconst initCodeTabs = function() {\n  if( $('.code-block').length ) {\n    $('.code-block').each(function(idx, elem){\n      $(elem).find('.code-tabs a').on('click', function(e){\n        e.preventDefault();\n        let target = $(this).attr('href');\n        $(this).parents('.code-tabs').find('.active').removeClass('active');\n        $(this).addClass('active');\n        $(this).parents('.code-block').find('.code-tab-content').removeClass('active');\n        $(this).parents('.code-block').find('[data-attr-tab-id=\"'+target+'\"]').addClass('active');\n      });\n    });\n  }\n}\n\nconst initZaps = function() {\n  $('.wysiwyg-content a[title]').each(function(idx, elem){\n    // override title with zap\n    $(elem).attr('data-zap-text', $(elem).attr('title'));\n    $(elem).addClass('has-zap');\n    $(elem).parent().addClass('zap-container');\n  });\n\n  $('.has-zap').each(function(idx, elem){\n    $(elem).on('click', function(e){\n      e.preventDefault();\n    });\n    $(elem).attr('data-zap-target', idx);\n    let text = $(elem).attr('data-zap-text'),\n        styles = ['style-1', 'style-2', 'style-3'],\n        placements = ['top-end', 'bottom-end', 'right'],\n        randStyle = styles[Math.floor(Math.random()*styles.length)],\n        randPlacement = placements[Math.floor(Math.random()*placements.length)];\n\n    $(elem).parent().append('<div class=\"zap\" data-zap-id=\"'+idx+'\"><span x-arrow class=\"arrow '+randStyle+'\"></span><div class=\"zap-text\">'+text+'</div></div>');\n    let zap = $('[data-zap-id=\"'+idx+'\"]'),\n        ref = $(elem),\n        popperInstance = new Popper(ref, zap, {\n          placement: randPlacement,\n          flip: {\n              behavior: placements\n          },\n          modifiers: {\n            offset: '-50%'\n          }\n        });\n  });\n\n  $('.has-zap').on('mouseover', function(){\n    $('[data-zap-id=\"'+$(this).attr('data-zap-target')+'\"]').addClass('visible');\n  }).on('mouseout', function(){\n    $('[data-zap-id=\"'+$(this).attr('data-zap-target')+'\"]').removeClass('visible');\n  })\n}\n\nconst initTypetesters = function() {\n  $('.type-controls').each(function(){\n    var dropdown = $(this).find('select'),\n        rangeWrap = $(this).find('.range-select'),\n        rangeInput = rangeWrap.find('input'),\n        parentDiv = $(this).parents('.wysiwyg-content');\n\n    dropdown.on('change', function(){\n      parentDiv.find('.type-output').removeClass(function (index, css) {\n         return (css.match (/(^|\\s)zillaslab\\S+/g) || []).join(' ');\n      });\n      parentDiv.find('.type-output').addClass($(this).val());\n    });\n\n    rangeInput.on('input change', function(){\n      parentDiv.find('.type-output').css({\n        fontSize: $(this).val()+'px'\n      });\n      rangeWrap.find('.value').text($(this).val()+'px');\n    })\n  });\n}\n\nconst initColorTables = function() {\n  $('.color-table').find('[data-hex]').on('mouseover', function(){\n    let label = '';\n    if( $(this).attr('data-label') != \"\" ) {\n      label +=  $(this).attr('data-label')+'<br>';\n    }\n    if( $(this).attr('data-hex') != \"\" ) {\n      label +=  $(this).attr('data-hex');\n    }\n    $(this).parents('.row').find('.current').html(label).show();\n  });\n\n  $('.color-table').on('mouseout', function(){\n    $(this).parents('.row').find('.current').hide();\n  });\n\n  $('.color-table').find('[data-hex]').each(function(idx, elem){\n    let text = 'Click to copy Hex value';\n    $(elem).parent().append('<div class=\"zap\" data-zap-id=\"color-table-'+idx+'\"><span class=\"arrow\"></span><div class=\"zap-text\">'+text+'</div></div>');\n    let zap = $('[data-zap-id=\"color-table-'+idx+'\"]'),\n    ref = $(elem),\n    popperInstance = new Popper(ref, zap, {\n      positionFixed: true,\n    });\n    $(elem).on('mouseover', function(){\n      $('[data-zap-id=\"color-table-'+idx+'\"]').addClass('visible');\n    }).on('mouseout', function(){\n      $('[data-zap-id=\"color-table-'+idx+'\"]').removeClass('visible');\n    })\n  });\n\n  $('.color-table').find('[data-hex]').on('touchstart', function(e){\n    e.stopPropagation();\n    e.preventDefault();\n  });\n  $('.color-table').find('[data-hex]').off('click').on('click', function(e){\n    e.preventDefault();\n    let str = $(this).attr('data-hex');\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n    $(this).parents('.row').find('.current').append('<br>Copied!');\n  });\n\n  $(window).on('resize', function(){\n    $('.tall .color').each(function(idx, elem){\n      $(elem).css({\n        height: $(elem).parents('.tall').height()\n      });\n    });\n  }).trigger('resize');\n}\n\nconst initBrandInteractives = function() {\n  if( $('#blobs-kLEsZ:not(\".active\")').length ) {\n    var svgElSelector = '#blobs-kLEsZ';\n\n    var svgEl = document.querySelector(svgElSelector);\n    var mousePosition = [0, 0];\n    var scrollY = 0;\n\n    var classes = [\n      'top left', 'top center', 'top right',\n      'mid left', 'mid center', 'mid right',\n      'bottom left', 'bottom center', 'bottom right'\n    ];\n\n    var points;\n    initPoints();\n\n    if (window.PointerEvent) {\n      svgEl.addEventListener('pointermove', throttle(onPointerMove, 100));\n    } else {\n      svgEl.addEventListener('mousemove', throttle(onPointerMove, 100));\n      svgEl.addEventListener('touchmove', throttle(onPointerMove, 100));\n    }\n\n    window.addEventListener('resize', debounce(onResize, 300));\n\n    function onPointerMove(event) {\n      mousePosition = [event.clientX, event.clientY];\n\n      var distances = [];\n\n      for (var i = 0; i < points.length; i++) {\n        var point = points[i];\n        var distance = Math.hypot(point[0] - mousePosition[0], point[1] - mousePosition[1]);\n        distances.push(distance);\n      }\n\n      var closestPointIndex = distances.indexOf(Math.min.apply(Math, distances));\n\n      svgEl.setAttribute('data-location', classes[closestPointIndex]);\n    }\n\n    function onResize(event) {\n      initPoints();\n    }\n\n    function initPoints() {\n      points = [\n        [0, 0],                      [window.innerWidth / 2, 0],                      [window.innerWidth, 0],\n        [0, window.innerHeight / 2], [window.innerWidth / 2, window.innerHeight / 2], [window.innerWidth, window.innerHeight / 2],\n        [0, window.innerHeight],     [window.innerWidth / 2, window.innerHeight],     [window.innerWidth, window.innerHeight]\n      ];\n    }\n\n    function throttle(callback, limit) {\n      var wait = false;\n      return function() {\n        if (!wait) {\n          var context = this;\n          var args = arguments;\n          callback.apply(context, args);\n          wait = true;\n          setTimeout(function() {\n            wait = false;\n          }, limit);\n        }\n      }\n    }\n\n    function debounce(callback, wait) {\n      var timeout;\n      return function() {\n        var context = this;\n        var args = arguments;\n        var later = function() {\n          timeout = null;\n        }\n        var callNow = !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) callback.apply(context, args);\n      }\n    }\n\n    $('#blobs-kLEsZ').addClass('active');\n  }\n\n}\n","/*!\n * VERSION: 0.2.2\n * DATE: 2018-08-27\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\n\nimport { _gsScope, globals, Ease } from \"gsap/TweenLite.js\";\n\n_gsScope._gsDefine(\"easing.CustomEase\", [\"easing.Ease\"], function() {\n\n\t\tvar _numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n\t\t\t_needsParsingExp = /[cLlsS]/g,\n\t\t\t_bezierError = \"CustomEase only accepts Cubic Bezier data.\",\n\t\t\t_bezierToPoints = function (x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n\t\t\t\tvar x12 = (x1 + x2) / 2,\n\t\t\t\t\ty12 = (y1 + y2) / 2,\n\t\t\t\t\tx23 = (x2 + x3) / 2,\n\t\t\t\t\ty23 = (y2 + y3) / 2,\n\t\t\t\t\tx34 = (x3 + x4) / 2,\n\t\t\t\t\ty34 = (y3 + y4) / 2,\n\t\t\t\t\tx123 = (x12 + x23) / 2,\n\t\t\t\t\ty123 = (y12 + y23) / 2,\n\t\t\t\t\tx234 = (x23 + x34) / 2,\n\t\t\t\t\ty234 = (y23 + y34) / 2,\n\t\t\t\t\tx1234 = (x123 + x234) / 2,\n\t\t\t\t\ty1234 = (y123 + y234) / 2,\n\t\t\t\t\tdx = x4 - x1,\n\t\t\t\t\tdy = y4 - y1,\n\t\t\t\t\td2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),\n\t\t\t\t\td3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),\n\t\t\t\t\tlength;\n\t\t\t\tif (!points) {\n\t\t\t\t\tpoints = [{x: x1, y: y1}, {x: x4, y: y4}];\n\t\t\t\t\tindex = 1;\n\t\t\t\t}\n\t\t\t\tpoints.splice(index || points.length - 1, 0, {x: x1234, y: y1234});\n\t\t\t\tif ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n\t\t\t\t\tlength = points.length;\n\t\t\t\t\t_bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n\t\t\t\t\t_bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));\n\t\t\t\t}\n\t\t\t\treturn points;\n\t\t\t},\n\n\t\t\t_pathDataToBezier = function (d) {\n\t\t\t\tvar a = (d + \"\").replace(_scientific, function (m) {\n\t\t\t\t\t\t\tvar n = +m;\n\t\t\t\t\t\t\treturn (n < 0.0001 && n > -0.0001) ? 0 : n;\n\t\t\t\t\t\t}).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n\t\t\t\t\tpath = [],\n\t\t\t\t\trelativeX = 0,\n\t\t\t\t\trelativeY = 0,\n\t\t\t\t\telements = a.length,\n\t\t\t\t\tl = 2,\n\t\t\t\t\ti, x, y, command, isRelative, segment, startX, startY, prevCommand, difX, difY;\n\t\t\t\tfor (i = 0; i < elements; i++) {\n\t\t\t\t\tprevCommand = command;\n\t\t\t\t\tif (isNaN(a[i])) {\n\t\t\t\t\t\tcommand = a[i].toUpperCase();\n\t\t\t\t\t\tisRelative = (command !== a[i]); //lower case means relative\n\t\t\t\t\t} else { //commands like \"C\" can be strung together without any new command characters between.\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t\tx = +a[i + 1];\n\t\t\t\t\ty = +a[i + 2];\n\t\t\t\t\tif (isRelative) {\n\t\t\t\t\t\tx += relativeX;\n\t\t\t\t\t\ty += relativeY;\n\t\t\t\t\t}\n\t\t\t\t\tif (!i) {\n\t\t\t\t\t\tstartX = x;\n\t\t\t\t\t\tstartY = y;\n\t\t\t\t\t}\n\t\t\t\t\tif (command === \"M\") {\n\t\t\t\t\t\tif (segment && segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n\t\t\t\t\t\t\tpath.length -= 1;\n\t\t\t\t\t\t\tl = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelativeX = startX = x;\n\t\t\t\t\t\trelativeY = startY = y;\n\t\t\t\t\t\tsegment = [x, y];\n\t\t\t\t\t\tl = 2;\n\t\t\t\t\t\tpath.push(segment);\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\tcommand = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n\n\t\t\t\t\t} else if (command === \"C\") {\n\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\tsegment = [0, 0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = x;\n\t\t\t\t\t\tsegment[l++] = y;\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = relativeX + a[i + 3] * 1; //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\t\t\t\t\t\tsegment[l++] = relativeY + a[i + 4] * 1;\n\t\t\t\t\t\tsegment[l++] = relativeX = relativeX + a[i + 5] * 1;\n\t\t\t\t\t\tsegment[l++] = relativeY = relativeY + a[i + 6] * 1;\n\t\t\t\t\t\ti += 6;\n\n\t\t\t\t\t} else if (command === \"S\") {\n\t\t\t\t\t\tif (prevCommand === \"C\" || prevCommand === \"S\") {\n\t\t\t\t\t\t\tdifX = relativeX - segment[l - 4];\n\t\t\t\t\t\t\tdifY = relativeY - segment[l - 3];\n\t\t\t\t\t\t\tsegment[l++] = relativeX + difX;\n\t\t\t\t\t\t\tsegment[l++] = relativeY + difY;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsegment[l++] = relativeX;\n\t\t\t\t\t\t\tsegment[l++] = relativeY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = x;\n\t\t\t\t\t\tsegment[l++] = y;\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = relativeX = relativeX + a[i + 3] * 1;\n\t\t\t\t\t\tsegment[l++] = relativeY = relativeY + a[i + 4] * 1;\n\t\t\t\t\t\ti += 4;\n\n\t\t\t\t\t} else if (command === \"L\" || command === \"Z\") {\n\t\t\t\t\t\tif (command === \"Z\") {\n\t\t\t\t\t\t\tx = startX;\n\t\t\t\t\t\t\ty = startY;\n\t\t\t\t\t\t\tsegment.closed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command === \"L\" || Math.abs(relativeX - x) > 0.5 || Math.abs(relativeY - y) > 0.5) {\n\t\t\t\t\t\t\tsegment[l++] = relativeX + (x - relativeX) / 3;\n\t\t\t\t\t\t\tsegment[l++] = relativeY + (y - relativeY) / 3;\n\t\t\t\t\t\t\tsegment[l++] = relativeX + (x - relativeX) * 2 / 3;\n\t\t\t\t\t\t\tsegment[l++] = relativeY + (y - relativeY) * 2 / 3;\n\t\t\t\t\t\t\tsegment[l++] = x;\n\t\t\t\t\t\t\tsegment[l++] = y;\n\t\t\t\t\t\t\tif (command === \"L\") {\n\t\t\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelativeX = x;\n\t\t\t\t\t\trelativeY = y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow _bezierError;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn path[0];\n\t\t\t},\n\n\t\t\t_findMinimum = function (values) {\n\t\t\t\tvar l = values.length,\n\t\t\t\t\tmin = 999999999999,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 1; i < l; i += 6) {\n\t\t\t\t\tif (+values[i] < min) {\n\t\t\t\t\t\tmin = +values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn min;\n\t\t\t},\n\n\t\t\t_normalize = function (values, height, originY) { //takes all the points and translates/scales them so that the x starts at 0 and ends at 1.\n\t\t\t\tif (!originY && originY !== 0) {\n\t\t\t\t\toriginY = Math.max(+values[values.length-1], +values[1]);\n\t\t\t\t}\n\t\t\t\tvar tx = +values[0] * -1,\n\t\t\t\t\tty = -originY,\n\t\t\t\t\tl = values.length,\n\t\t\t\t\tsx = 1 / (+values[l - 2] + tx),\n\t\t\t\t\tsy = -height || ((Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0])) ? _findMinimum(values) + ty : +values[l - 1] + ty),\n\t\t\t\t\ti;\n\t\t\t\tif (sy) { //typically y ends at 1 (so that the end values are reached)\n\t\t\t\t\tsy = 1 / sy;\n\t\t\t\t} else { //in case the ease returns to its beginning value, scale everything proportionally\n\t\t\t\t\tsy = -sx;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < l; i += 2) {\n\t\t\t\t\tvalues[i] = (+values[i] + tx) * sx;\n\t\t\t\t\tvalues[i + 1] = (+values[i + 1] + ty) * sy;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_getRatio = function (p) {\n\t\t\t\tvar point = this.lookup[(p * this.l) | 0] || this.lookup[this.l - 1];\n\t\t\t\tif (point.nx < p) {\n\t\t\t\t\tpoint = point.n;\n\t\t\t\t}\n\t\t\t\treturn point.y + ((p - point.x) / point.cx) * point.cy;\n\t\t\t},\n\n\n\t\t\tCustomEase = function (id, data, config) {\n\t\t\t\tthis._calcEnd = true;\n\t\t\t\tthis.id = id;\n\t\t\t\tif (id) {\n\t\t\t\t\tEase.map[id] = this;\n\t\t\t\t}\n\t\t\t\tthis.getRatio = _getRatio; //speed optimization, faster lookups.\n\t\t\t\tthis.setData(data, config);\n\t\t\t},\n\t\t\tp = CustomEase.prototype = new Ease();\n\n\t\tp.constructor = CustomEase;\n\n\t\tp.setData = function(data, config) {\n\t\t\tdata = data || \"0,0,1,1\";\n\t\t\tvar values = data.match(_numbersExp),\n\t\t\t\tclosest = 1,\n\t\t\t\tpoints = [],\n\t\t\t\tl, a1, a2, i, inc, j, point, prevPoint, p, precision;\n\t\t\tconfig = config || {};\n\t\t\tprecision = config.precision || 1;\n\t\t\tthis.data = data;\n\t\t\tthis.lookup = [];\n\t\t\tthis.points = points;\n\t\t\tthis.fast = (precision <= 1);\n\t\t\tif (_needsParsingExp.test(data) || (data.indexOf(\"M\") !== -1 && data.indexOf(\"C\") === -1)) {\n\t\t\t\tvalues = _pathDataToBezier(data);\n\t\t\t}\n\t\t\tl = values.length;\n\t\t\tif (l === 4) {\n\t\t\t\tvalues.unshift(0, 0);\n\t\t\t\tvalues.push(1, 1);\n\t\t\t\tl = 8;\n\t\t\t} else if ((l - 2) % 6) {\n\t\t\t\tthrow _bezierError;\n\t\t\t}\n\t\t\tif (+values[0] !== 0 || +values[l - 2] !== 1) {\n\t\t\t\t_normalize(values, config.height, config.originY);\n\t\t\t}\n\n\t\t\tthis.rawBezier = values;\n\n\t\t\tfor (i = 2; i < l; i += 6) {\n\t\t\t\ta1 = {x: +values[i - 2], y: +values[i - 1]};\n\t\t\t\ta2 = {x: +values[i + 4], y: +values[i + 5]};\n\t\t\t\tpoints.push(a1, a2);\n\t\t\t\t_bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);\n\t\t\t}\n\t\t\tl = points.length;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tpoint = points[i];\n\t\t\t\tprevPoint = points[i - 1] || point;\n\t\t\t\tif (point.x > prevPoint.x || (prevPoint.y !== point.y && prevPoint.x === point.x) || point === prevPoint) { //if a point goes BACKWARD in time or is a duplicate, just drop it.\n\t\t\t\t\tprevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)\n\t\t\t\t\tprevPoint.cy = point.y - prevPoint.y;\n\t\t\t\t\tprevPoint.n = point;\n\t\t\t\t\tprevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)\n\t\t\t\t\tif (this.fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) { //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.\n\t\t\t\t\t\tthis.fast = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevPoint.cx < closest) {\n\t\t\t\t\t\tif (!prevPoint.cx) {\n\t\t\t\t\t\t\tprevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)\n\t\t\t\t\t\t\tif (i === l - 1) { //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.\n\t\t\t\t\t\t\t\tprevPoint.x -= 0.001;\n\t\t\t\t\t\t\t\tclosest = Math.min(closest, 0.001);\n\t\t\t\t\t\t\t\tthis.fast = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclosest = prevPoint.cx;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpoints.splice(i--, 1);\n\t\t\t\t\tl--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tl = (1 / closest + 1) | 0;\n\t\t\tthis.l = l; //record for speed optimization\n\t\t\tinc = 1 / l;\n\t\t\tj = 0;\n\t\t\tpoint = points[0];\n\t\t\tif (this.fast) {\n\t\t\t\tfor (i = 0; i < l; i++) { //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).\n\t\t\t\t\tp = i * inc;\n\t\t\t\t\tif (point.nx < p) {\n\t\t\t\t\t\tpoint = points[++j];\n\t\t\t\t\t}\n\t\t\t\t\ta1 = point.y + ((p - point.x) / point.cx) * point.cy;\n\t\t\t\t\tthis.lookup[i] = {x: p, cx: inc, y: a1, cy: 0, nx: 9};\n\t\t\t\t\tif (i) {\n\t\t\t\t\t\tthis.lookup[i - 1].cy = a1 - this.lookup[i - 1].y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.lookup[l - 1].cy = points[points.length - 1].y - a1;\n\t\t\t} else { //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.\n\t\t\t\tfor (i = 0; i < l; i++) { //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]\n\t\t\t\t\tif (point.nx < i * inc) {\n\t\t\t\t\t\tpoint = points[++j];\n\t\t\t\t\t}\n\t\t\t\t\tthis.lookup[i] = point;\n\t\t\t\t}\n\n\t\t\t\tif (j < points.length - 1) {\n\t\t\t\t\tthis.lookup[i-1] = points[points.length-2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.\n\t\t\treturn this;\n\t\t};\n\n\t\tp.getRatio = _getRatio;\n\n\t\tp.getSVGData = function(config) {\n\t\t\treturn CustomEase.getSVGData(this, config);\n\t\t};\n\n\t\tCustomEase.create = function (id, data, config) {\n\t\t\treturn new CustomEase(id, data, config);\n\t\t};\n\n\t\tCustomEase.version = \"0.2.2\";\n\n\t\tCustomEase.bezierToPoints = _bezierToPoints;\n\t\tCustomEase.get = function (id) {\n\t\t\treturn Ease.map[id];\n\t\t};\n\t\tCustomEase.getSVGData = function(ease, config) {\n\t\t\tconfig = config || {};\n\t\t\tvar rnd = 1000,\n\t\t\t\twidth = config.width || 100,\n\t\t\t\theight = config.height || 100,\n\t\t\t\tx = config.x || 0,\n\t\t\t\ty = (config.y || 0) + height,\n\t\t\t\te = config.path,\n\t\t\t\ta, slope, i, inc, tx, ty, precision, threshold, prevX, prevY;\n\t\t\tif (config.invert) {\n\t\t\t\theight = -height;\n\t\t\t\ty = 0;\n\t\t\t}\n\t\t\tease = ease.getRatio ? ease : Ease.map[ease] || console.log(\"No ease found: \", ease);\n\t\t\tif (!ease.rawBezier) {\n\t\t\t\ta = [\"M\" + x + \",\" + y];\n\t\t\t\tprecision = Math.max(5, (config.precision || 1) * 200);\n\t\t\t\tinc = 1 / precision;\n\t\t\t\tprecision += 2;\n\t\t\t\tthreshold = 5 / precision;\n\t\t\t\tprevX = (((x + inc * width) * rnd) | 0) / rnd;\n\t\t\t\tprevY = (((y + ease.getRatio(inc) * -height) * rnd) | 0) / rnd;\n\t\t\t\tslope = (prevY - y) / (prevX - x);\n\t\t\t\tfor (i = 2; i < precision; i++) {\n\t\t\t\t\ttx = (((x + i * inc * width) * rnd) | 0) / rnd;\n\t\t\t\t\tty = (((y + ease.getRatio(i * inc) * -height) * rnd) | 0) / rnd;\n\t\t\t\t\tif (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) { //only add points when the slope changes beyond the threshold\n\t\t\t\t\t\ta.push(prevX + \",\" + prevY);\n\t\t\t\t\t\tslope = (ty - prevY) / (tx - prevX);\n\t\t\t\t\t}\n\t\t\t\t\tprevX = tx;\n\t\t\t\t\tprevY = ty;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ta = [];\n\t\t\t\tprecision = ease.rawBezier.length;\n\t\t\t\tfor (i = 0; i < precision; i += 2) {\n\t\t\t\t\ta.push((((x + ease.rawBezier[i] * width) * rnd) | 0) / rnd + \",\" + (((y + ease.rawBezier[i + 1] * -height) * rnd) | 0) / rnd);\n\t\t\t\t}\n\t\t\t\ta[0] = \"M\" + a[0];\n\t\t\t\ta[1] = \"C\" + a[1];\n\t\t\t}\n\t\t\tif (e) {\n\t\t\t\t(typeof(e) === \"string\" ? document.querySelector(e) : e).setAttribute(\"d\", a.join(\" \"));\n\t\t\t}\n\t\t\treturn a.join(\" \");\n\t\t};\n\n\t\treturn CustomEase;\n\n\t}, true);\n\nexport var CustomEase = globals.CustomEase;\nexport { CustomEase as default };","!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):t.barba=n()}(this,function(){var t=function(){function t(){}return t.prototype.then=function(r,i){var e=new t,o=this.s;if(o){var u=1&o?r:i;if(u){try{n(e,1,u(this.v))}catch(t){n(e,2,t)}return e}return this}return this.o=function(t){try{var o=t.v;1&t.s?n(e,1,r?r(o):o):i?n(e,1,i(o)):n(e,2,o)}catch(t){n(e,2,t)}},e},t}();function n(r,i,e){if(!r.s){if(e instanceof t){if(!e.s)return void(e.o=n.bind(null,r,i));1&i&&(i=e.s),e=e.v}if(e&&e.then)return void e.then(n.bind(null,r,i),n.bind(null,r,2));r.s=i,r.v=e;var o=r.o;o&&o(r)}}function r(t,n){try{var r=t()}catch(t){return n(t)}return r&&r.then?r.then(void 0,n):r}var i={};!function(){function r(t){this.t=t,this.i=null,this.u=null,this.h=null,this.l=null}function e(t){return{value:t,done:!0}}function o(t){return{value:t,done:!1}}r.prototype[Symbol.asyncIterator||(Symbol.asyncIterator=Symbol(\"Symbol.asyncIterator\"))]=function(){return this},r.prototype.p=function(n){return this.u(n&&n.then?n.then(o):o(n)),this.i=new t},r.prototype.next=function(r){var o=this;return o.l=new Promise(function(u){var f=o.i;if(null===f){var s=o.t;if(null===s)return u(o.l);function c(t){o.u(t&&t.then?t.then(e):e(t)),o.i=null,o.u=null}o.t=null,o.u=u,s(o).then(c,function(n){if(n===i)c(o.h);else{var r=new t;o.u(r),o.i=null,o.u=null,_resolve(r,2,n)}})}else o.i=null,o.u=u,n(f,1,r)})},r.prototype.return=function(t){var r=this;return r.l=new Promise(function(o){var u=r.i;if(null===u)return null===r.t?o(r.l):(r.t=null,o(t&&t.then?t.then(e):e(t)));r.h=t,r.u=o,r.i=null,n(u,2,i)})},r.prototype.throw=function(t){var r=this;return r.l=new Promise(function(i,e){var o=r.i;if(null===o)return null===r.t?i(r.l):(r.t=null,e(t));r.u=i,r.i=null,n(o,2,t)})}}();var e,o,u=(function(t){var n=t.exports=function(t,n){return n=n||function(){},function(){var r=!1,i=arguments,e=new Promise(function(n,e){var o,u=t.apply({async:function(){return r=!0,function(t,r){t?e(t):n(r)}}},Array.prototype.slice.call(i));r||(!(o=u)||\"object\"!=typeof o&&\"function\"!=typeof o||\"function\"!=typeof o.then?n(u):u.then(n,e))});return e.then(n.bind(null,null),n),e}};n.cb=function(t,r){return n(function(){var n=Array.prototype.slice.call(arguments);return n.length===t.length-1&&n.push(this.async()),t.apply(this,n)},r)}}(e={exports:{}}),e.exports);!function(t){t[t.off=0]=\"off\",t[t.error=1]=\"error\",t[t.warning=2]=\"warning\",t[t.info=3]=\"info\",t[t.debug=4]=\"debug\"}(o||(o={}));var f=o.off,s=function(t){this.m=t};s.getLevel=function(){return f},s.setLevel=function(t){return f=o[t]},s.prototype.print=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];this.P(console.info,o.off,t)},s.prototype.error=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];this.P(console.error,o.error,t)},s.prototype.warn=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];this.P(console.warn,o.warning,t)},s.prototype.info=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];this.P(console.info,o.info,t)},s.prototype.debug=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];this.P(console.log,o.debug,t)},s.prototype.P=function(t,n,r){n<=s.getLevel()&&t.apply(console,[\"[\"+this.m+\"] \"].concat(r))};var c=function(){this.logger=new s(\"@barba/core\"),this.all=[\"ready\",\"page\",\"reset\",\"currentAdded\",\"currentRemoved\",\"nextAdded\",\"nextRemoved\",\"beforeAppear\",\"appear\",\"afterAppear\",\"appearCanceled\",\"before\",\"beforeLeave\",\"leave\",\"afterLeave\",\"leaveCanceled\",\"beforeEnter\",\"enter\",\"afterEnter\",\"enterCanceled\",\"after\"],this.registered=new Map,this.init()};c.prototype.init=function(){var t=this;this.registered.clear(),this.all.forEach(function(n){t[n]||(t[n]=function(r,i){void 0===i&&(i=null),t.registered.has(n)||t.registered.set(n,new Set),t.registered.get(n).add({ctx:i,fn:r})})})},c.prototype.do=function(t){for(var n=[],r=arguments.length-1;r-- >0;)n[r]=arguments[r+1];if(this.registered.has(t)){var i=Promise.resolve();return this.registered.get(t).forEach(function(t){var r=t.ctx?t.fn.bind(t.ctx):t.fn;i=i.then(function(){return u(r).apply(void 0,n)})}),i}return Promise.resolve()},c.prototype.clear=function(){var t=this;this.all.forEach(function(n){delete t[n]}),this.init()},c.prototype.help=function(){this.logger.info(\"Available hooks: \"+this.all.join(\",\"));var t=[];this.registered.forEach(function(n,r){return t.push(r)}),this.logger.info(\"Registered hooks: \"+t.join(\",\"))};var a=new c,h=function t(n,r,i){return n instanceof RegExp?function(t,n){if(!n)return t;var r=t.source.match(/\\((?!\\?)/g);if(r)for(var i=0;i<r.length;i++)n.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return t}(n,r):Array.isArray(n)?function(n,r,i){for(var e=[],o=0;o<n.length;o++)e.push(t(n[o],r,i).source);return new RegExp(\"(?:\"+e.join(\"|\")+\")\",g(i))}(n,r,i):function(t,n,r){return E(w(t,r),n,r)}(n,r,i)},v=w,l=b,p=E,d=\"/\",m=new RegExp([\"(\\\\\\\\.)\",\"(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?\"].join(\"|\"),\"g\");function w(t,n){for(var r,i=[],e=0,o=0,u=\"\",f=n&&n.delimiter||d,s=n&&n.whitelist||void 0,c=!1;null!==(r=m.exec(t));){var a=r[0],h=r[1],v=r.index;if(u+=t.slice(o,v),o=v+a.length,h)u+=h[1],c=!0;else{var l=\"\",p=r[2],w=r[3],b=r[4],g=r[5];if(!c&&u.length){var E=u.length-1,x=u[E];(!s||s.indexOf(x)>-1)&&(l=x,u=u.slice(0,E))}u&&(i.push(u),u=\"\",c=!1);var A=w||b,T=l||f;i.push({name:p||e++,prefix:l,delimiter:T,optional:\"?\"===g||\"*\"===g,repeat:\"+\"===g||\"*\"===g,pattern:A?P(A):\"[^\"+y(T===f?T:T+f)+\"]+?\"})}}return(u||o<t.length)&&i.push(u+t.substr(o)),i}function b(t){for(var n=new Array(t.length),r=0;r<t.length;r++)\"object\"==typeof t[r]&&(n[r]=new RegExp(\"^(?:\"+t[r].pattern+\")$\"));return function(r,i){for(var e=\"\",o=i&&i.encode||encodeURIComponent,u=0;u<t.length;u++){var f=t[u];if(\"string\"!=typeof f){var s,c=r?r[f.name]:void 0;if(Array.isArray(c)){if(!f.repeat)throw new TypeError('Expected \"'+f.name+'\" to not repeat, but got array');if(0===c.length){if(f.optional)continue;throw new TypeError('Expected \"'+f.name+'\" to not be empty')}for(var a=0;a<c.length;a++){if(s=o(c[a],f),!n[u].test(s))throw new TypeError('Expected all \"'+f.name+'\" to match \"'+f.pattern+'\"');e+=(0===a?f.prefix:f.delimiter)+s}}else if(\"string\"!=typeof c&&\"number\"!=typeof c&&\"boolean\"!=typeof c){if(!f.optional)throw new TypeError('Expected \"'+f.name+'\" to be '+(f.repeat?\"an array\":\"a string\"))}else{if(s=o(String(c),f),!n[u].test(s))throw new TypeError('Expected \"'+f.name+'\" to match \"'+f.pattern+'\", but got \"'+s+'\"');e+=f.prefix+s}}else e+=f}return e}}function y(t){return t.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g,\"\\\\$1\")}function P(t){return t.replace(/([=!:$\\/()])/g,\"\\\\$1\")}function g(t){return t&&t.sensitive?\"\":\"i\"}function E(t,n,r){for(var i=(r=r||{}).strict,e=!1!==r.start,o=!1!==r.end,u=r.delimiter||d,f=[].concat(r.endsWith||[]).map(y).concat(\"$\").join(\"|\"),s=e?\"^\":\"\",c=0;c<t.length;c++){var a=t[c];if(\"string\"==typeof a)s+=y(a);else{var h=a.repeat?\"(?:\"+a.pattern+\")(?:\"+y(a.delimiter)+\"(?:\"+a.pattern+\"))*\":a.pattern;n&&n.push(a),s+=a.optional?a.prefix?\"(?:\"+y(a.prefix)+\"(\"+h+\"))?\":\"(\"+h+\")?\":y(a.prefix)+\"(\"+h+\")\"}}if(o)i||(s+=\"(?:\"+y(u)+\")?\"),s+=\"$\"===f?\"$\":\"(?=\"+f+\")\";else{var v=t[t.length-1],l=\"string\"==typeof v?v[v.length-1]===u:void 0===v;i||(s+=\"(?:\"+y(u)+\"(?=\"+f+\"))?\"),l||(s+=\"(?=\"+y(u)+\"|\"+f+\")\")}return new RegExp(s,g(r))}h.parse=v,h.compile=function(t,n){return b(w(t,n))},h.tokensToFunction=l,h.tokensToRegExp=p;var x={container:\"container\",namespace:\"namespace\",prefix:\"data-barba\",prevent:\"prevent\",wrapper:\"wrapper\"},A=function(){this.g=x,this.A=new DOMParser};A.prototype.toString=function(t){return t.outerHTML},A.prototype.toDocument=function(t){return this.A.parseFromString(t,\"text/html\")},A.prototype.toElement=function(t){var n=document.createElement(\"div\");return n.innerHTML=t,n},A.prototype.getHtml=function(t){return void 0===t&&(t=document),this.toString(t.documentElement)},A.prototype.getWrapper=function(t){return void 0===t&&(t=document),t.querySelector(\"[\"+this.g.prefix+'=\"'+this.g.wrapper+'\"]')},A.prototype.getContainer=function(t){return void 0===t&&(t=document),t.querySelector(\"[\"+this.g.prefix+'=\"'+this.g.container+'\"]')},A.prototype.getNamespace=function(t){void 0===t&&(t=document);var n=t.querySelector(\"[\"+this.g.prefix+\"-\"+this.g.namespace+\"]\");return n?n.getAttribute(this.g.prefix+\"-\"+this.g.namespace):null},A.prototype.getHref=function(t){return t.getAttribute&&t.getAttribute(\"href\")?t.href:null};var T=new A,j=function(){this.T=[]},R={current:{configurable:!0},previous:{configurable:!0}};j.prototype.add=function(t,n){this.T.push({url:t,ns:n})},j.prototype.remove=function(){this.T.pop()},j.prototype.push=function(t,n){this.add(t,n),window.history&&window.history.pushState(null,\"\",t)},j.prototype.cancel=function(){this.remove(),window.history&&window.history.back()},R.current.get=function(){return this.T[this.T.length-1]},R.previous.get=function(){return this.T.length<2?null:this.T[this.T.length-2]},Object.defineProperties(j.prototype,R);var k=new j,O=function(t,n){try{var r=function(){if(!n.next.html)return Promise.resolve(t).then(function(t){var r=n.next,i=n.trigger;if(t){var e=T.toElement(t);r.namespace=T.getNamespace(e),r.container=T.getContainer(e),r.html=t,\"popstate\"===i?k.add(r.url.href,r.namespace):k.push(r.url.href,r.namespace);var o=T.toDocument(t);document.title=o.title}})}();return Promise.resolve(r&&r.then?r.then(function(){}):void 0)}catch(t){return Promise.reject(t)}},L=function(){return new Promise(function(t){window.requestAnimationFrame(t)})},M=h,S={update:O,nextTick:L,pathToRegexp:M},$=function(){return window.location.origin},q=function(t){var n=t||window.location.port,r=window.location.protocol;return\"\"!==n?parseInt(n,10):\"https:\"===r?443:80},C=function(t){var n,r=t.replace($(),\"\"),i={},e=r.indexOf(\"#\");e>=0&&(n=r.slice(e+1),r=r.slice(0,e));var o=r.indexOf(\"?\");return o>=0&&(i=B(r.slice(o+1)),r=r.slice(0,o)),{hash:n,path:r,query:i}},B=function(t){return t.split(\"&\").reduce(function(t,n){var r=n.split(\"=\");return t[r[0]]=r[1],t},{})},H=function(t){return t.replace(/#.*/,\"\")},I={getHref:function(){return window.location.href},getOrigin:$,getPort:q,getPath:function(t){return C(t).path},parse:C,parseQuery:B,clean:H},N=function(t){if(this.j=[],\"boolean\"==typeof t)this.R=t;else{var n=Array.isArray(t)?t:[t];this.j=n.map(function(t){return M(t)})}};N.prototype.checkUrl=function(t){if(\"boolean\"==typeof this.R)return this.R;var n=C(t).path;return this.j.some(function(t){return null!==t.exec(n)})};var U=function(t){function n(n){t.call(this,n),this.T=new Map}return t&&(n.__proto__=t),(n.prototype=Object.create(t&&t.prototype)).constructor=n,n.prototype.set=function(t,n,r){return this.checkUrl(t)||this.T.set(t,{action:r,request:n}),{action:r,request:n}},n.prototype.get=function(t){return this.T.get(t)},n.prototype.getRequest=function(t){return this.T.get(t).request},n.prototype.getAction=function(t){return this.T.get(t).action},n.prototype.has=function(t){return this.T.has(t)},n.prototype.delete=function(t){return this.T.delete(t)},n.prototype.update=function(t,n){var r=Object.assign({},this.T.get(t),n);return this.T.set(t,r),r},n}(N);function D(t,n,r){return void 0===n&&(n=2e3),new Promise(function(i,e){var o=new XMLHttpRequest;o.onreadystatechange=function(){if(o.readyState===XMLHttpRequest.DONE)if(200===o.status)i(o.responseText);else if(o.status){var n={status:o.status,statusText:o.statusText};r(t,n),e(n)}},o.ontimeout=function(){var i=new Error(\"Timeout error [\"+n+\"]\");r(t,i),e(i)},o.onerror=function(){var n=new Error(\"Fetch error\");r(t,n),e(n)},o.open(\"GET\",t),o.timeout=n,o.setRequestHeader(\"Accept\",\"text/html,application/xhtml+xml,application/xml\"),o.setRequestHeader(\"x-barba\",\"yes\"),o.send()})}var X=function(){return!window.history.pushState},_=function(t){return!t.el||!t.href},F=function(t){var n=t.event;return n.which>1||n.metaKey||n.ctrlKey||n.shiftKey||n.altKey},G=function(t){var n=t.el;return n.hasAttribute(\"target\")&&\"_blank\"===n.target},Q=function(t){var n=t.el;return window.location.protocol!==n.protocol||window.location.hostname!==n.hostname},W=function(t){var n=t.el;return q()!==q(n.port)},z=function(t){var n=t.el;return n.getAttribute&&\"string\"==typeof n.getAttribute(\"download\")},J=function(t){return t.el.hasAttribute(x.prefix+\"-\"+x.prevent)},K=function(t){return Boolean(t.el.closest(\"[\"+x.prefix+\"-\"+x.prevent+'=\"all\"]'))},V=function(t){return H(t.href)===H(window.location.href)},Y=function(t){function n(n){t.call(this,n),this.suite=[],this.tests=new Map,this.init()}return t&&(n.__proto__=t),(n.prototype=Object.create(t&&t.prototype)).constructor=n,n.prototype.init=function(){this.add(\"pushState\",X),this.add(\"exists\",_),this.add(\"newTab\",F),this.add(\"blank\",G),this.add(\"corsDomain\",Q),this.add(\"corsPort\",W),this.add(\"download\",z),this.add(\"preventSelf\",J),this.add(\"preventAll\",K),this.add(\"sameUrl\",V,!1)},n.prototype.add=function(t,n,r){void 0===r&&(r=!0),this.tests.set(t,n),r&&this.suite.push(t)},n.prototype.run=function(t,n,r,i){return this.tests.get(t)({el:n,event:r,href:i})},n.prototype.checkLink=function(t,n,r){var i=this;return this.suite.some(function(e){return i.run(e,t,n,r)})},n}(N),Z=function(t){void 0===t&&(t=[]),this.logger=new s(\"@barba/core\"),this.all=[],this.appear=[],this.k=[{name:\"namespace\",type:\"strings\"},{name:\"custom\",type:\"function\"}],t&&(this.all=this.all.concat(t)),this.update()};Z.prototype.add=function(t,n){switch(t){case\"rule\":this.k.splice(n.position||0,0,n.value);break;case\"transition\":default:this.all.push(n)}this.update()},Z.prototype.resolve=function(t,n){var r,i=this;void 0===n&&(n={});var e=n.appear?this.appear:this.all;e=e.filter(n.self?function(t){return t.name&&\"self\"===t.name}:function(t){return!t.name||\"self\"!==t.name});var o=new Map,u=e.find(function(r){var e=!0,u={};return!(!n.self||\"self\"!==r.name)||(i.k.reverse().forEach(function(o){e&&(e=i.O(r,o,t,u),n.appear||(r.from&&r.to&&(e=i.O(r,o,t,u,\"from\")&&i.O(r,o,t,u,\"to\")),r.from&&!r.to&&(e=i.O(r,o,t,u,\"from\")),!r.from&&r.to&&(e=i.O(r,o,t,u,\"to\"))))}),o.set(r,u),e)}),f=o.get(u),s=[];if(s.push(n.appear?\"appear\":\"page\"),n.self&&s.push(\"self\"),f){var c=[u];Object.keys(f).length>0&&c.push(f),(r=this.logger).info.apply(r,[\"Transition found [\"+s.join(\",\")+\"]\"].concat(c))}else this.logger.info(\"No transition found [\"+s.join(\",\")+\"]\");return u},Z.prototype.update=function(){var t=this;this.all=this.all.map(function(n){return t.L(n)}).sort(function(t,n){return t.priority-n.priority}).reverse().map(function(t){return delete t.priority,t}),this.appear=this.all.filter(function(t){return void 0!==t.appear})},Z.prototype.O=function(t,n,r,i,e){var o=!0,u=!1,f=t,s=n.name,c=s,a=s,h=s,v=e?f[e]:f,l=\"to\"===e?r.next:r.current;if(e?v&&v[s]:v[s]){switch(n.type){case\"strings\":default:var p=Array.isArray(v[c])?v[c]:[v[c]];l[c]&&-1!==p.indexOf(l[c])&&(u=!0),-1===p.indexOf(l[c])&&(o=!1);break;case\"object\":var d=Array.isArray(v[a])?v[a]:[v[a]];l[a]&&(l[a].name&&-1!==d.indexOf(l[a].name)&&(u=!0),-1===d.indexOf(l[a].name)&&(o=!1));break;case\"function\":v[h](r)?u=!0:o=!1}u&&(e?(i[e]=i[e]||{},i[e][s]=f[e][s]):i[s]=f[s])}return o},Z.prototype.M=function(t,n,r){var i=0;return(t[n]||t.from&&t.from[n]||t.to&&t.to[n])&&(i+=Math.pow(10,r),t.from&&t.from[n]&&(i+=1),t.to&&t.to[n]&&(i+=2)),i},Z.prototype.L=function(t){var n=this;t.priority=0;var r=0;return this.k.forEach(function(i,e){r+=n.M(t,i.name,e+1)}),t.priority=r,t};var tt=function(t){void 0===t&&(t=[]),this.logger=new s(\"@barba/core\"),this.S=!1,this.store=new Z(t)},nt={isRunning:{configurable:!0},hasAppear:{configurable:!0},hasSelf:{configurable:!0},shouldWait:{configurable:!0}};tt.prototype.get=function(t,n){return this.store.resolve(t,n)},nt.isRunning.get=function(){return this.S},nt.isRunning.set=function(t){this.S=t},nt.hasAppear.get=function(){return this.store.appear.length>0},nt.hasSelf.get=function(){return this.store.all.some(function(t){return\"self\"===t.name})},nt.shouldWait.get=function(){return this.store.all.some(function(t){return t.to&&!t.to.route||t.sync})},tt.prototype.doAppear=function(t){var n=t.data,i=t.transition;try{var e=this;function o(t){e.S=!1}var u=i||{};e.S=!0;var f=r(function(){return Promise.resolve(e.$(\"beforeAppear\",n,u)).then(function(){return Promise.resolve(e.appear(n,u)).then(function(){return Promise.resolve(e.$(\"afterAppear\",n,u)).then(function(){})})})},function(t){throw e.S=!1,e.logger.error(t),new Error(\"Transition error [appear]\")});return f&&f.then?f.then(o):o()}catch(t){return Promise.reject(t)}},tt.prototype.doPage=function(t){var n=t.data,i=t.transition,e=t.page,o=t.wrapper;try{var u=this;function f(t){u.S=!1}var s=i||{},c=!0===s.sync||!1;u.S=!0;var a=r(function(){function t(){return Promise.resolve(u.$(\"before\",n,s)).then(function(){function t(t){return Promise.resolve(u.$(\"after\",n,s)).then(function(){return Promise.resolve(u.remove(n)).then(function(){})})}var i=function(){if(c)return r(function(){return Promise.resolve(u.add(n,o)).then(function(){return Promise.resolve(u.$(\"beforeLeave\",n,s)).then(function(){return Promise.resolve(u.$(\"beforeEnter\",n,s)).then(function(){return Promise.resolve(Promise.all([u.leave(n,s),u.enter(n,s)])).then(function(){return Promise.resolve(u.$(\"afterLeave\",n,s)).then(function(){return Promise.resolve(u.$(\"afterEnter\",n,s)).then(function(){})})})})})})},function(){throw new Error(\"Transition error [page][sync]\")});{function t(t){return r(function(){var t=function(){if(!1!==i)return Promise.resolve(u.add(n,o)).then(function(){return Promise.resolve(u.$(\"beforeEnter\",n,s)).then(function(){return Promise.resolve(u.enter(n,s,i)).then(function(){return Promise.resolve(u.$(\"afterEnter\",n,s)).then(function(){})})})})}();if(t&&t.then)return t.then(function(){})},function(){throw new Error(\"Transition error [page][enter]\")})}var i=!1,f=r(function(){return Promise.resolve(u.$(\"beforeLeave\",n,s)).then(function(){return Promise.resolve(Promise.all([u.leave(n,s),O(e,n)]).then(function(t){return t[0]})).then(function(t){return i=t,Promise.resolve(u.$(\"afterLeave\",n,s)).then(function(){})})})},function(){throw new Error(\"Transition error [page][leave]\")});return f&&f.then?f.then(t):t()}}();return i&&i.then?i.then(t):t()})}var i=function(){if(c)return Promise.resolve(O(e,n)).then(function(){})}();return i&&i.then?i.then(t):t()},function(t){throw u.S=!1,u.logger.error(t),new Error(\"Transition error\")});return a&&a.then?a.then(f):f()}catch(t){return Promise.reject(t)}},tt.prototype.appear=function(t,n){try{return Promise.resolve(a.do(\"appear\",t,n)).then(function(){return n.appear?u(n.appear)(t):Promise.resolve()})}catch(t){return Promise.reject(t)}},tt.prototype.leave=function(t,n){try{return Promise.resolve(a.do(\"leave\",t,n)).then(function(){return n.leave?u(n.leave)(t):Promise.resolve()})}catch(t){return Promise.reject(t)}},tt.prototype.enter=function(t,n,r){try{return Promise.resolve(a.do(\"enter\",t,n)).then(function(){return n.enter?u(n.enter)(t,r):Promise.resolve()})}catch(t){return Promise.reject(t)}},tt.prototype.add=function(t,n){try{return n.appendChild(t.next.container),Promise.resolve(L()).then(function(){a.do(\"nextAdded\",t)})}catch(t){return Promise.reject(t)}},tt.prototype.remove=function(t){try{var n=t.current.container,r=function(){if(document.body.contains(n))return Promise.resolve(L()).then(function(){return n.parentNode.removeChild(n),Promise.resolve(L()).then(function(){a.do(\"currentRemoved\",t)})})}();return r&&r.then?r.then(function(){}):void 0}catch(t){return Promise.reject(t)}},tt.prototype.$=function(t,n,r){try{return Promise.resolve(a.do(t,n,r)).then(function(){return r[t]?u(r[t])(n):Promise.resolve()})}catch(t){return Promise.reject(t)}},Object.defineProperties(tt.prototype,nt);var rt=function(t){var n=this;this.names=[\"beforeAppear\",\"afterAppear\",\"beforeLeave\",\"afterLeave\",\"beforeEnter\",\"afterEnter\"],this.byNamespace=new Map,0!==t.length&&(t.forEach(function(t){n.byNamespace.set(t.namespace,t)}),this.names.forEach(function(t){a[t](n.q(t),n)}),a.ready(this.q(\"beforeEnter\"),this))};rt.prototype.q=function(t){var n=this;return function(r){var i=t.match(/enter/i)?r.next:r.current,e=n.byNamespace.get(i.namespace);e&&e[t]&&e[t](r)}},Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),Element.prototype.closest||(Element.prototype.closest=function(t){var n=this;do{if(n.matches(t))return n;n=n.parentElement||n.parentNode}while(null!==n&&1===n.nodeType);return null});var it={container:void 0,html:void 0,namespace:void 0,url:{hash:void 0,href:void 0,path:void 0,query:{}}},et=function(){this.version=\"2.3.9\",this.schemaPage=it,this.Logger=s,this.logger=new s(\"@barba/core\"),this.plugins=[],this.hooks=a,this.dom=T,this.helpers=S,this.history=k,this.request=D,this.url=I},ot={data:{configurable:!0},wrapper:{configurable:!0}};return et.prototype.use=function(t,n){var r=this.plugins;r.indexOf(t)>-1?this.logger.warn(\"Plugin [\"+t.name+\"] already installed.\"):\"function\"==typeof t.install?(t.install(this,n),r.push(t)):this.logger.warn(\"Plugin [\"+t.name+'] has no \"install\" method.')},et.prototype.init=function(t){void 0===t&&(t={});var n=t.transitions;void 0===n&&(n=[]);var r=t.views;void 0===r&&(r=[]);var i=t.prevent;void 0===i&&(i=null);var e=t.timeout;void 0===e&&(e=2e3);var o=t.requestError,u=t.cacheIgnore;void 0===u&&(u=!1);var f=t.prefetchIgnore;void 0===f&&(f=!1);var c=t.schema;void 0===c&&(c=x);var a=t.debug;void 0===a&&(a=!1);var h=t.logLevel;if(void 0===h&&(h=\"off\"),s.setLevel(!0===a?\"debug\":h),this.logger.print(this.version),Object.keys(c).forEach(function(t){x[t]&&(x[t]=c[t])}),this.C=o,this.timeout=e,this.cacheIgnore=u,this.prefetchIgnore=f,this.B=this.dom.getWrapper(),!this.B)throw new Error(\"[@barba/core] No Barba wrapper found\");this.B.setAttribute(\"aria-live\",\"polite\"),this.H();var v=this.data.current;if(!v.container)throw new Error(\"[@barba/core] No Barba container found\");if(this.cache=new U(u),this.prevent=new Y(f),this.transitions=new tt(n),this.views=new rt(r),null!==i){if(\"function\"!=typeof i)throw new Error(\"[@barba/core] Prevent should be a function\");this.prevent.add(\"preventCustom\",i)}this.history.add(v.url.href,v.namespace),this.I=this.I.bind(this),this.N=this.N.bind(this),this.U=this.U.bind(this),this.D(),this.plugins.forEach(function(t){return t.init()});var l=this.data;l.trigger=\"barba\",l.next=l.current,this.hooks.do(\"ready\",l),this.appear(),this.H()},et.prototype.destroy=function(){this.H(),this.X(),this.hooks.clear(),this.plugins=[]},ot.data.get=function(){return this._},ot.wrapper.get=function(){return this.B},et.prototype.force=function(t){window.location.assign(t)},et.prototype.go=function(t,n,r){var i;if(void 0===n&&(n=\"barba\"),!(i=\"popstate\"===n?this.history.current&&this.url.getPath(this.history.current.url)===this.url.getPath(t):this.prevent.run(\"sameUrl\",null,null,t))||this.transitions.hasSelf)return r&&(r.stopPropagation(),r.preventDefault()),this.page(t,n,i)},et.prototype.appear=function(){try{var t=this,n=function(){if(t.transitions.hasAppear){var n=r(function(){var n=t._,r=t.transitions.get(n,{appear:!0});return Promise.resolve(t.transitions.doAppear({transition:r,data:n})).then(function(){})},function(n){t.logger.error(n)});if(n&&n.then)return n.then(function(){})}}();return n&&n.then?n.then(function(){}):void 0}catch(t){return Promise.reject(t)}},et.prototype.page=function(t,n,i){try{var e=this;function o(){var t=e.data;e.hooks.do(\"page\",t);var n=r(function(){var n=e.transitions.get(t,{appear:!1,self:i});return Promise.resolve(e.transitions.doPage({data:t,page:u,transition:n,wrapper:e.B})).then(function(){e.H()})},function(t){e.logger.error(t)});if(n&&n.then)return n.then(function(){})}if(e.transitions.isRunning)return void e.force(t);e.data.next.url=Object.assign({},{href:t},e.url.parse(t)),e.data.trigger=n;var u=e.cache.has(t)?e.cache.update(t,{action:\"click\"}).request:e.cache.set(t,e.request(t,e.timeout,e.onRequestError.bind(e,n)),\"click\").request,f=function(){if(e.transitions.shouldWait)return Promise.resolve(O(u,e.data)).then(function(){})}();return f&&f.then?f.then(o):o()}catch(t){return Promise.reject(t)}},et.prototype.onRequestError=function(t){for(var n=[],r=arguments.length-1;r-- >0;)n[r]=arguments[r+1];this.transitions.isRunning=!1;var i=n[0],e=n[1],o=this.cache.getAction(i);return this.cache.delete(i),!(this.C&&!1===this.C(t,o,i,e)||(\"click\"===o&&this.force(i),1))},et.prototype.prefetch=function(t){var n=this;this.cache.has(t)||this.cache.set(t,this.request(t,this.timeout,this.onRequestError.bind(this,\"barba\")).catch(function(t){n.logger.error(t)}),\"prefetch\")},et.prototype.D=function(){!0!==this.prefetchIgnore&&(document.addEventListener(\"mouseover\",this.I),document.addEventListener(\"touchstart\",this.I)),document.addEventListener(\"click\",this.N),window.addEventListener(\"popstate\",this.U)},et.prototype.X=function(){!0!==this.prefetchIgnore&&(document.removeEventListener(\"mouseover\",this.I),document.removeEventListener(\"touchstart\",this.I)),document.removeEventListener(\"click\",this.N),window.removeEventListener(\"popstate\",this.U)},et.prototype.I=function(t){var n=this,r=this.F(t);if(r){var i=this.dom.getHref(r);this.prevent.checkUrl(i)||this.cache.has(i)||this.cache.set(i,this.request(i,this.timeout,this.onRequestError.bind(this,r)).catch(function(t){n.logger.error(t)}),\"enter\")}},et.prototype.N=function(t){var n=this.F(t);n&&this.go(this.dom.getHref(n),n,t)},et.prototype.U=function(){this.go(this.url.getHref(),\"popstate\")},et.prototype.F=function(t){for(var n=t.target;n&&!this.dom.getHref(n);)n=n.parentNode;if(n&&!this.prevent.checkLink(n,t,n.href))return n},et.prototype.H=function(){var t=this.url.getHref(),n={container:this.dom.getContainer(),html:this.dom.getHtml(),namespace:this.dom.getNamespace(),url:Object.assign({},{href:t},this.url.parse(t))};this._={current:n,next:Object.assign({},this.schemaPage),trigger:void 0},this.hooks.do(\"reset\",this.data)},Object.defineProperties(et.prototype,ot),new et});\n//# sourceMappingURL=barba.umd.js.map\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):t.barbaPrefetch=i()}(this,function(){var t=window.requestIdleCallback||function(t){var i=Date.now();return setTimeout(function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-i))}})},1)},i=function(){this.name=\"@barba/prefetch\",this.version=\"2.1.5\",this.toPrefetch=new Set};return i.prototype.install=function(t,i){void 0===i&&(i={});var n=i.root;void 0===n&&(n=document.body);var e=i.timeout;void 0===e&&(e=2e3),this.logger=new t.Logger(this.name),this.logger.print(this.version),this.barba=t,this.root=n,this.timeout=e},i.prototype.init=function(){var t=this;this.barba.prefetchIgnore?this.logger.warn(\"barba.prefetchIgnore is enabled\"):this.barba.cacheIgnore?this.logger.warn(\"barba.cacheIgnore is enabled\"):(this.observer=new IntersectionObserver(function(i){i.forEach(function(i){if(i.isIntersecting){var n=i.target,e=t.barba.dom.getHref(n);t.toPrefetch.has(e)&&(t.observer.unobserve(n),t.barba.cache.has(e)?t.barba.cache.update(e,{action:\"prefetch\"}):t.barba.cache.set(e,t.barba.request(e,t.barba.timeout,t.barba.onRequestError.bind(t.barba,\"barba\")).catch(function(i){t.logger.error(i)}),\"prefetch\"))}})}),this.observe(),this.barba.hooks.after(this.observe,this))},i.prototype.observe=function(){var i=this;t(function(){i.root.querySelectorAll(\"a\").forEach(function(t){var n=t,e=i.barba.dom.getHref(n);i.barba.cache.has(e)||i.barba.prevent.checkUrl(e)||i.barba.prevent.checkLink(n,{},e)||(i.observer.observe(t),i.toPrefetch.add(e))})},{timeout:this.timeout})},new i});\n//# sourceMappingURL=barba-prefetch.umd.js.map\n","/*!\n * VERSION: 0.6.1\n * DATE: 2018-08-27\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport { _gsScope } from \"./TweenLite.js\";\n\nexport var AttrPlugin = _gsScope._gsDefine.plugin({\n\tpropName: \"attr\",\n\tAPI: 2,\n\tversion: \"0.6.1\",\n\n\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\tinit: function(target, value, tween, index) {\n\t\tvar p, end;\n\t\tif (typeof(target.setAttribute) !== \"function\") {\n\t\t\treturn false;\n\t\t}\n\t\tfor (p in value) {\n\t\t\tend = value[p];\n\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\tend = end(index, target);\n\t\t\t}\n\t\t\tthis._addTween(target, \"setAttribute\", target.getAttribute(p) + \"\", end + \"\", p, false, p);\n\t\t\tthis._overwriteProps.push(p);\n\t\t}\n\t\treturn true;\n\t}\n\n});\n\nexport { AttrPlugin as default };\n\n\n\n","/*!\n * VERSION: 1.3.9\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\nimport { _gsScope } from \"./TweenLite.js\";\n\n\t\tvar _RAD2DEG = 180 / Math.PI,\n\t\t\t_r1 = [],\n\t\t\t_r2 = [],\n\t\t\t_r3 = [],\n\t\t\t_corProps = {},\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\tSegment = function(a, b, c, d) {\n\t\t\t\tif (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.\n\t\t\t\t\tc = d - (d - b) / 1000000;\n\t\t\t\t}\n\t\t\t\tif (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.\n\t\t\t\t\tb = a + (c - a) / 1000000;\n\t\t\t\t}\n\t\t\t\tthis.a = a;\n\t\t\t\tthis.b = b;\n\t\t\t\tthis.c = c;\n\t\t\t\tthis.d = d;\n\t\t\t\tthis.da = d - a;\n\t\t\t\tthis.ca = c - a;\n\t\t\t\tthis.ba = b - a;\n\t\t\t},\n\t\t\t_correlate = \",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,\",\n\t\t\tcubicToQuadratic = function(a, b, c, d) {\n\t\t\t\tvar q1 = {a:a},\n\t\t\t\t\tq2 = {},\n\t\t\t\t\tq3 = {},\n\t\t\t\t\tq4 = {c:d},\n\t\t\t\t\tmab = (a + b) / 2,\n\t\t\t\t\tmbc = (b + c) / 2,\n\t\t\t\t\tmcd = (c + d) / 2,\n\t\t\t\t\tmabc = (mab + mbc) / 2,\n\t\t\t\t\tmbcd = (mbc + mcd) / 2,\n\t\t\t\t\tm8 = (mbcd - mabc) / 8;\n\t\t\t\tq1.b = mab + (a - mab) / 4;\n\t\t\t\tq2.b = mabc + m8;\n\t\t\t\tq1.c = q2.a = (q1.b + q2.b) / 2;\n\t\t\t\tq2.c = q3.a = (mabc + mbcd) / 2;\n\t\t\t\tq3.b = mbcd - m8;\n\t\t\t\tq4.b = mcd + (d - mcd) / 4;\n\t\t\t\tq3.c = q4.a = (q3.b + q4.b) / 2;\n\t\t\t\treturn [q1, q2, q3, q4];\n\t\t\t},\n\t\t\t_calculateControlPoints = function(a, curviness, quad, basic, correlate) {\n\t\t\t\tvar l = a.length - 1,\n\t\t\t\t\tii = 0,\n\t\t\t\t\tcp1 = a[0].a,\n\t\t\t\t\ti, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tseg = a[ii];\n\t\t\t\t\tp1 = seg.a;\n\t\t\t\t\tp2 = seg.d;\n\t\t\t\t\tp3 = a[ii+1].d;\n\n\t\t\t\t\tif (correlate) {\n\t\t\t\t\t\tr1 = _r1[i];\n\t\t\t\t\t\tr2 = _r2[i];\n\t\t\t\t\t\ttl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);\n\t\t\t\t\t\tm1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));\n\t\t\t\t\t\tm2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));\n\t\t\t\t\t\tmm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tm1 = p2 - (p2 - p1) * curviness * 0.5;\n\t\t\t\t\t\tm2 = p2 + (p3 - p2) * curviness * 0.5;\n\t\t\t\t\t\tmm = p2 - (m1 + m2) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tm1 += mm;\n\t\t\t\t\tm2 += mm;\n\n\t\t\t\t\tseg.c = cp2 = m1;\n\t\t\t\t\tif (i !== 0) {\n\t\t\t\t\t\tseg.b = cp1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.\n\t\t\t\t\t}\n\n\t\t\t\t\tseg.da = p2 - p1;\n\t\t\t\t\tseg.ca = cp2 - p1;\n\t\t\t\t\tseg.ba = cp1 - p1;\n\n\t\t\t\t\tif (quad) {\n\t\t\t\t\t\tqb = cubicToQuadratic(p1, cp1, cp2, p2);\n\t\t\t\t\t\ta.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);\n\t\t\t\t\t\tii += 4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tii++;\n\t\t\t\t\t}\n\n\t\t\t\t\tcp1 = m2;\n\t\t\t\t}\n\t\t\t\tseg = a[ii];\n\t\t\t\tseg.b = cp1;\n\t\t\t\tseg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.\n\t\t\t\tseg.da = seg.d - seg.a;\n\t\t\t\tseg.ca = seg.c - seg.a;\n\t\t\t\tseg.ba = cp1 - seg.a;\n\t\t\t\tif (quad) {\n\t\t\t\t\tqb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);\n\t\t\t\t\ta.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_parseAnchors = function(values, p, correlate, prepend) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tl, i, p1, p2, p3, tmp;\n\t\t\t\tif (prepend) {\n\t\t\t\t\tvalues = [prepend].concat(values);\n\t\t\t\t\ti = values.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (typeof( (tmp = values[i][p]) ) === \"string\") if (tmp.charAt(1) === \"=\") {\n\t\t\t\t\t\t\tvalues[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tl = values.length - 2;\n\t\t\t\tif (l < 0) {\n\t\t\t\t\ta[0] = new Segment(values[0][p], 0, 0, values[0][p]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tp1 = values[i][p];\n\t\t\t\t\tp2 = values[i+1][p];\n\t\t\t\t\ta[i] = new Segment(p1, 0, 0, p2);\n\t\t\t\t\tif (correlate) {\n\t\t\t\t\t\tp3 = values[i+2][p];\n\t\t\t\t\t\t_r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);\n\t\t\t\t\t\t_r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ta[i] = new Segment(values[i][p], 0, 0, values[i+1][p]);\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\tbezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {\n\t\t\t\tvar obj = {},\n\t\t\t\t\tprops = [],\n\t\t\t\t\tfirst = prepend || values[0],\n\t\t\t\t\ti, p, a, j, r, l, seamless, last;\n\t\t\t\tcorrelate = (typeof(correlate) === \"string\") ? \",\"+correlate+\",\" : _correlate;\n\t\t\t\tif (curviness == null) {\n\t\t\t\t\tcurviness = 1;\n\t\t\t\t}\n\t\t\t\tfor (p in values[0]) {\n\t\t\t\t\tprops.push(p);\n\t\t\t\t}\n\t\t\t\t//check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)\n\t\t\t\tif (values.length > 1) {\n\t\t\t\t\tlast = values[values.length - 1];\n\t\t\t\t\tseamless = true;\n\t\t\t\t\ti = props.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = props[i];\n\t\t\t\t\t\tif (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.\n\t\t\t\t\t\t\tseamless = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (seamless) {\n\t\t\t\t\t\tvalues = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens\n\t\t\t\t\t\tif (prepend) {\n\t\t\t\t\t\t\tvalues.unshift(prepend);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalues.push(values[1]);\n\t\t\t\t\t\tprepend = values[values.length - 3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_r1.length = _r2.length = _r3.length = 0;\n\t\t\t\ti = props.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = props[i];\n\t\t\t\t\t_corProps[p] = (correlate.indexOf(\",\"+p+\",\") !== -1);\n\t\t\t\t\tobj[p] = _parseAnchors(values, p, _corProps[p], prepend);\n\t\t\t\t}\n\t\t\t\ti = _r1.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t_r1[i] = Math.sqrt(_r1[i]);\n\t\t\t\t\t_r2[i] = Math.sqrt(_r2[i]);\n\t\t\t\t}\n\t\t\t\tif (!basic) {\n\t\t\t\t\ti = props.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (_corProps[p]) {\n\t\t\t\t\t\t\ta = obj[props[i]];\n\t\t\t\t\t\t\tl = a.length - 1;\n\t\t\t\t\t\t\tfor (j = 0; j < l; j++) {\n\t\t\t\t\t\t\t\tr = (a[j+1].da / _r2[j] + a[j].da / _r1[j]) || 0;\n\t\t\t\t\t\t\t\t_r3[j] = (_r3[j] || 0) + r * r;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ti = _r3.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t_r3[i] = Math.sqrt(_r3[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = props.length;\n\t\t\t\tj = quadratic ? 4 : 1;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = props[i];\n\t\t\t\t\ta = obj[p];\n\t\t\t\t\t_calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties\n\t\t\t\t\tif (seamless) {\n\t\t\t\t\t\ta.splice(0, j);\n\t\t\t\t\t\ta.splice(a.length - j, j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t},\n\t\t\t_parseBezierData = function(values, type, prepend) {\n\t\t\t\ttype = type || \"soft\";\n\t\t\t\tvar obj = {},\n\t\t\t\t\tinc = (type === \"cubic\") ? 3 : 2,\n\t\t\t\t\tsoft = (type === \"soft\"),\n\t\t\t\t\tprops = [],\n\t\t\t\t\ta, b, c, d, cur, i, j, l, p, cnt, tmp;\n\t\t\t\tif (soft && prepend) {\n\t\t\t\t\tvalues = [prepend].concat(values);\n\t\t\t\t}\n\t\t\t\tif (values == null || values.length < inc + 1) { throw \"invalid Bezier data\"; }\n\t\t\t\tfor (p in values[0]) {\n\t\t\t\t\tprops.push(p);\n\t\t\t\t}\n\t\t\t\ti = props.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = props[i];\n\t\t\t\t\tobj[p] = cur = [];\n\t\t\t\t\tcnt = 0;\n\t\t\t\t\tl = values.length;\n\t\t\t\t\tfor (j = 0; j < l; j++) {\n\t\t\t\t\t\ta = (prepend == null) ? values[j][p] : (typeof( (tmp = values[j][p]) ) === \"string\" && tmp.charAt(1) === \"=\") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);\n\t\t\t\t\t\tif (soft) if (j > 1) if (j < l - 1) {\n\t\t\t\t\t\t\tcur[cnt++] = (a + cur[cnt-2]) / 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcur[cnt++] = a;\n\t\t\t\t\t}\n\t\t\t\t\tl = cnt - inc + 1;\n\t\t\t\t\tcnt = 0;\n\t\t\t\t\tfor (j = 0; j < l; j += inc) {\n\t\t\t\t\t\ta = cur[j];\n\t\t\t\t\t\tb = cur[j+1];\n\t\t\t\t\t\tc = cur[j+2];\n\t\t\t\t\t\td = (inc === 2) ? 0 : cur[j+3];\n\t\t\t\t\t\tcur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);\n\t\t\t\t\t}\n\t\t\t\t\tcur.length = cnt;\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t},\n\t\t\t_addCubicLengths = function(a, steps, resolution) {\n\t\t\t\tvar inc = 1 / resolution,\n\t\t\t\t\tj = a.length,\n\t\t\t\t\td, d1, s, da, ca, ba, p, i, inv, bez, index;\n\t\t\t\twhile (--j > -1) {\n\t\t\t\t\tbez = a[j];\n\t\t\t\t\ts = bez.a;\n\t\t\t\t\tda = bez.d - s;\n\t\t\t\t\tca = bez.c - s;\n\t\t\t\t\tba = bez.b - s;\n\t\t\t\t\td = d1 = 0;\n\t\t\t\t\tfor (i = 1; i <= resolution; i++) {\n\t\t\t\t\t\tp = inc * i;\n\t\t\t\t\t\tinv = 1 - p;\n\t\t\t\t\t\td = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);\n\t\t\t\t\t\tindex = j * resolution + i - 1;\n\t\t\t\t\t\tsteps[index] = (steps[index] || 0) + d * d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t_parseLengthData = function(obj, resolution) {\n\t\t\t\tresolution = resolution >> 0 || 6;\n\t\t\t\tvar a = [],\n\t\t\t\t\tlengths = [],\n\t\t\t\t\td = 0,\n\t\t\t\t\ttotal = 0,\n\t\t\t\t\tthreshold = resolution - 1,\n\t\t\t\t\tsegments = [],\n\t\t\t\t\tcurLS = [], //current length segments array\n\t\t\t\t\tp, i, l, index;\n\t\t\t\tfor (p in obj) {\n\t\t\t\t\t_addCubicLengths(obj[p], a, resolution);\n\t\t\t\t}\n\t\t\t\tl = a.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\td += Math.sqrt(a[i]);\n\t\t\t\t\tindex = i % resolution;\n\t\t\t\t\tcurLS[index] = d;\n\t\t\t\t\tif (index === threshold) {\n\t\t\t\t\t\ttotal += d;\n\t\t\t\t\t\tindex = (i / resolution) >> 0;\n\t\t\t\t\t\tsegments[index] = curLS;\n\t\t\t\t\t\tlengths[index] = total;\n\t\t\t\t\t\td = 0;\n\t\t\t\t\t\tcurLS = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {length:total, lengths:lengths, segments:segments};\n\t\t\t},\n\n\n\n\t\t\tBezierPlugin = _gsScope._gsDefine.plugin({\n\t\t\t\t\tpropName: \"bezier\",\n\t\t\t\t\tpriority: -1,\n\t\t\t\t\tversion: \"1.3.9\",\n\t\t\t\t\tAPI: 2,\n\t\t\t\t\tglobal:true,\n\n\t\t\t\t\t//gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\t\t\tinit: function(target, vars, tween) {\n\t\t\t\t\t\tthis._target = target;\n\t\t\t\t\t\tif (vars instanceof Array) {\n\t\t\t\t\t\t\tvars = {values:vars};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._func = {};\n\t\t\t\t\t\tthis._mod = {};\n\t\t\t\t\t\tthis._props = [];\n\t\t\t\t\t\tthis._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);\n\t\t\t\t\t\tvar values = vars.values || [],\n\t\t\t\t\t\t\tfirst = {},\n\t\t\t\t\t\t\tsecond = values[0],\n\t\t\t\t\t\t\tautoRotate = vars.autoRotate || tween.vars.orientToBezier,\n\t\t\t\t\t\t\tp, isFunc, i, j, prepend;\n\n\t\t\t\t\t\tthis._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [[\"x\",\"y\",\"rotation\",((autoRotate === true) ? 0 : Number(autoRotate) || 0)]] : null;\n\t\t\t\t\t\tfor (p in second) {\n\t\t\t\t\t\t\tthis._props.push(p);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti = this._props.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tp = this._props[i];\n\n\t\t\t\t\t\t\tthis._overwriteProps.push(p);\n\t\t\t\t\t\t\tisFunc = this._func[p] = (typeof(target[p]) === \"function\");\n\t\t\t\t\t\t\tfirst[p] = (!isFunc) ? parseFloat(target[p]) : target[ ((p.indexOf(\"set\") || typeof(target[\"get\" + p.substr(3)]) !== \"function\") ? p : \"get\" + p.substr(3)) ]();\n\t\t\t\t\t\t\tif (!prepend) if (first[p] !== values[0][p]) {\n\t\t\t\t\t\t\t\tprepend = first;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._beziers = (vars.type !== \"cubic\" && vars.type !== \"quadratic\" && vars.type !== \"soft\") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === \"thruBasic\"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);\n\t\t\t\t\t\tthis._segCount = this._beziers[p].length;\n\n\t\t\t\t\t\tif (this._timeRes) {\n\t\t\t\t\t\t\tvar ld = _parseLengthData(this._beziers, this._timeRes);\n\t\t\t\t\t\t\tthis._length = ld.length;\n\t\t\t\t\t\t\tthis._lengths = ld.lengths;\n\t\t\t\t\t\t\tthis._segments = ld.segments;\n\t\t\t\t\t\t\tthis._l1 = this._li = this._s1 = this._si = 0;\n\t\t\t\t\t\t\tthis._l2 = this._lengths[0];\n\t\t\t\t\t\t\tthis._curSeg = this._segments[0];\n\t\t\t\t\t\t\tthis._s2 = this._curSeg[0];\n\t\t\t\t\t\t\tthis._prec = 1 / this._curSeg.length;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((autoRotate = this._autoRotate)) {\n\t\t\t\t\t\t\tthis._initialRotations = [];\n\t\t\t\t\t\t\tif (!(autoRotate[0] instanceof Array)) {\n\t\t\t\t\t\t\t\tthis._autoRotate = autoRotate = [autoRotate];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti = autoRotate.length;\n\t\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\t\t\t\t\t\tp = autoRotate[i][j];\n\t\t\t\t\t\t\t\t\tthis._func[p] = (typeof(target[p]) === \"function\") ? target[ ((p.indexOf(\"set\") || typeof(target[\"get\" + p.substr(3)]) !== \"function\") ? p : \"get\" + p.substr(3)) ] : false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tp = autoRotate[i][2];\n\t\t\t\t\t\t\t\tthis._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;\n\t\t\t\t\t\t\t\tthis._overwriteProps.push(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\n\t\t\t\t\t//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\n\t\t\t\t\tset: function(v) {\n\t\t\t\t\t\tvar segments = this._segCount,\n\t\t\t\t\t\t\tfunc = this._func,\n\t\t\t\t\t\t\ttarget = this._target,\n\t\t\t\t\t\t\tnotStart = (v !== this._startRatio),\n\t\t\t\t\t\t\tcurIndex, inv, i, p, b, t, val, l, lengths, curSeg, v1;\n\t\t\t\t\t\tif (!this._timeRes) {\n\t\t\t\t\t\t\tcurIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;\n\t\t\t\t\t\t\tt = (v - (curIndex * (1 / segments))) * segments;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlengths = this._lengths;\n\t\t\t\t\t\t\tcurSeg = this._curSeg;\n\t\t\t\t\t\t\tv1 = v * this._length;\n\t\t\t\t\t\t\ti = this._li;\n\t\t\t\t\t\t\t//find the appropriate segment (if the currently cached one isn't correct)\n\t\t\t\t\t\t\tif (v1 > this._l2 && i < segments - 1) {\n\t\t\t\t\t\t\t\tl = segments - 1;\n\t\t\t\t\t\t\t\twhile (i < l && (this._l2 = lengths[++i]) <= v1) {\t}\n\t\t\t\t\t\t\t\tthis._l1 = lengths[i-1];\n\t\t\t\t\t\t\t\tthis._li = i;\n\t\t\t\t\t\t\t\tthis._curSeg = curSeg = this._segments[i];\n\t\t\t\t\t\t\t\tthis._s2 = curSeg[(this._s1 = this._si = 0)];\n\t\t\t\t\t\t\t} else if (v1 < this._l1 && i > 0) {\n\t\t\t\t\t\t\t\twhile (i > 0 && (this._l1 = lengths[--i]) >= v1) { }\n\t\t\t\t\t\t\t\tif (i === 0 && v1 < this._l1) {\n\t\t\t\t\t\t\t\t\tthis._l1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis._l2 = lengths[i];\n\t\t\t\t\t\t\t\tthis._li = i;\n\t\t\t\t\t\t\t\tthis._curSeg = curSeg = this._segments[i];\n\t\t\t\t\t\t\t\tthis._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;\n\t\t\t\t\t\t\t\tthis._s2 = curSeg[this._si];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurIndex = i;\n\t\t\t\t\t\t\t//now find the appropriate sub-segment (we split it into the number of pieces that was defined by \"precision\" and measured each one)\n\t\t\t\t\t\t\tv1 -= this._l1;\n\t\t\t\t\t\t\ti = this._si;\n\t\t\t\t\t\t\tif (v1 > this._s2 && i < curSeg.length - 1) {\n\t\t\t\t\t\t\t\tl = curSeg.length - 1;\n\t\t\t\t\t\t\t\twhile (i < l && (this._s2 = curSeg[++i]) <= v1) {\t}\n\t\t\t\t\t\t\t\tthis._s1 = curSeg[i-1];\n\t\t\t\t\t\t\t\tthis._si = i;\n\t\t\t\t\t\t\t} else if (v1 < this._s1 && i > 0) {\n\t\t\t\t\t\t\t\twhile (i > 0 && (this._s1 = curSeg[--i]) >= v1) {\t}\n\t\t\t\t\t\t\t\tif (i === 0 && v1 < this._s1) {\n\t\t\t\t\t\t\t\t\tthis._s1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis._s2 = curSeg[i];\n\t\t\t\t\t\t\t\tthis._si = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tt = (v === 1) ? 1 : ((i + (v1 - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinv = 1 - t;\n\n\t\t\t\t\t\ti = this._props.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tp = this._props[i];\n\t\t\t\t\t\t\tb = this._beziers[p][curIndex];\n\t\t\t\t\t\t\tval = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;\n\t\t\t\t\t\t\tif (this._mod[p]) {\n\t\t\t\t\t\t\t\tval = this._mod[p](val, target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (func[p]) {\n\t\t\t\t\t\t\t\ttarget[p](val);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget[p] = val;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this._autoRotate) {\n\t\t\t\t\t\t\tvar ar = this._autoRotate,\n\t\t\t\t\t\t\t\tb2, x1, y1, x2, y2, add, conv;\n\t\t\t\t\t\t\ti = ar.length;\n\t\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t\tp = ar[i][2];\n\t\t\t\t\t\t\t\tadd = ar[i][3] || 0;\n\t\t\t\t\t\t\t\tconv = (ar[i][4] === true) ? 1 : _RAD2DEG;\n\t\t\t\t\t\t\t\tb = this._beziers[ar[i][0]];\n\t\t\t\t\t\t\t\tb2 = this._beziers[ar[i][1]];\n\n\t\t\t\t\t\t\t\tif (b && b2) { //in case one of the properties got overwritten.\n\t\t\t\t\t\t\t\t\tb = b[curIndex];\n\t\t\t\t\t\t\t\t\tb2 = b2[curIndex];\n\n\t\t\t\t\t\t\t\t\tx1 = b.a + (b.b - b.a) * t;\n\t\t\t\t\t\t\t\t\tx2 = b.b + (b.c - b.b) * t;\n\t\t\t\t\t\t\t\t\tx1 += (x2 - x1) * t;\n\t\t\t\t\t\t\t\t\tx2 += ((b.c + (b.d - b.c) * t) - x2) * t;\n\n\t\t\t\t\t\t\t\t\ty1 = b2.a + (b2.b - b2.a) * t;\n\t\t\t\t\t\t\t\t\ty2 = b2.b + (b2.c - b2.b) * t;\n\t\t\t\t\t\t\t\t\ty1 += (y2 - y1) * t;\n\t\t\t\t\t\t\t\t\ty2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;\n\n\t\t\t\t\t\t\t\t\tval = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];\n\n\t\t\t\t\t\t\t\t\tif (this._mod[p]) {\n\t\t\t\t\t\t\t\t\t\tval = this._mod[p](val, target); //for modProps\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (func[p]) {\n\t\t\t\t\t\t\t\t\t\ttarget[p](val);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ttarget[p] = val;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}),\n\t\t\tp = BezierPlugin.prototype;\n\n\n\t\tBezierPlugin.bezierThrough = bezierThrough;\n\t\tBezierPlugin.cubicToQuadratic = cubicToQuadratic;\n\t\tBezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the \"css\" object using the autoCSS feature of TweenLite\n\t\tBezierPlugin.quadraticToCubic = function(a, b, c) {\n\t\t\treturn new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);\n\t\t};\n\n\t\tBezierPlugin._cssRegister = function() {\n\t\t\tvar CSSPlugin = _globals.CSSPlugin;\n\t\t\tif (!CSSPlugin) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar _internals = CSSPlugin._internals,\n\t\t\t\t_parseToProxy = _internals._parseToProxy,\n\t\t\t\t_setPluginRatio = _internals._setPluginRatio,\n\t\t\t\tCSSPropTween = _internals.CSSPropTween;\n\t\t\t_internals._registerComplexSpecialProp(\"bezier\", {parser:function(t, e, prop, cssp, pt, plugin) {\n\t\t\t\tif (e instanceof Array) {\n\t\t\t\t\te = {values:e};\n\t\t\t\t}\n\t\t\t\tplugin = new BezierPlugin();\n\t\t\t\tvar values = e.values,\n\t\t\t\t\tl = values.length - 1,\n\t\t\t\t\tpluginValues = [],\n\t\t\t\t\tv = {},\n\t\t\t\t\ti, p, data;\n\t\t\t\tif (l < 0) {\n\t\t\t\t\treturn pt;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i <= l; i++) {\n\t\t\t\t\tdata = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));\n\t\t\t\t\tpluginValues[i] = data.end;\n\t\t\t\t}\n\t\t\t\tfor (p in e) {\n\t\t\t\t\tv[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.\n\t\t\t\t}\n\t\t\t\tv.values = pluginValues;\n\t\t\t\tpt = new CSSPropTween(t, \"bezier\", 0, 0, data.pt, 2);\n\t\t\t\tpt.data = data;\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = _setPluginRatio;\n\t\t\t\tif (v.autoRotate === 0) {\n\t\t\t\t\tv.autoRotate = true;\n\t\t\t\t}\n\t\t\t\tif (v.autoRotate && !(v.autoRotate instanceof Array)) {\n\t\t\t\t\ti = (v.autoRotate === true) ? 0 : Number(v.autoRotate);\n\t\t\t\t\tv.autoRotate = (data.end.left != null) ? [[\"left\",\"top\",\"rotation\",i,false]] : (data.end.x != null) ? [[\"x\",\"y\",\"rotation\",i,false]] : false;\n\t\t\t\t}\n\t\t\t\tif (v.autoRotate) {\n\t\t\t\t\tif (!cssp._transform) {\n\t\t\t\t\t\tcssp._enableTransforms(false);\n\t\t\t\t\t}\n\t\t\t\t\tdata.autoRotate = cssp._target._gsTransform;\n\t\t\t\t\tdata.proxy.rotation = data.autoRotate.rotation || 0;\n\t\t\t\t\tcssp._overwriteProps.push(\"rotation\");\n\t\t\t\t}\n\t\t\t\tplugin._onInitTween(data.proxy, v, cssp._tween);\n\t\t\t\treturn pt;\n\t\t\t}});\n\t\t};\n\n\t\tp._mod = function(lookup) {\n\t\t\tvar op = this._overwriteProps,\n\t\t\t\ti = op.length,\n\t\t\t\tval;\n\t\t\twhile (--i > -1) {\n\t\t\t\tval = lookup[op[i]];\n\t\t\t\tif (val && typeof(val) === \"function\") {\n\t\t\t\t\tthis._mod[op[i]] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function(lookup) {\n\t\t\tvar a = this._props,\n\t\t\t\tp, i;\n\t\t\tfor (p in this._beziers) {\n\t\t\t\tif (p in lookup) {\n\t\t\t\t\tdelete this._beziers[p];\n\t\t\t\t\tdelete this._func[p];\n\t\t\t\t\ti = a.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (a[i] === p) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ta = this._autoRotate;\n\t\t\tif (a) {\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (lookup[a[i][2]]) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._super._kill.call(this, lookup);\n\t\t};\n\nexport { BezierPlugin, BezierPlugin as default };","/*!\n * VERSION: 2.1.3\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport TweenLite, { _gsScope, globals, TweenPlugin } from \"./TweenLite.js\";\n\n\t_gsScope._gsDefine(\"plugins.CSSPlugin\", [\"plugins.TweenPlugin\",\"TweenLite\"], function() {\n\n\t\t/** @constructor **/\n\t\tvar CSSPlugin = function() {\n\t\t\t\tTweenPlugin.call(this, \"css\");\n\t\t\t\tthis._overwriteProps.length = 0;\n\t\t\t\tthis.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\t\t\t},\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.\n\t\t\t_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance\n\t\t\t_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter\n\t\t\t_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.\n\t\t\t_specialProps = {},\n\t\t\tp = CSSPlugin.prototype = new TweenPlugin(\"css\");\n\n\t\tp.constructor = CSSPlugin;\n\t\tCSSPlugin.version = \"2.1.3\";\n\t\tCSSPlugin.API = 2;\n\t\tCSSPlugin.defaultTransformPerspective = 0;\n\t\tCSSPlugin.defaultSkewType = \"compensated\";\n\t\tCSSPlugin.defaultSmoothOrigin = true;\n\t\tp = \"px\"; //we'll reuse the \"p\" variable to keep file size down\n\t\tCSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:\"\"};\n\n\n\t\tvar _numExp = /(?:\\-|\\.|\\b)(\\d|\\.|e\\-)+/g,\n\t\t\t_relNumExp = /(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,\n\t\t\t_valuesExp = /(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n\t\t\t_valuesExpWithCommas = /(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b),?/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n\t\t\t_NaNExp = /(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=\n\t\t\t_suffixExp = /(?:\\d|\\-|\\+|=|#|\\.)*/g,\n\t\t\t_opacityExp = /opacity *= *([^)]*)/i,\n\t\t\t_opacityValExp = /opacity:([^;]*)/i,\n\t\t\t_alphaFilterExp = /alpha\\(opacity *=.+?\\)/i,\n\t\t\t_rgbhslExp = /^(rgb|hsl)/,\n\t\t\t_capsExp = /([A-Z])/g,\n\t\t\t_camelExp = /-([a-z])/gi,\n\t\t\t_urlExp = /(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi, //for pulling out urls from url(...) or url(\"...\") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)\n\t\t\t_camelFunc = function(s, g) { return g.toUpperCase(); },\n\t\t\t_horizExp = /(?:Left|Right|Width)/i,\n\t\t\t_ieGetMatrixExp = /(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,\n\t\t\t_ieSetMatrixExp = /progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,\n\t\t\t_commasOutsideParenExp = /,(?=[^\\)]*(?:\\(|$))/gi, //finds any commas that are not within parenthesis\n\t\t\t_complexExp = /[\\s,\\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)\n\t\t\t_DEG2RAD = Math.PI / 180,\n\t\t\t_RAD2DEG = 180 / Math.PI,\n\t\t\t_forcePT = {},\n\t\t\t_dummyElement = {style:{}},\n\t\t\t_doc = _gsScope.document || {createElement: function() {return _dummyElement;}},\n\t\t\t_createElement = function(type, ns) {\n\t\t\t\tvar e = _doc.createElementNS ? _doc.createElementNS(ns || \"http://www.w3.org/1999/xhtml\", type) : _doc.createElement(type);\n\t\t\t\treturn e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n\t\t\t},\n\t\t\t_tempDiv = _createElement(\"div\"),\n\t\t\t_tempImg = _createElement(\"img\"),\n\t\t\t_internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins\n\t\t\t_agent = (_gsScope.navigator || {}).userAgent || \"\",\n\t\t\t_autoRound,\n\t\t\t_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).\n\n\t\t\t_isSafari,\n\t\t\t_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.\n\t\t\t_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to \"top\" and \"left\" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)\n\t\t\t_ieVers,\n\t\t\t_supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.\n\t\t\t\tvar i = _agent.indexOf(\"Android\"),\n\t\t\t\t\ta = _createElement(\"a\");\n\t\t\t\t_isSafari = (_agent.indexOf(\"Safari\") !== -1 && _agent.indexOf(\"Chrome\") === -1 && (i === -1 || parseFloat(_agent.substr(i+8, 2)) > 3));\n\t\t\t\t_isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf(\"Version/\")+8, 2)) < 6));\n\t\t\t\t_isFirefox = (_agent.indexOf(\"Firefox\") !== -1);\n\t\t\t\tif ((/MSIE ([0-9]{1,}[\\.0-9]{0,})/).exec(_agent) || (/Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/).exec(_agent)) {\n\t\t\t\t\t_ieVers = parseFloat( RegExp.$1 );\n\t\t\t\t}\n\t\t\t\tif (!a) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ta.style.cssText = \"top:1px;opacity:.55;\";\n\t\t\t\treturn /^0.55/.test(a.style.opacity);\n\t\t\t}()),\n\t\t\t_getIEOpacity = function(v) {\n\t\t\t\treturn (_opacityExp.test( ((typeof(v) === \"string\") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || \"\") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);\n\t\t\t},\n\t\t\t_log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.\n\t\t\t\tif (_gsScope.console) {\n\t\t\t\t\tconsole.log(s);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\t\t\t_index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\n\t\t\t_prefixCSS = \"\", //the non-camelCase vendor prefix like \"-o-\", \"-moz-\", \"-ms-\", or \"-webkit-\"\n\t\t\t_prefix = \"\", //camelCase vendor prefix like \"O\", \"ms\", \"Webkit\", or \"Moz\".\n\n\t\t\t// @private feed in a camelCase property name like \"transform\" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. \"WebkitTransform\" or \"MozTransform\" or \"transform\" or null if no such property is found, like if the browser is IE8 or before, \"transform\" won't be found at all)\n\t\t\t_checkPropPrefix = function(p, e) {\n\t\t\t\te = e || _tempDiv;\n\t\t\t\tvar s = e.style,\n\t\t\t\t\ta, i;\n\t\t\t\tif (s[p] !== undefined) {\n\t\t\t\t\treturn p;\n\t\t\t\t}\n\t\t\t\tp = p.charAt(0).toUpperCase() + p.substr(1);\n\t\t\t\ta = [\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"];\n\t\t\t\ti = 5;\n\t\t\t\twhile (--i > -1 && s[a[i]+p] === undefined) { }\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\t_prefix = (i === 3) ? \"ms\" : a[i];\n\t\t\t\t\t_prefixCSS = \"-\" + _prefix.toLowerCase() + \"-\";\n\t\t\t\t\treturn _prefix + p;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\n\t\t\t_computedStyleScope = (typeof(window) !== \"undefined\" ? window : _doc.defaultView || {getComputedStyle:function() {}}),\n\t\t\t_getComputedStyle = function(e) {\n\t\t\t\treturn _computedStyleScope.getComputedStyle(e); //to avoid errors in Microsoft Edge, we need to call getComputedStyle() from a specific scope, typically window.\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Returns the css style for a particular property of an element. For example, to get whatever the current \"left\" css value for an element with an ID of \"myElement\", you could do:\n\t\t\t * var currentLeft = CSSPlugin.getStyle( document.getElementById(\"myElement\"), \"left\");\n\t\t\t *\n\t\t\t * @param {!Object} t Target element whose style property you want to query\n\t\t\t * @param {!string} p Property name (like \"left\" or \"top\" or \"marginTop\", etc.)\n\t\t\t * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.\n\t\t\t * @param {boolean=} calc If true, the value will not be read directly from the element's \"style\" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.\n\t\t\t * @param {string=} dflt Default value that should be returned in the place of null, \"none\", \"auto\" or \"auto auto\".\n\t\t\t * @return {?string} The current property value\n\t\t\t */\n\t\t\t_getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {\n\t\t\t\tvar rv;\n\t\t\t\tif (!_supportsOpacity) if (p === \"opacity\") { //several versions of IE don't use the standard \"opacity\" property - they use things like filter:alpha(opacity=50), so we parse that here.\n\t\t\t\t\treturn _getIEOpacity(t);\n\t\t\t\t}\n\t\t\t\tif (!calc && t.style[p]) {\n\t\t\t\t\trv = t.style[p];\n\t\t\t\t} else if ((cs = cs || _getComputedStyle(t))) {\n\t\t\t\t\trv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t} else if (t.currentStyle) {\n\t\t\t\t\trv = t.currentStyle[p];\n\t\t\t\t}\n\t\t\t\treturn (dflt != null && (!rv || rv === \"none\" || rv === \"auto\" || rv === \"auto auto\")) ? dflt : rv;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Pass the target element, the property name, the numeric value, and the suffix (like \"%\", \"em\", \"px\", etc.) and it will spit back the equivalent pixel number.\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (like \"left\", \"top\", \"marginLeft\", etc.)\n\t\t\t * @param {!number} v Value\n\t\t\t * @param {string=} sfx Suffix (like \"px\" or \"%\" or \"em\")\n\t\t\t * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.\n\t\t\t * @return {number} value in pixels\n\t\t\t */\n\t\t\t_convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {\n\t\t\t\tif (sfx === \"px\" || (!sfx && p !== \"lineHeight\")) { return v; }\n\t\t\t\tif (sfx === \"auto\" || !v) { return 0; }\n\t\t\t\tvar horiz = _horizExp.test(p),\n\t\t\t\t\tnode = t,\n\t\t\t\t\tstyle = _tempDiv.style,\n\t\t\t\t\tneg = (v < 0),\n\t\t\t\t\tprecise = (v === 1),\n\t\t\t\t\tpix, cache, time;\n\t\t\t\tif (neg) {\n\t\t\t\t\tv = -v;\n\t\t\t\t}\n\t\t\t\tif (precise) {\n\t\t\t\t\tv *= 100;\n\t\t\t\t}\n\t\t\t\tif (p === \"lineHeight\" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.\n\t\t\t\t\tcache = _getComputedStyle(t).lineHeight;\n\t\t\t\t\tt.style.lineHeight = v;\n\t\t\t\t\tpix = parseFloat(_getComputedStyle(t).lineHeight);\n\t\t\t\t\tt.style.lineHeight = cache;\n\t\t\t\t} else if (sfx === \"%\" && p.indexOf(\"border\") !== -1) {\n\t\t\t\t\tpix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.cssText = \"border:0 solid red;position:\" + _getStyle(t, \"position\") + \";line-height:0;\";\n\t\t\t\t\tif (sfx === \"%\" || !node.appendChild || sfx.charAt(0) === \"v\" || sfx === \"rem\") {\n\t\t\t\t\t\tnode = t.parentNode || _doc.body;\n\t\t\t\t\t\tif (_getStyle(node, \"display\").indexOf(\"flex\") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.\n\t\t\t\t\t\t\tstyle.position = \"absolute\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache = node._gsCache;\n\t\t\t\t\t\ttime = TweenLite.ticker.frame;\n\t\t\t\t\t\tif (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)\n\t\t\t\t\t\t\treturn cache.width * v / 100;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle[(horiz ? \"width\" : \"height\")] = v + sfx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[(horiz ? \"borderLeftWidth\" : \"borderTopWidth\")] = v + sfx;\n\t\t\t\t\t}\n\t\t\t\t\tnode.appendChild(_tempDiv);\n\t\t\t\t\tpix = parseFloat(_tempDiv[(horiz ? \"offsetWidth\" : \"offsetHeight\")]);\n\t\t\t\t\tnode.removeChild(_tempDiv);\n\t\t\t\t\tif (horiz && sfx === \"%\" && CSSPlugin.cacheWidths !== false) {\n\t\t\t\t\t\tcache = node._gsCache = node._gsCache || {};\n\t\t\t\t\t\tcache.time = time;\n\t\t\t\t\t\tcache.width = pix / v * 100;\n\t\t\t\t\t}\n\t\t\t\t\tif (pix === 0 && !recurse) {\n\t\t\t\t\t\tpix = _convertToPixels(t, p, v, sfx, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (precise) {\n\t\t\t\t\tpix /= 100;\n\t\t\t\t}\n\t\t\t\treturn neg ? -pix : pix;\n\t\t\t},\n\t\t\t_calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\n\t\t\t\tif (_getStyle(t, \"position\", cs) !== \"absolute\") { return 0; }\n\t\t\t\tvar dim = ((p === \"left\") ? \"Left\" : \"Top\"),\n\t\t\t\t\tv = _getStyle(t, \"margin\" + dim, cs);\n\t\t\t\treturn t[\"offset\" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, \"\")) || 0);\n\t\t\t},\n\n\t\t\t// @private returns at object containing ALL of the style properties in camelCase and their associated values.\n\t\t\t_getAllStyles = function(t, cs) {\n\t\t\t\tvar s = {},\n\t\t\t\t\ti, tr, p;\n\t\t\t\tif ((cs = cs || _getComputedStyle(t, null))) {\n\t\t\t\t\tif ((i = cs.length)) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tp = cs[i];\n\t\t\t\t\t\t\tif (p.indexOf(\"-transform\") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\t\ts[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.\n\t\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\t\tif (i.indexOf(\"Transform\") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\t\ts[i] = cs[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ((cs = t.currentStyle || t.style)) {\n\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\tif (typeof(i) === \"string\" && s[i] === undefined) {\n\t\t\t\t\t\t\ts[i.replace(_camelExp, _camelFunc)] = cs[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!_supportsOpacity) {\n\t\t\t\t\ts.opacity = _getIEOpacity(t);\n\t\t\t\t}\n\t\t\t\ttr = _getTransform(t, cs, false);\n\t\t\t\ts.rotation = tr.rotation;\n\t\t\t\ts.skewX = tr.skewX;\n\t\t\t\ts.scaleX = tr.scaleX;\n\t\t\t\ts.scaleY = tr.scaleY;\n\t\t\t\ts.x = tr.x;\n\t\t\t\ts.y = tr.y;\n\t\t\t\tif (_supports3D) {\n\t\t\t\t\ts.z = tr.z;\n\t\t\t\t\ts.rotationX = tr.rotationX;\n\t\t\t\t\ts.rotationY = tr.rotationY;\n\t\t\t\t\ts.scaleZ = tr.scaleZ;\n\t\t\t\t}\n\t\t\t\tif (s.filters) {\n\t\t\t\t\tdelete s.filters;\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t},\n\n\t\t\t// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a \"difs\" property which refers to an object containing only those isolated properties and values for tweening, and a \"firstMPT\" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.\n\t\t\t_cssDif = function(t, s1, s2, vars, forceLookup) {\n\t\t\t\tvar difs = {},\n\t\t\t\t\tstyle = t.style,\n\t\t\t\t\tval, p, mpt;\n\t\t\t\tfor (p in s2) {\n\t\t\t\t\tif (p !== \"cssText\") if (p !== \"length\") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf(\"Origin\") === -1) if (typeof(val) === \"number\" || typeof(val) === \"string\") {\n\t\t\t\t\t\tdifs[p] = (val === \"auto\" && (p === \"left\" || p === \"top\")) ? _calculateOffset(t, p) : ((val === \"\" || val === \"auto\" || val === \"none\") && typeof(s1[p]) === \"string\" && s1[p].replace(_NaNExp, \"\") !== \"\") ? 0 : val; //if the ending value is defaulting (\"\" or \"auto\"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for \"\" or \"auto\" so that things actually tween.\n\t\t\t\t\t\tif (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.\n\t\t\t\t\t\t\tmpt = new MiniPropTween(style, p, style[p], mpt);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (vars) {\n\t\t\t\t\tfor (p in vars) { //copy properties (except className)\n\t\t\t\t\t\tif (p !== \"className\") {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {difs:difs, firstMPT:mpt};\n\t\t\t},\n\t\t\t_dimensions = {width:[\"Left\",\"Right\"], height:[\"Top\",\"Bottom\"]},\n\t\t\t_margins = [\"marginLeft\",\"marginRight\",\"marginTop\",\"marginBottom\"],\n\n\t\t\t/**\n\t\t\t * @private Gets the width or height of an element\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (\"width\" or \"height\")\n\t\t\t * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.\n\t\t\t * @return {number} Dimension (in pixels)\n\t\t\t */\n\t\t\t_getDimension = function(t, p, cs) {\n\t\t\t\tif ((t.nodeName + \"\").toLowerCase() === \"svg\") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.\n\t\t\t\t\treturn (cs || _getComputedStyle(t))[p] || 0;\n\t\t\t\t} else if (t.getCTM && _isSVG(t)) {\n\t\t\t\t\treturn t.getBBox()[p] || 0;\n\t\t\t\t}\n\t\t\t\tvar v = parseFloat((p === \"width\") ? t.offsetWidth : t.offsetHeight),\n\t\t\t\t\ta = _dimensions[p],\n\t\t\t\t\ti = a.length;\n\t\t\t\tcs = cs || _getComputedStyle(t, null);\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tv -= parseFloat( _getStyle(t, \"padding\" + a[i], cs, true) ) || 0;\n\t\t\t\t\tv -= parseFloat( _getStyle(t, \"border\" + a[i] + \"Width\", cs, true) ) || 0;\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t},\n\n\t\t\t// @private Parses position-related complex strings like \"top left\" or \"50px 10px\" or \"70% 20%\", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: \"ox\" (offsetX), \"oy\" (offsetY), \"oxp\" (if true, \"ox\" is a percentage not a pixel value), and \"oxy\" (if true, \"oy\" is a percentage not a pixel value)\n\t\t\t_parsePosition = function(v, recObj) {\n\t\t\t\tif (v === \"contain\" || v === \"auto\" || v === \"auto auto\") { //note: Firefox uses \"auto auto\" as default whereas Chrome uses \"auto\".\n\t\t\t\t\treturn v + \" \";\n\t\t\t\t}\n\t\t\t\tif (v == null || v === \"\") {\n\t\t\t\t\tv = \"0 0\";\n\t\t\t\t}\n\t\t\t\tvar a = v.split(\" \"),\n\t\t\t\t\tx = (v.indexOf(\"left\") !== -1) ? \"0%\" : (v.indexOf(\"right\") !== -1) ? \"100%\" : a[0],\n\t\t\t\t\ty = (v.indexOf(\"top\") !== -1) ? \"0%\" : (v.indexOf(\"bottom\") !== -1) ? \"100%\" : a[1],\n\t\t\t\t\ti;\n\t\t\t\tif (a.length > 3 && !recObj) { //multiple positions\n\t\t\t\t\ta = v.split(\", \").join(\",\").split(\",\");\n\t\t\t\t\tv = [];\n\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\tv.push(_parsePosition(a[i]));\n\t\t\t\t\t}\n\t\t\t\t\treturn v.join(\",\");\n\t\t\t\t}\n\t\t\t\tif (y == null) {\n\t\t\t\t\ty = (x === \"center\") ? \"50%\" : \"0\";\n\t\t\t\t} else if (y === \"center\") {\n\t\t\t\t\ty = \"50%\";\n\t\t\t\t}\n\t\t\t\tif (x === \"center\" || (isNaN(parseFloat(x)) && (x + \"\").indexOf(\"=\") === -1)) { //remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\n\t\t\t\t\tx = \"50%\";\n\t\t\t\t}\n\t\t\t\tv = x + \" \" + y + ((a.length > 2) ? \" \" + a[2] : \"\");\n\t\t\t\tif (recObj) {\n\t\t\t\t\trecObj.oxp = (x.indexOf(\"%\") !== -1);\n\t\t\t\t\trecObj.oyp = (y.indexOf(\"%\") !== -1);\n\t\t\t\t\trecObj.oxr = (x.charAt(1) === \"=\");\n\t\t\t\t\trecObj.oyr = (y.charAt(1) === \"=\");\n\t\t\t\t\trecObj.ox = parseFloat(x.replace(_NaNExp, \"\"));\n\t\t\t\t\trecObj.oy = parseFloat(y.replace(_NaNExp, \"\"));\n\t\t\t\t\trecObj.v = v;\n\t\t\t\t}\n\t\t\t\treturn recObj || v;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)\n\t\t\t * @param {(number|string)} e End value which is typically a string, but could be a number\n\t\t\t * @param {(number|string)} b Beginning value which is typically a string but could be a number\n\t\t\t * @return {number} Amount of change between the beginning and ending values (relative values that have a \"+=\" or \"-=\" are recognized)\n\t\t\t */\n\t\t\t_parseChange = function(e, b) {\n\t\t\t\tif (typeof(e) === \"function\") {\n\t\t\t\t\te = e(_index, _target);\n\t\t\t\t}\n\t\t\t\treturn (typeof(e) === \"string\" && e.charAt(1) === \"=\") ? parseInt(e.charAt(0) + \"1\", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @return {number} Parsed value\n\t\t\t */\n\t\t\t_parseVal = function(v, d) {\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\tv = v(_index, _target);\n\t\t\t\t}\n\t\t\t\tvar isRelative = (typeof(v) === \"string\" && v.charAt(1) === \"=\");\n\t\t\t\tif (typeof(v) === \"string\" && v.charAt(v.length - 2) === \"v\") { //convert vw and vh into px-equivalents.\n\t\t\t\t\tv = (isRelative ? v.substr(0, 2) : 0) + (window[\"inner\" + ((v.substr(-2) === \"vh\") ? \"Height\" : \"Width\")] * (parseFloat(isRelative ? v.substr(2) : v) / 100));\n\t\t\t\t}\n\t\t\t\treturn (v == null) ? d : isRelative ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Translates strings like \"40deg\" or \"40\" or 40rad\" or \"+=40deg\" or \"270_short\" or \"-90_cw\" or \"+=45_ccw\" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be \"rotation\", \"rotationX\", or \"rotationY\"\n\t\t\t * @param {Object=} directionalEnd An object that will store the raw end values for directional angles (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.\n\t\t\t * @return {number} parsed angle in radians\n\t\t\t */\n\t\t\t_parseAngle = function(v, d, p, directionalEnd) {\n\t\t\t\tvar min = 0.000001,\n\t\t\t\t\tcap, split, dif, result, isRelative;\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\tv = v(_index, _target);\n\t\t\t\t}\n\t\t\t\tif (v == null) {\n\t\t\t\t\tresult = d;\n\t\t\t\t} else if (typeof(v) === \"number\") {\n\t\t\t\t\tresult = v;\n\t\t\t\t} else {\n\t\t\t\t\tcap = 360;\n\t\t\t\t\tsplit = v.split(\"_\");\n\t\t\t\t\tisRelative = (v.charAt(1) === \"=\");\n\t\t\t\t\tdif = (isRelative ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf(\"rad\") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);\n\t\t\t\t\tif (split.length) {\n\t\t\t\t\t\tif (directionalEnd) {\n\t\t\t\t\t\t\tdirectionalEnd[p] = d + dif;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"short\") !== -1) {\n\t\t\t\t\t\t\tdif = dif % cap;\n\t\t\t\t\t\t\tif (dif !== dif % (cap / 2)) {\n\t\t\t\t\t\t\t\tdif = (dif < 0) ? dif + cap : dif - cap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"_cw\") !== -1 && dif < 0) {\n\t\t\t\t\t\t\tdif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t} else if (v.indexOf(\"ccw\") !== -1 && dif > 0) {\n\t\t\t\t\t\t\tdif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult = d + dif;\n\t\t\t\t}\n\t\t\t\tif (result < min && result > -min) {\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\t_colorLookup = {aqua:[0,255,255],\n\t\t\t\tlime:[0,255,0],\n\t\t\t\tsilver:[192,192,192],\n\t\t\t\tblack:[0,0,0],\n\t\t\t\tmaroon:[128,0,0],\n\t\t\t\tteal:[0,128,128],\n\t\t\t\tblue:[0,0,255],\n\t\t\t\tnavy:[0,0,128],\n\t\t\t\twhite:[255,255,255],\n\t\t\t\tfuchsia:[255,0,255],\n\t\t\t\tolive:[128,128,0],\n\t\t\t\tyellow:[255,255,0],\n\t\t\t\torange:[255,165,0],\n\t\t\t\tgray:[128,128,128],\n\t\t\t\tpurple:[128,0,128],\n\t\t\t\tgreen:[0,128,0],\n\t\t\t\tred:[255,0,0],\n\t\t\t\tpink:[255,192,203],\n\t\t\t\tcyan:[0,255,255],\n\t\t\t\ttransparent:[255,255,255,0]},\n\n\t\t\t_hue = function(h, m1, m2) {\n\t\t\t\th = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;\n\t\t\t\treturn ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).\n\t\t\t * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.\n\t\t\t * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()\n\t\t\t * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.\n\t\t\t */\n\t\t\t_parseColor = CSSPlugin.parseColor = function(v, toHSL) {\n\t\t\t\tvar a, r, g, b, h, s, l, max, min, d, wasHSL;\n\t\t\t\tif (!v) {\n\t\t\t\t\ta = _colorLookup.black;\n\t\t\t\t} else if (typeof(v) === \"number\") {\n\t\t\t\t\ta = [v >> 16, (v >> 8) & 255, v & 255];\n\t\t\t\t} else {\n\t\t\t\t\tif (v.charAt(v.length - 1) === \",\") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n\t\t\t\t\t\tv = v.substr(0, v.length - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (_colorLookup[v]) {\n\t\t\t\t\t\ta = _colorLookup[v];\n\t\t\t\t\t} else if (v.charAt(0) === \"#\") {\n\t\t\t\t\t\tif (v.length === 4) { //for shorthand like #9F0\n\t\t\t\t\t\t\tr = v.charAt(1);\n\t\t\t\t\t\t\tg = v.charAt(2);\n\t\t\t\t\t\t\tb = v.charAt(3);\n\t\t\t\t\t\t\tv = \"#\" + r + r + g + g + b + b;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv = parseInt(v.substr(1), 16);\n\t\t\t\t\t\ta = [v >> 16, (v >> 8) & 255, v & 255];\n\t\t\t\t\t} else if (v.substr(0, 3) === \"hsl\") {\n\t\t\t\t\t\ta = wasHSL = v.match(_numExp);\n\t\t\t\t\t\tif (!toHSL) {\n\t\t\t\t\t\t\th = (Number(a[0]) % 360) / 360;\n\t\t\t\t\t\t\ts = Number(a[1]) / 100;\n\t\t\t\t\t\t\tl = Number(a[2]) / 100;\n\t\t\t\t\t\t\tg = (l <= 0.5) ? l * (s + 1) : l + s - l * s;\n\t\t\t\t\t\t\tr = l * 2 - g;\n\t\t\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ta[0] = _hue(h + 1 / 3, r, g);\n\t\t\t\t\t\t\ta[1] = _hue(h, r, g);\n\t\t\t\t\t\t\ta[2] = _hue(h - 1 / 3, r, g);\n\t\t\t\t\t\t} else if (v.indexOf(\"=\") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.\n\t\t\t\t\t\t\treturn v.match(_relNumExp);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta = v.match(_numExp) || _colorLookup.transparent;\n\t\t\t\t\t}\n\t\t\t\t\ta[0] = Number(a[0]);\n\t\t\t\t\ta[1] = Number(a[1]);\n\t\t\t\t\ta[2] = Number(a[2]);\n\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (toHSL && !wasHSL) {\n\t\t\t\t\tr = a[0] / 255;\n\t\t\t\t\tg = a[1] / 255;\n\t\t\t\t\tb = a[2] / 255;\n\t\t\t\t\tmax = Math.max(r, g, b);\n\t\t\t\t\tmin = Math.min(r, g, b);\n\t\t\t\t\tl = (max + min) / 2;\n\t\t\t\t\tif (max === min) {\n\t\t\t\t\t\th = s = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\td = max - min;\n\t\t\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\t\t\t\th = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;\n\t\t\t\t\t\th *= 60;\n\t\t\t\t\t}\n\t\t\t\t\ta[0] = (h + 0.5) | 0;\n\t\t\t\t\ta[1] = (s * 100 + 0.5) | 0;\n\t\t\t\t\ta[2] = (l * 100 + 0.5) | 0;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t_formatColors = function(s, toHSL) {\n\t\t\t\tvar colors = s.match(_colorExp) || [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\tparsed = \"\",\n\t\t\t\t\ti, color, temp;\n\t\t\t\tif (!colors.length) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < colors.length; i++) {\n\t\t\t\t\tcolor = colors[i];\n\t\t\t\t\ttemp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);\n\t\t\t\t\tcharIndex += temp.length + color.length;\n\t\t\t\t\tcolor = _parseColor(color, toHSL);\n\t\t\t\t\tif (color.length === 3) {\n\t\t\t\t\t\tcolor.push(1);\n\t\t\t\t\t}\n\t\t\t\t\tparsed += temp + (toHSL ? \"hsla(\" + color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : \"rgba(\" + color.join(\",\")) + \")\";\n\t\t\t\t}\n\t\t\t\treturn parsed + s.substr(charIndex);\n\t\t\t},\n\t\t\t_colorExp = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3}){1,2}\\\\b\"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.\n\n\t\tfor (p in _colorLookup) {\n\t\t\t_colorExp += \"|\" + p + \"\\\\b\";\n\t\t}\n\t\t_colorExp = new RegExp(_colorExp+\")\", \"gi\");\n\n\t\tCSSPlugin.colorStringFilter = function(a) {\n\t\t\tvar combined = a[0] + \" \" + a[1],\n\t\t\t\ttoHSL;\n\t\t\tif (_colorExp.test(combined)) {\n\t\t\t\ttoHSL = (combined.indexOf(\"hsl(\") !== -1 || combined.indexOf(\"hsla(\") !== -1);\n\t\t\t\ta[0] = _formatColors(a[0], toHSL);\n\t\t\t\ta[1] = _formatColors(a[1], toHSL);\n\t\t\t}\n\t\t\t_colorExp.lastIndex = 0;\n\t\t};\n\n\t\tif (!TweenLite.defaultStringFilter) {\n\t\t\tTweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;\n\t\t}\n\n\t\t/**\n\t\t * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as \"0px red\" or \"0px 0px 10px rgb(255,0,0)\" or \"0px 0px 20px 20px #F00\" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter(\"0px 0px 0px 0px #777\", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.\n\t\t * @param {!string} dflt The default value and pattern to follow. So \"0px 0px 0px 0px #777\" will ensure that 4 numbers and a color will always get returned.\n\t\t * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.\n\t\t * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.\n\t\t * @return {Function} formatter function\n\t\t */\n\t\tvar _getFormatter = function(dflt, clr, collapsible, multi) {\n\t\t\t\tif (dflt == null) {\n\t\t\t\t\treturn function(v) {return v;};\n\t\t\t\t}\n\t\t\t\tvar dColor = clr ? (dflt.match(_colorExp) || [\"\"])[0] : \"\",\n\t\t\t\t\tdVals = dflt.split(dColor).join(\"\").match(_valuesExp) || [],\n\t\t\t\t\tpfx = dflt.substr(0, dflt.indexOf(dVals[0])),\n\t\t\t\t\tsfx = (dflt.charAt(dflt.length - 1) === \")\") ? \")\" : \"\",\n\t\t\t\t\tdelim = (dflt.indexOf(\" \") !== -1) ? \" \" : \",\",\n\t\t\t\t\tnumVals = dVals.length,\n\t\t\t\t\tdSfx = (numVals > 0) ? dVals[0].replace(_numExp, \"\") : \"\",\n\t\t\t\t\tformatter;\n\t\t\t\tif (!numVals) {\n\t\t\t\t\treturn function(v) {return v;};\n\t\t\t\t}\n\t\t\t\tif (clr) {\n\t\t\t\t\tformatter = function(v) {\n\t\t\t\t\t\tvar color, vals, i, a;\n\t\t\t\t\t\tif (typeof(v) === \"number\") {\n\t\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\t\ta[i] = formatter(a[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolor = (v.match(_colorExp) || [dColor])[0];\n\t\t\t\t\t\tvals = v.split(color).join(\"\").match(_valuesExp) || [];\n\t\t\t\t\t\ti = vals.length;\n\t\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn pfx + vals.join(delim) + delim + color + sfx + (v.indexOf(\"inset\") !== -1 ? \" inset\" : \"\");\n\t\t\t\t\t};\n\t\t\t\t\treturn formatter;\n\n\t\t\t\t}\n\t\t\t\tformatter = function(v) {\n\t\t\t\t\tvar vals, a, i;\n\t\t\t\t\tif (typeof(v) === \"number\") {\n\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\ta[i] = formatter(a[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t}\n\t\t\t\t\tvals = v.match(delim === \",\" ? _valuesExp : _valuesExpWithCommas) || [];\n\t\t\t\t\ti = vals.length;\n\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn ((pfx && v !== \"none\") ? v.substr(0, v.indexOf(vals[0])) || pfx : pfx) + vals.join(delim) + sfx; //note: prefix might be different, like for clipPath it could start with inset( or polygon(\n\t\t\t\t};\n\t\t\t\treturn formatter;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.\n\t\t\t * @param {!string} props a comma-delimited list of property names in order from top to left, like \"marginTop,marginRight,marginBottom,marginLeft\"\n\t\t\t * @return {Function} a formatter function\n\t\t\t */\n\t\t\t_getEdgeParser = function(props) {\n\t\t\t\tprops = props.split(\",\");\n\t\t\t\treturn function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\tvar a = (e + \"\").split(\" \"),\n\t\t\t\t\t\ti;\n\t\t\t\t\tvars = {};\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\t\tvars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];\n\t\t\t\t\t}\n\t\t\t\t\treturn cssp.parse(t, vars, pt, plugin);\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.\n\t\t\t_setPluginRatio = _internals._setPluginRatio = function(v) {\n\t\t\t\tthis.plugin.setRatio(v);\n\t\t\t\tvar d = this.data,\n\t\t\t\t\tproxy = d.proxy,\n\t\t\t\t\tmpt = d.firstMPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval, pt, i, str, p;\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tval = proxy[mpt.v];\n\t\t\t\t\tif (mpt.r) {\n\t\t\t\t\t\tval = mpt.r(val);\n\t\t\t\t\t} else if (val < min && val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tmpt.t[mpt.p] = val;\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tif (d.autoRotate) {\n\t\t\t\t\td.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier\n\t\t\t\t}\n\t\t\t\t//at the end, we must set the CSSPropTween's \"e\" (end) value dynamically here because that's what is used in the final setRatio() method. Same for \"b\" at the beginning.\n\t\t\t\tif (v === 1 || v === 0) {\n\t\t\t\t\tmpt = d.firstMPT;\n\t\t\t\t\tp = (v === 1) ? \"e\" : \"b\";\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tpt = mpt.t;\n\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\tpt[p] = pt.s + pt.xs0;\n\t\t\t\t\t\t} else if (pt.type === 1) {\n\t\t\t\t\t\t\tstr = pt.xs0 + pt.s + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt[p] = str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.\n\t\t\t * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)\n\t\t\t * @param {!string} p property name\n\t\t\t * @param {(number|string|object)} v value\n\t\t\t * @param {MiniPropTween=} next next MiniPropTween in the linked list\n\t\t\t * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer\n\t\t\t */\n\t\t\tMiniPropTween = function(t, p, v, next, r) {\n\t\t\t\tthis.t = t;\n\t\t\t\tthis.p = p;\n\t\t\t\tthis.v = v;\n\t\t\t\tthis.r = r;\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = this;\n\t\t\t\t\tthis._next = next;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like \"10px 10px 20px 30px rgb(255,0,0)\" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like \"s\" or \"xn1\" or \"xn2\") that we're tweening and the unique property name that was used for the proxy (like \"boxShadow_xn1\" and \"boxShadow_xn2\") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.\n\t\t\t * This method returns an object that has the following properties:\n\t\t\t *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target\n\t\t\t *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values\n\t\t\t *  - firstMPT: the first MiniPropTween in the linked list\n\t\t\t *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the \"pt\" (4th) parameter.\n\t\t\t * @param {!Object} t target object to be tweened\n\t\t\t * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed\n\t\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance\n\t\t\t * @param {CSSPropTween=} pt the next CSSPropTween in the linked list\n\t\t\t * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values\n\t\t\t * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the \"pt\" (4th) parameter.\n\t\t\t * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)\n\t\t\t */\n\t\t\t_parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {\n\t\t\t\tvar bpt = pt,\n\t\t\t\t\tstart = {},\n\t\t\t\t\tend = {},\n\t\t\t\t\ttransform = cssp._transform,\n\t\t\t\t\toldForce = _forcePT,\n\t\t\t\t\ti, p, xp, mpt, firstPT;\n\t\t\t\tcssp._transform = null;\n\t\t\t\t_forcePT = vars;\n\t\t\t\tpt = firstPT = cssp.parse(t, vars, pt, plugin);\n\t\t\t\t_forcePT = oldForce;\n\t\t\t\t//break off from the linked list so the new ones are isolated.\n\t\t\t\tif (shallow) {\n\t\t\t\t\tcssp._transform = transform;\n\t\t\t\t\tif (bpt) {\n\t\t\t\t\t\tbpt._prev = null;\n\t\t\t\t\t\tif (bpt._prev) {\n\t\t\t\t\t\t\tbpt._prev._next = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (pt && pt !== bpt) {\n\t\t\t\t\tif (pt.type <= 1) {\n\t\t\t\t\t\tp = pt.p;\n\t\t\t\t\t\tend[p] = pt.s + pt.c;\n\t\t\t\t\t\tstart[p] = pt.s;\n\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, \"s\", p, mpt, pt.r);\n\t\t\t\t\t\t\tpt.c = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pt.type === 1) {\n\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\twhile (--i > 0) {\n\t\t\t\t\t\t\t\txp = \"xn\" + i;\n\t\t\t\t\t\t\t\tp = pt.p + \"_\" + xp;\n\t\t\t\t\t\t\t\tend[p] = pt.data[xp];\n\t\t\t\t\t\t\t\tstart[p] = pt[xp];\n\t\t\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t\treturn {proxy:start, end:end, firstMPT:mpt, pt:firstPT};\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of \"extra\" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where \"s\" indicates string and \"n\" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be \"5px 5px 8px rgb(102, 102, 51)\". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.\n\t\t\t * CSSPropTweens have the following optional properties as well (not defined through the constructor):\n\t\t\t *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.\n\t\t\t *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)\n\t\t\t *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.\n\t\t\t *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.\n\t\t\t *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.\n\t\t\t * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.\n\t\t\t * @param {string} p Property to tween (name). For example, to tween element.width, p would be \"width\".\n\t\t\t * @param {number} s Starting numeric value\n\t\t\t * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.\n\t\t\t * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.\n\t\t\t * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:\"1px solid red\"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.\n\t\t\t * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a \"clip:rect(...)\" tween in which case \"p\" might be xs1 but \"n\" is still \"clip\"\n\t\t\t * @param {boolean=} r If true, the value(s) should be rounded\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.\n\t\t\t * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.\n\t\t\t */\n\t\t\tCSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {\n\t\t\t\tthis.t = t; //target\n\t\t\t\tthis.p = p; //property\n\t\t\t\tthis.s = s; //starting value\n\t\t\t\tthis.c = c; //change value\n\t\t\t\tthis.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)\n\t\t\t\tif (!(t instanceof CSSPropTween)) {\n\t\t\t\t\t_overwriteProps.push(this.n);\n\t\t\t\t}\n\t\t\t\tthis.r = !r ? r : (typeof(r) === \"function\") ? r : Math.round; //round (boolean)\n\t\t\t\tthis.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work\n\t\t\t\tif (pr) {\n\t\t\t\t\tthis.pr = pr;\n\t\t\t\t\t_hasPriority = true;\n\t\t\t\t}\n\t\t\t\tthis.b = (b === undefined) ? s : b;\n\t\t\t\tthis.e = (e === undefined) ? s + c : e;\n\t\t\t\tif (next) {\n\t\t\t\t\tthis._next = next;\n\t\t\t\t\tnext._prev = this;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween\n\t\t\t\tvar pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);\n\t\t\t\tpt.b = start;\n\t\t\t\tpt.e = pt.xs0 = end;\n\t\t\t\treturn pt;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:\n\t\t\t * sp.parseComplex(element, \"boxShadow\", \"5px 10px 20px rgb(255,102,51)\", \"0px 0px 0px red\", true, \"0px 0px 0px rgb(0,0,0,0)\", pt);\n\t\t\t * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the \"data\" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().\n\t\t\t * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.\n\t\t\t *\n\t\t\t * @param {!Object} t Target whose property will be tweened\n\t\t\t * @param {!string} p Property that will be tweened (its name, like \"left\" or \"backgroundColor\" or \"boxShadow\")\n\t\t\t * @param {string} b Beginning value\n\t\t\t * @param {string} e Ending value\n\t\t\t * @param {boolean} clrs If true, the value could contain a color value like \"rgb(255,0,0)\" or \"#F00\" or \"red\". The default is false, so no colors will be recognized (a performance optimization)\n\t\t\t * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match\n\t\t\t * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the \"data\" property, like {s:100, xn1:50, xn2:300}\n\t\t\t * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.\n\t\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.\n\t\t\t */\n\t\t\t_parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {\n\t\t\t\t//DEBUG: _log(\"parseComplex: \"+p+\", b: \"+b+\", e: \"+e);\n\t\t\t\tb = b || dflt || \"\";\n\t\t\t\tif (typeof(e) === \"function\") {\n\t\t\t\t\te = e(_index, _target);\n\t\t\t\t}\n\t\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);\n\t\t\t\te += \"\"; //ensures it's a string\n\t\t\t\tif (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().\n\t\t\t\t\te = [b, e];\n\t\t\t\t\tCSSPlugin.colorStringFilter(e);\n\t\t\t\t\tb = e[0];\n\t\t\t\t\te = e[1];\n\t\t\t\t}\n\t\t\t\tvar ba = b.split(\", \").join(\",\").split(\" \"), //beginning array\n\t\t\t\t\tea = e.split(\", \").join(\",\").split(\" \"), //ending array\n\t\t\t\t\tl = ba.length,\n\t\t\t\t\tautoRound = (_autoRound !== false),\n\t\t\t\t\ti, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;\n\t\t\t\tif (e.indexOf(\",\") !== -1 || b.indexOf(\",\") !== -1) {\n\t\t\t\t\tif ((e + b).indexOf(\"rgb\") !== -1 || (e + b).indexOf(\"hsl\") !== -1) { //keep rgb(), rgba(), hsl(), and hsla() values together! (remember, we're splitting on spaces)\n\t\t\t\t\t\tba = ba.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\t\t\tea = ea.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tba = ba.join(\" \").split(\",\").join(\", \").split(\" \");\n\t\t\t\t\t\tea = ea.join(\" \").split(\",\").join(\", \").split(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tl = ba.length;\n\t\t\t\t}\n\t\t\t\tif (l !== ea.length) {\n\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\tba = (dflt || \"\").split(\" \");\n\t\t\t\t\tl = ba.length;\n\t\t\t\t}\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = setRatio;\n\t\t\t\t_colorExp.lastIndex = 0;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tbv = ba[i];\n\t\t\t\t\tev = ea[i] + \"\";\n\t\t\t\t\tbn = parseFloat(bv);\n\t\t\t\t\t//if the value begins with a number (most common). It's fine if it has a suffix like px\n\t\t\t\t\tif (bn || bn === 0) {\n\t\t\t\t\t\tpt.appendXtra(\"\", bn, _parseChange(ev, bn), ev.replace(_relNumExp, \"\"), (autoRound && ev.indexOf(\"px\") !== -1) ? Math.round : false, true);\n\n\t\t\t\t\t//if the value is a color\n\t\t\t\t\t} else if (clrs && _colorExp.test(bv)) {\n\t\t\t\t\t\tstr = ev.indexOf(\")\") + 1;\n\t\t\t\t\t\tstr = \")\" + (str ? ev.substr(str) : \"\"); //if there's a comma or ) at the end, retain it.\n\t\t\t\t\t\tuseHSL = (ev.indexOf(\"hsl\") !== -1 && _supportsOpacity);\n\t\t\t\t\t\ttemp = ev; //original string value so we can look for any prefix later.\n\t\t\t\t\t\tbv = _parseColor(bv, useHSL);\n\t\t\t\t\t\tev = _parseColor(ev, useHSL);\n\t\t\t\t\t\thasAlpha = (bv.length + ev.length > 6);\n\t\t\t\t\t\tif (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use \"transparent\" for the end color\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += pt.l ? \" transparent\" : \"transparent\";\n\t\t\t\t\t\t\tpt.e = pt.e.split(ea[i]).join(\"transparent\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!_supportsOpacity) { //old versions of IE don't support rgba().\n\t\t\t\t\t\t\t\thasAlpha = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (useHSL) {\n\t\t\t\t\t\t\t\tpt.appendXtra(temp.substr(0, temp.indexOf(\"hsl\")) + (hasAlpha ? \"hsla(\" : \"hsl(\"), bv[0], _parseChange(ev[0], bv[0]), \",\", false, true)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[1], _parseChange(ev[1], bv[1]), \"%,\", false)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? \"%,\" : \"%\" + str), false);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpt.appendXtra(temp.substr(0, temp.indexOf(\"rgb\")) + (hasAlpha ? \"rgba(\" : \"rgb(\"), bv[0], ev[0] - bv[0], \",\", Math.round, true)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[1], ev[1] - bv[1], \",\", Math.round)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[2], ev[2] - bv[2], (hasAlpha ? \",\" : str), Math.round);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (hasAlpha) {\n\t\t\t\t\t\t\t\tbv = (bv.length < 4) ? 1 : bv[3];\n\t\t\t\t\t\t\t\tpt.appendXtra(\"\", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array\n\n\t\t\t\t\t\t//if no number is found, treat it as a non-tweening value and just append the string to the current xs.\n\t\t\t\t\t\tif (!bnums) {\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += (pt.l || pt[\"xs\" + pt.l]) ? \" \" + ev : ev;\n\n\t\t\t\t\t\t//loop through all the numbers that are found and construct the extra values on the pt.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tenums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5\n\t\t\t\t\t\t\tif (!enums || enums.length !== bnums.length) {\n\t\t\t\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tni = 0;\n\t\t\t\t\t\t\tfor (xi = 0; xi < bnums.length; xi++) {\n\t\t\t\t\t\t\t\tcv = bnums[xi];\n\t\t\t\t\t\t\t\ttemp = bv.indexOf(cv, ni);\n\t\t\t\t\t\t\t\tpt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), \"\", (autoRound && bv.substr(temp + cv.length, 2) === \"px\") ? Math.round : false, (xi === 0));\n\t\t\t\t\t\t\t\tni = temp + cv.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += bv.substr(ni);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//if there are relative values (\"+=\" or \"-=\" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.\n\t\t\t\tif (e.indexOf(\"=\") !== -1) if (pt.data) {\n\t\t\t\t\tstr = pt.xs0 + pt.data.s;\n\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\tstr += pt[\"xs\" + i] + pt.data[\"xn\" + i];\n\t\t\t\t\t}\n\t\t\t\t\tpt.e = str + pt[\"xs\" + i];\n\t\t\t\t}\n\t\t\t\tif (!pt.l) {\n\t\t\t\t\tpt.type = -1;\n\t\t\t\t\tpt.xs0 = pt.e;\n\t\t\t\t}\n\t\t\t\treturn pt.xfirst || pt;\n\t\t\t},\n\t\t\ti = 9;\n\n\n\t\tp = CSSPropTween.prototype;\n\t\tp.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.\n\t\twhile (--i > 0) {\n\t\t\tp[\"xn\" + i] = 0;\n\t\t\tp[\"xs\" + i] = \"\";\n\t\t}\n\t\tp.xs0 = \"\";\n\t\tp._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;\n\n\n\t\t/**\n\t\t * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like \"rect(10px, 5px, 0px, 20px)\", the values would be stored like this:\n\t\t * xs0:\"rect(\", s:10, xs1:\"px, \", xn1:5, xs2:\"px, \", xn2:0, xs3:\"px, \", xn3:20, xn4:\"px)\"\n\t\t * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).\n\t\t * @param {string=} pfx Prefix (if any)\n\t\t * @param {!number} s Starting value\n\t\t * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.\n\t\t * @param {string=} sfx Suffix (if any)\n\t\t * @param {boolean=} r Round (if true).\n\t\t * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.\n\t\t * @return {CSSPropTween} returns itself so that multiple methods can be chained together.\n\t\t */\n\t\tp.appendXtra = function(pfx, s, c, sfx, r, pad) {\n\t\t\tvar pt = this,\n\t\t\t\tl = pt.l;\n\t\t\tpt[\"xs\" + l] += (pad && (l || pt[\"xs\" + l])) ? \" \" + pfx : pfx || \"\";\n\t\t\tif (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!\n\t\t\t\tpt[\"xs\" + l] += s + (sfx || \"\");\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.l++;\n\t\t\tpt.type = pt.setRatio ? 2 : 1;\n\t\t\tpt[\"xs\" + pt.l] = sfx || \"\";\n\t\t\tif (l > 0) {\n\t\t\t\tpt.data[\"xn\" + l] = s + c;\n\t\t\t\tpt.rxp[\"xn\" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)\n\t\t\t\tpt[\"xn\" + l] = s;\n\t\t\t\tif (!pt.plugin) {\n\t\t\t\t\tpt.xfirst = new CSSPropTween(pt, \"xn\" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);\n\t\t\t\t\tpt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is \"\" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.data = {s:s + c};\n\t\t\tpt.rxp = {};\n\t\t\tpt.s = s;\n\t\t\tpt.c = c;\n\t\t\tpt.r = r;\n\t\t\treturn pt;\n\t\t};\n\n\t\t/**\n\t\t * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:\"5px 10px 15px rgb(255, 102, 51)\" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like \"boxShadow\" or \"throwProps\" or \"bezier\" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.\n\t\t * @param {!string} p Property name (like \"boxShadow\" or \"throwProps\")\n\t\t * @param {Object=} options An object containing any of the following configuration options:\n\t\t *                      - defaultValue: the default value\n\t\t *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)\n\t\t *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take \"5px 5px red\" and format it to \"5px 5px 0px 0px red\" so that both the beginning and ending values have a common order and quantity of values.)\n\t\t *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)\n\t\t *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.\n\t\t *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.\n\t\t *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.\n\t\t *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like \"5px\" would apply to all, \"5px, 10px\" would use 5px for top/bottom and 10px for right/left, etc.\n\t\t *                      - keyword: a special keyword that can [optionally] be found inside the value (like \"inset\" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).\n\t\t */\n\t\tvar SpecialProp = function(p, options) {\n\t\t\t\toptions = options || {};\n\t\t\t\tthis.p = options.prefix ? _checkPropPrefix(p) || p : p;\n\t\t\t\t_specialProps[p] = _specialProps[this.p] = this;\n\t\t\t\tthis.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);\n\t\t\t\tif (options.parser) {\n\t\t\t\t\tthis.parse = options.parser;\n\t\t\t\t}\n\t\t\t\tthis.clrs = options.color;\n\t\t\t\tthis.multi = options.multi;\n\t\t\t\tthis.keyword = options.keyword;\n\t\t\t\tthis.dflt = options.defaultValue;\n\t\t\t\tthis.allowFunc = options.allowFunc;\n\t\t\t\tthis.pr = options.priority || 0;\n\t\t\t},\n\n\t\t\t//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.\n\t\t\t_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {\n\t\t\t\tif (typeof(options) !== \"object\") {\n\t\t\t\t\toptions = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin\n\t\t\t\t}\n\t\t\t\tvar a = p.split(\",\"),\n\t\t\t\t\td = options.defaultValue,\n\t\t\t\t\ti, temp;\n\t\t\t\tdefaults = defaults || [d];\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\toptions.prefix = (i === 0 && options.prefix);\n\t\t\t\t\toptions.defaultValue = defaults[i] || d;\n\t\t\t\t\ttemp = new SpecialProp(a[i], options);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.\n\t\t\t_registerPluginProp = _internals._registerPluginProp = function(p) {\n\t\t\t\tif (!_specialProps[p]) {\n\t\t\t\t\tvar pluginName = p.charAt(0).toUpperCase() + p.substr(1) + \"Plugin\";\n\t\t\t\t\t_registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\t\tvar pluginClass = _globals.com.greensock.plugins[pluginName];\n\t\t\t\t\t\tif (!pluginClass) {\n\t\t\t\t\t\t\t_log(\"Error: \" + pluginName + \" js file not loaded.\");\n\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpluginClass._cssRegister();\n\t\t\t\t\t\treturn _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);\n\t\t\t\t\t}});\n\t\t\t\t}\n\t\t\t};\n\n\n\t\tp = SpecialProp.prototype;\n\n\t\t/**\n\t\t * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like \"inset\" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)\n\t\t * @param {!Object} t target element\n\t\t * @param {(string|number|object)} b beginning value\n\t\t * @param {(string|number|object)} e ending (destination) value\n\t\t * @param {CSSPropTween=} pt next CSSPropTween in the linked list\n\t\t * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.\n\t\t * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.\n\t\t * @return {CSSPropTween=} First CSSPropTween in the linked list\n\t\t */\n\t\tp.parseComplex = function(t, b, e, pt, plugin, setRatio) {\n\t\t\tvar kwd = this.keyword,\n\t\t\t\ti, ba, ea, l, bi, ei;\n\t\t\t//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like \"inset\" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)\n\t\t\tif (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {\n\t\t\t\tba = b.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\tea = e.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t} else if (kwd) {\n\t\t\t\tba = [b];\n\t\t\t\tea = [e];\n\t\t\t}\n\t\t\tif (ea) {\n\t\t\t\tl = (ea.length > ba.length) ? ea.length : ba.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tb = ba[i] = ba[i] || this.dflt;\n\t\t\t\t\te = ea[i] = ea[i] || this.dflt;\n\t\t\t\t\tif (kwd) {\n\t\t\t\t\t\tbi = b.indexOf(kwd);\n\t\t\t\t\t\tei = e.indexOf(kwd);\n\t\t\t\t\t\tif (bi !== ei) {\n\t\t\t\t\t\t\tif (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.\n\t\t\t\t\t\t\t\tba[i] = ba[i].split(kwd).join(\"\");\n\t\t\t\t\t\t\t} else if (bi === -1) { //if the keyword isn't in the beginning, add it.\n\t\t\t\t\t\t\t\tba[i] += \" \" + kwd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb = ba.join(\", \");\n\t\t\t\te = ea.join(\", \");\n\t\t\t}\n\t\t\treturn _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);\n\t\t};\n\n\t\t/**\n\t\t * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:\n\t\t * this._firstPT = sp.parse(element, \"5px 10px 20px rgb(2550,102,51)\", \"boxShadow\", this);\n\t\t * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).\n\t\t * @param {!Object} t Target object whose property is being tweened\n\t\t * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).\n\t\t * @param {!string} p Property name\n\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.\n\t\t * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)\n\t\t * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.\n\t\t * @param {Object=} vars Original vars object that contains the data for parsing.\n\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.\n\t\t */\n\t\tp.parse = function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\treturn this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);\n\t\t};\n\n\t\t/**\n\t\t * Registers a special property that should be intercepted from any \"css\" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:\n\t\t *  1) Target object whose property should be tweened (typically a DOM element)\n\t\t *  2) The end/destination value (could be a string, number, object, or whatever you want)\n\t\t *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)\n\t\t *\n\t\t * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric \"ratio\" parameter to your function that indicates the change factor (usually between 0 and 1). For example:\n\t\t *\n\t\t * CSSPlugin.registerSpecialProp(\"myCustomProp\", function(target, value, tween) {\n\t\t *      var start = target.style.width;\n\t\t *      return function(ratio) {\n\t\t *              target.style.width = (start + value * ratio) + \"px\";\n\t\t *              console.log(\"set width to \" + target.style.width);\n\t\t *          }\n\t\t * }, 0);\n\t\t *\n\t\t * Then, when I do this tween, it will trigger my special property:\n\t\t *\n\t\t * TweenLite.to(element, 1, {css:{myCustomProp:100}});\n\t\t *\n\t\t * In the example, of course, we're just changing the width, but you can do anything you want.\n\t\t *\n\t\t * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define \"myCustomProp\", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})\n\t\t * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a \"change factor\" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.\n\t\t * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.\n\t\t */\n\t\tCSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {\n\t\t\t_registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\tvar rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);\n\t\t\t\trv.plugin = plugin;\n\t\t\t\trv.setRatio = onInitTween(t, e, cssp._tween, p);\n\t\t\t\treturn rv;\n\t\t\t}, priority:priority});\n\t\t};\n\n\n\n\n\n\n\t\t//transform-related methods and properties\n\t\tCSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the \"transform\" attribute instead (users can override this).\n\t\tvar _transformProps = (\"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\").split(\",\"),\n\t\t\t_transformProp = _checkPropPrefix(\"transform\"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.\n\t\t\t_transformPropCSS = _prefixCSS + \"transform\",\n\t\t\t_transformOriginProp = _checkPropPrefix(\"transformOrigin\"),\n\t\t\t_supports3D = (_checkPropPrefix(\"perspective\") !== null),\n\t\t\tTransform = _internals.Transform = function() {\n\t\t\t\tthis.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;\n\t\t\t\tthis.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || \"auto\";\n\t\t\t},\n\t\t\t_SVGElement = _gsScope.SVGElement,\n\t\t\t_useSVGTransformAttr,\n\t\t\t//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.\n\n\t\t\t_createSVG = function(type, container, attributes) {\n\t\t\t\tvar element = _doc.createElementNS(\"http://www.w3.org/2000/svg\", type),\n\t\t\t\t\treg = /([a-z])([A-Z])/g,\n\t\t\t\t\tp;\n\t\t\t\tfor (p in attributes) {\n\t\t\t\t\telement.setAttributeNS(null, p.replace(reg, \"$1-$2\").toLowerCase(), attributes[p]);\n\t\t\t\t}\n\t\t\t\tcontainer.appendChild(element);\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\t_docElement = _doc.documentElement || {},\n\t\t\t_forceSVGTransformAttr = (function() {\n\t\t\t\t//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the \"transform\" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element\n\t\t\t\tvar force = _ieVers || (/Android/i.test(_agent) && !_gsScope.chrome),\n\t\t\t\t\tsvg, rect, width;\n\t\t\t\tif (_doc.createElementNS && _docElement.appendChild && !force) { //IE8 and earlier doesn't support SVG anyway\n\t\t\t\t\tsvg = _createSVG(\"svg\", _docElement);\n\t\t\t\t\trect = _createSVG(\"rect\", svg, {width:100, height:50, x:100});\n\t\t\t\t\twidth = rect.getBoundingClientRect().width;\n\t\t\t\t\trect.style[_transformOriginProp] = \"50% 50%\";\n\t\t\t\t\trect.style[_transformProp] = \"scaleX(0.5)\";\n\t\t\t\t\tforce = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).\n\t\t\t\t\t_docElement.removeChild(svg);\n\t\t\t\t}\n\t\t\t\treturn force;\n\t\t\t})(),\n\t\t\t_parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {\n\t\t\t\tvar tm = e._gsTransform,\n\t\t\t\t\tm = _getMatrix(e, true),\n\t\t\t\t\tv, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;\n\t\t\t\tif (tm) {\n\t\t\t\t\txOriginOld = tm.xOrigin; //record the original values before we alter them.\n\t\t\t\t\tyOriginOld = tm.yOrigin;\n\t\t\t\t}\n\t\t\t\tif (!absolute || (v = absolute.split(\" \")).length < 2) {\n\t\t\t\t\tb = e.getBBox();\n\t\t\t\t\tif (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n\t\t\t\t\t\tb = {x: parseFloat(e.hasAttribute(\"x\") ? e.getAttribute(\"x\") : e.hasAttribute(\"cx\") ? e.getAttribute(\"cx\") : 0) || 0, y: parseFloat(e.hasAttribute(\"y\") ? e.getAttribute(\"y\") : e.hasAttribute(\"cy\") ? e.getAttribute(\"cy\") : 0) || 0, width:0, height:0};\n\t\t\t\t\t}\n\t\t\t\t\tlocal = _parsePosition(local).split(\" \");\n\t\t\t\t\tv = [(local[0].indexOf(\"%\") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,\n\t\t\t\t\t\t (local[1].indexOf(\"%\") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];\n\t\t\t\t}\n\t\t\t\tdecoratee.xOrigin = xOrigin = parseFloat(v[0]);\n\t\t\t\tdecoratee.yOrigin = yOrigin = parseFloat(v[1]);\n\t\t\t\tif (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.\n\t\t\t\t\ta = m[0];\n\t\t\t\t\tb = m[1];\n\t\t\t\t\tc = m[2];\n\t\t\t\t\td = m[3];\n\t\t\t\t\ttx = m[4];\n\t\t\t\t\tty = m[5];\n\t\t\t\t\tdeterminant = (a * d - b * c);\n\t\t\t\t\tif (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n\t\t\t\t\t\tx = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);\n\t\t\t\t\t\ty = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);\n\t\t\t\t\t\txOrigin = decoratee.xOrigin = v[0] = x;\n\t\t\t\t\t\tyOrigin = decoratee.yOrigin = v[1] = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly\n\t\t\t\t\tif (skipRecord) {\n\t\t\t\t\t\tdecoratee.xOffset = tm.xOffset;\n\t\t\t\t\t\tdecoratee.yOffset = tm.yOffset;\n\t\t\t\t\t\ttm = decoratee;\n\t\t\t\t\t}\n\t\t\t\t\tif (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {\n\t\t\t\t\t\tx = xOrigin - xOriginOld;\n\t\t\t\t\t\ty = yOrigin - yOriginOld;\n\t\t\t\t\t\t//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.\n\t\t\t\t\t\t//tm.x -= x - (x * m[0] + y * m[2]);\n\t\t\t\t\t\t//tm.y -= y - (x * m[1] + y * m[3]);\n\t\t\t\t\t\ttm.xOffset += (x * m[0] + y * m[2]) - x;\n\t\t\t\t\t\ttm.yOffset += (x * m[1] + y * m[3]) - y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttm.xOffset = tm.yOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skipRecord) {\n\t\t\t\t\te.setAttribute(\"data-svg-origin\", v.join(\" \"));\n\t\t\t\t}\n\t\t\t},\n\t\t\t_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n\t\t\t\tvar svg = _createElement(\"svg\", (this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\")) || \"http://www.w3.org/2000/svg\"),\n\t\t\t\t\toldParent = this.parentNode,\n\t\t\t\t\toldSibling = this.nextSibling,\n\t\t\t\t\toldCSS = this.style.cssText,\n\t\t\t\t\tbbox;\n\t\t\t\t_docElement.appendChild(svg);\n\t\t\t\tsvg.appendChild(this);\n\t\t\t\tthis.style.display = \"block\";\n\t\t\t\tif (swapIfPossible) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbbox = this.getBBox();\n\t\t\t\t\t\tthis._originalGetBBox = this.getBBox;\n\t\t\t\t\t\tthis.getBBox = _getBBoxHack;\n\t\t\t\t\t} catch (e) { }\n\t\t\t\t} else if (this._originalGetBBox) {\n\t\t\t\t\tbbox = this._originalGetBBox();\n\t\t\t\t}\n\t\t\t\tif (oldSibling) {\n\t\t\t\t\toldParent.insertBefore(this, oldSibling);\n\t\t\t\t} else {\n\t\t\t\t\toldParent.appendChild(this);\n\t\t\t\t}\n\t\t\t\t_docElement.removeChild(svg);\n\t\t\t\tthis.style.cssText = oldCSS;\n\t\t\t\treturn bbox;\n\t\t\t},\n\t\t\t_getBBox = function(e) {\n\t\t\t\ttry {\n\t\t\t\t\treturn e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn _getBBoxHack.call(e, true);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works\n\t\t\t\treturn !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n\t\t\t},\n\t\t\t_identity2DMatrix = [1,0,0,1,0,0],\n\t\t\t_getMatrix = function(e, force2D) {\n\t\t\t\tvar tm = e._gsTransform || new Transform(),\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\tstyle = e.style,\n\t\t\t\t\tisDefault, s, m, n, dec, nextSibling, parent;\n\t\t\t\tif (_transformProp) {\n\t\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t\t} else if (e.currentStyle) {\n\t\t\t\t\t//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.\n\t\t\t\t\ts = e.currentStyle.filter.match(_ieGetMatrixExp);\n\t\t\t\t\ts = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(\",\") : \"\";\n\t\t\t\t}\n\t\t\t\tisDefault = (!s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\");\n\t\t\t\tif (_transformProp && isDefault && !e.offsetParent && e !== _docElement) { //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n\t\t\t\t\t//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n\t\t\t\t\tn = style.display;\n\t\t\t\t\tstyle.display = \"block\";\n\t\t\t\t\tparent = e.parentNode;\n\t\t\t\t\tif (!parent || !e.offsetParent) {\n\t\t\t\t\t\tdec = 1; //flag\n\t\t\t\t\t\tnextSibling = e.nextSibling;\n\t\t\t\t\t\t_docElement.appendChild(e); //we must add it to the DOM in order to get values properly\n\t\t\t\t\t}\n\t\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t\t\tisDefault = (!s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\");\n\t\t\t\t\tif (n) {\n\t\t\t\t\t\tstyle.display = n;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_removeProp(style, \"display\");\n\t\t\t\t\t}\n\t\t\t\t\tif (dec) {\n\t\t\t\t\t\tif (nextSibling) {\n\t\t\t\t\t\t\tparent.insertBefore(e, nextSibling);\n\t\t\t\t\t\t} else if (parent) {\n\t\t\t\t\t\t\tparent.appendChild(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_docElement.removeChild(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tm.svg || (e.getCTM && _isSVG(e))) {\n\t\t\t\t\tif (isDefault && (style[_transformProp] + \"\").indexOf(\"matrix\") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\n\t\t\t\t\t\ts = style[_transformProp];\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t\tm = e.getAttribute(\"transform\");\n\t\t\t\t\tif (isDefault && m) {\n\t\t\t\t\t\tm = e.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n\t\t\t\t\t\ts = \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + m.e + \",\" + m.f + \")\";\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isDefault) {\n\t\t\t\t\treturn _identity2DMatrix;\n\t\t\t\t}\n\t\t\t\t//split the matrix values out into an array (m for matrix)\n\t\t\t\tm = (s || \"\").match(_numExp) || [];\n\t\t\t\ti = m.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tn = Number(m[i]);\n\t\t\t\t\tm[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).\n\t\t\t\t}\n\t\t\t\treturn (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.\n\t\t\t * @param {!Object} t target element\n\t\t\t * @param {Object=} cs computed style object (optional)\n\t\t\t * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}\n\t\t\t * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)\n\t\t\t * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}\n\t\t\t */\n\t\t\t_getTransform = _internals.getTransform = function(t, cs, rec, parse) {\n\t\t\t\tif (t._gsTransform && rec && !parse) {\n\t\t\t\t\treturn t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.\n\t\t\t\t}\n\t\t\t\tvar tm = rec ? t._gsTransform || new Transform() : new Transform(),\n\t\t\t\t\tinvX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.\n\t\t\t\t\tmin = 0.00002,\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\tzOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, \"0 0 0\").split(\" \")[2]) || tm.zOrigin  || 0 : 0,\n\t\t\t\t\tdefaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,\n\t\t\t\t\tm, i, scaleX, scaleY, rotation, skewX;\n\n\t\t\t\ttm.svg = !!(t.getCTM && _isSVG(t));\n\t\t\t\tif (tm.svg) {\n\t\t\t\t\t_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, \"50% 50%\") + \"\", tm, t.getAttribute(\"data-svg-origin\"));\n\t\t\t\t\t_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;\n\t\t\t\t}\n\t\t\t\tm = _getMatrix(t);\n\t\t\t\tif (m !== _identity2DMatrix) {\n\n\t\t\t\t\tif (m.length === 16) {\n\t\t\t\t\t\t//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)\n\t\t\t\t\t\tvar a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3],\n\t\t\t\t\t\t\ta12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7],\n\t\t\t\t\t\t\ta13 = m[8], a23 = m[9], a33 = m[10],\n\t\t\t\t\t\t\ta14 = m[12], a24 = m[13], a34 = m[14],\n\t\t\t\t\t\t\ta43 = m[11],\n\t\t\t\t\t\t\tangle = Math.atan2(a32, a33),\n\t\t\t\t\t\t\tt1, t2, t3, t4, cos, sin;\n\t\t\t\t\t\t//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari\n\t\t\t\t\t\tif (tm.zOrigin) {\n\t\t\t\t\t\t\ta34 = -tm.zOrigin;\n\t\t\t\t\t\t\ta14 = a13*a34-m[12];\n\t\t\t\t\t\t\ta24 = a23*a34-m[13];\n\t\t\t\t\t\t\ta34 = a33*a34+tm.zOrigin-m[14];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.\n\t\t\t\t\t\ttm.rotationX = angle * _RAD2DEG;\n\t\t\t\t\t\t//rotationX\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\t\tt1 = a12*cos+a13*sin;\n\t\t\t\t\t\t\tt2 = a22*cos+a23*sin;\n\t\t\t\t\t\t\tt3 = a32*cos+a33*sin;\n\t\t\t\t\t\t\ta13 = a12*-sin+a13*cos;\n\t\t\t\t\t\t\ta23 = a22*-sin+a23*cos;\n\t\t\t\t\t\t\ta33 = a32*-sin+a33*cos;\n\t\t\t\t\t\t\ta43 = a42*-sin+a43*cos;\n\t\t\t\t\t\t\ta12 = t1;\n\t\t\t\t\t\t\ta22 = t2;\n\t\t\t\t\t\t\ta32 = t3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//rotationY\n\t\t\t\t\t\tangle = Math.atan2(-a31, a33);\n\t\t\t\t\t\ttm.rotationY = angle * _RAD2DEG;\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\t\tt1 = a11*cos-a13*sin;\n\t\t\t\t\t\t\tt2 = a21*cos-a23*sin;\n\t\t\t\t\t\t\tt3 = a31*cos-a33*sin;\n\t\t\t\t\t\t\ta23 = a21*sin+a23*cos;\n\t\t\t\t\t\t\ta33 = a31*sin+a33*cos;\n\t\t\t\t\t\t\ta43 = a41*sin+a43*cos;\n\t\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\t\ta21 = t2;\n\t\t\t\t\t\t\ta31 = t3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//rotationZ\n\t\t\t\t\t\tangle = Math.atan2(a21, a11);\n\t\t\t\t\t\ttm.rotation = angle * _RAD2DEG;\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\t\t\tt1 = a11*cos+a21*sin;\n\t\t\t\t\t\t\tt2 = a12*cos+a22*sin;\n\t\t\t\t\t\t\tt3 = a13*cos+a23*sin;\n\t\t\t\t\t\t\ta21 = a21*cos-a11*sin;\n\t\t\t\t\t\t\ta22 = a22*cos-a12*sin;\n\t\t\t\t\t\t\ta23 = a23*cos-a13*sin;\n\t\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\t\ta12 = t2;\n\t\t\t\t\t\t\ta13 = t3;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n\t\t\t\t\t\t\ttm.rotationX = tm.rotation = 0;\n\t\t\t\t\t\t\ttm.rotationY = 180 - tm.rotationY;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//skewX\n\t\t\t\t\t\tangle = Math.atan2(a12, a22);\n\n\t\t\t\t\t\t//scales\n\t\t\t\t\t\ttm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ttm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ttm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ta11 /= tm.scaleX;\n\t\t\t\t\t\ta12 /= tm.scaleY;\n\t\t\t\t\t\ta21 /= tm.scaleX;\n\t\t\t\t\t\ta22 /= tm.scaleY;\n\t\t\t\t\t\tif (Math.abs(angle) > min) {\n\t\t\t\t\t\t\ttm.skewX = angle * _RAD2DEG;\n\t\t\t\t\t\t\ta12 = 0; //unskews\n\t\t\t\t\t\t\tif (tm.skewType !== \"simple\") {\n\t\t\t\t\t\t\t\ttm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttm.skewX = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* //for testing purposes\n\t\t\t\t\t\tvar transform = \"matrix3d(\",\n\t\t\t\t\t\t\tcomma = \",\",\n\t\t\t\t\t\t\tzero = \"0\";\n\t\t\t\t\t\ta13 /= tm.scaleZ;\n\t\t\t\t\t\ta23 /= tm.scaleZ;\n\t\t\t\t\t\ta31 /= tm.scaleX;\n\t\t\t\t\t\ta32 /= tm.scaleY;\n\t\t\t\t\t\ta33 /= tm.scaleZ;\n\t\t\t\t\t\ttransform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\n\t\t\t\t\t\ttransform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\n\t\t\t\t\t\ttransform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\n\t\t\t\t\t\ttransform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\n\t\t\t\t\t\ttransform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + \")\";\n\t\t\t\t\t\tconsole.log(transform);\n\t\t\t\t\t\tdocument.querySelector(\".test\").style[_transformProp] = transform;\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\ttm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;\n\t\t\t\t\t\ttm.x = a14;\n\t\t\t\t\t\ttm.y = a24;\n\t\t\t\t\t\ttm.z = a34;\n\t\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);\n\t\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's \"display\" is \"none\", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.\n\t\t\t\t\t\tvar k = (m.length >= 6),\n\t\t\t\t\t\t\ta = k ? m[0] : 1,\n\t\t\t\t\t\t\tb = m[1] || 0,\n\t\t\t\t\t\t\tc = m[2] || 0,\n\t\t\t\t\t\t\td = k ? m[3] : 1;\n\t\t\t\t\t\ttm.x = m[4] || 0;\n\t\t\t\t\t\ttm.y = m[5] || 0;\n\t\t\t\t\t\tscaleX = Math.sqrt(a * a + b * b);\n\t\t\t\t\t\tscaleY = Math.sqrt(d * d + c * c);\n\t\t\t\t\t\trotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n\t\t\t\t\t\tskewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;\n\t\t\t\t\t\ttm.scaleX = scaleX;\n\t\t\t\t\t\ttm.scaleY = scaleY;\n\t\t\t\t\t\ttm.rotation = rotation;\n\t\t\t\t\t\ttm.skewX = skewX;\n\t\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\t\ttm.rotationX = tm.rotationY = tm.z = 0;\n\t\t\t\t\t\t\ttm.perspective = defaultTransformPerspective;\n\t\t\t\t\t\t\ttm.scaleZ = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);\n\t\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {\n\t\t\t\t\t\tif (invX) {\n\t\t\t\t\t\t\ttm.scaleX *= -1;\n\t\t\t\t\t\t\ttm.skewX += (tm.rotation <= 0) ? 180 : -180;\n\t\t\t\t\t\t\ttm.rotation += (tm.rotation <= 0) ? 180 : -180;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttm.scaleY *= -1;\n\t\t\t\t\t\t\ttm.skewX += (tm.skewX <= 0) ? 180 : -180;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttm.zOrigin = zOrigin;\n\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.\n\t\t\t\t\tfor (i in tm) {\n\t\t\t\t\t\tif (tm[i] < min) if (tm[i] > -min) {\n\t\t\t\t\t\t\ttm[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//DEBUG: _log(\"parsed rotation of \" + t.getAttribute(\"id\")+\": \"+(tm.rotationX)+\", \"+(tm.rotationY)+\", \"+(tm.rotation)+\", scale: \"+tm.scaleX+\", \"+tm.scaleY+\", \"+tm.scaleZ+\", position: \"+tm.x+\", \"+tm.y+\", \"+tm.z+\", perspective: \"+tm.perspective+ \", origin: \"+ tm.xOrigin+ \",\"+ tm.yOrigin);\n\t\t\t\tif (rec) {\n\t\t\t\t\tt._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)\n\t\t\t\t\tif (tm.svg) { //if we're supposed to apply transforms to the SVG element's \"transform\" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.\n\t\t\t\t\t\tif (_useSVGTransformAttr && t.style[_transformProp]) {\n\t\t\t\t\t\t\tTweenLite.delayedCall(0.001, function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).\n\t\t\t\t\t\t\t\t_removeProp(t.style, _transformProp);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (!_useSVGTransformAttr && t.getAttribute(\"transform\")) {\n\t\t\t\t\t\t\tTweenLite.delayedCall(0.001, function(){\n\t\t\t\t\t\t\t\tt.removeAttribute(\"transform\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn tm;\n\t\t\t},\n\n\t\t\t//for setting 2D transforms in IE6, IE7, and IE8 (must use a \"filter\" to emulate the behavior of modern day browser transforms)\n\t\t\t_setIETransformRatio = function(v) {\n\t\t\t\tvar t = this.data, //refers to the element's _gsTransform object\n\t\t\t\t\tang = -t.rotation * _DEG2RAD,\n\t\t\t\t\tskew = ang + t.skewX * _DEG2RAD,\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\ta = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,\n\t\t\t\t\tb = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,\n\t\t\t\t\tc = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,\n\t\t\t\t\td = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,\n\t\t\t\t\tstyle = this.t.style,\n\t\t\t\t\tcs = this.t.currentStyle,\n\t\t\t\t\tfilters, val;\n\t\t\t\tif (!cs) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tval = b; //just for swapping the variables an inverting them (reused \"val\" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)\n\t\t\t\tb = -c;\n\t\t\t\tc = -val;\n\t\t\t\tfilters = cs.filter;\n\t\t\t\tstyle.filter = \"\"; //remove filters so that we can accurately measure offsetWidth/offsetHeight\n\t\t\t\tvar w = this.t.offsetWidth,\n\t\t\t\t\th = this.t.offsetHeight,\n\t\t\t\t\tclip = (cs.position !== \"absolute\"),\n\t\t\t\t\tm = \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + a + \", M12=\" + b + \", M21=\" + c + \", M22=\" + d,\n\t\t\t\t\tox = t.x + (w * t.xPercent / 100),\n\t\t\t\t\toy = t.y + (h * t.yPercent / 100),\n\t\t\t\t\tdx, dy;\n\n\t\t\t\t//if transformOrigin is being used, adjust the offset x and y\n\t\t\t\tif (t.ox != null) {\n\t\t\t\t\tdx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;\n\t\t\t\t\tdy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;\n\t\t\t\t\tox += dx - (dx * a + dy * b);\n\t\t\t\t\toy += dy - (dx * c + dy * d);\n\t\t\t\t}\n\n\t\t\t\tif (!clip) {\n\t\t\t\t\tm += \", sizingMethod='auto expand')\";\n\t\t\t\t} else {\n\t\t\t\t\tdx = (w / 2);\n\t\t\t\t\tdy = (h / 2);\n\t\t\t\t\t//translate to ensure that transformations occur around the correct origin (default is center).\n\t\t\t\t\tm += \", Dx=\" + (dx - (dx * a + dy * b) + ox) + \", Dy=\" + (dy - (dx * c + dy * d) + oy) + \")\";\n\t\t\t\t}\n\t\t\t\tif (filters.indexOf(\"DXImageTransform.Microsoft.Matrix(\") !== -1) {\n\t\t\t\t\tstyle.filter = filters.replace(_ieSetMatrixExp, m);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.filter = m + \" \" + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.\n\t\t\t\t}\n\n\t\t\t\t//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.\n\t\t\t\tif (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf(\"Dx=0, Dy=0\") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf(\"gradient(\" && filters.indexOf(\"Alpha\")) === -1) {\n\t\t\t\t\tstyle.removeAttribute(\"filter\");\n\t\t\t\t}\n\n\t\t\t\t//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).\n\t\t\t\tif (!clip) {\n\t\t\t\t\tvar mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom\n\t\t\t\t\t\tmarg, prop, dif;\n\t\t\t\t\tdx = t.ieOffsetX || 0;\n\t\t\t\t\tdy = t.ieOffsetY || 0;\n\t\t\t\t\tt.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);\n\t\t\t\t\tt.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\t\tprop = _margins[i];\n\t\t\t\t\t\tmarg = cs[prop];\n\t\t\t\t\t\t//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)\n\t\t\t\t\t\tval = (marg.indexOf(\"px\") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, \"\")) || 0;\n\t\t\t\t\t\tif (val !== t[prop]) {\n\t\t\t\t\t\t\tdif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle[prop] = (t[prop] = Math.round( val - dif * ((i === 0 || i === 2) ? 1 : mult) )) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* translates a super small decimal to a string WITHOUT scientific notation\n\t\t\t_safeDecimal = function(n) {\n\t\t\t\tvar s = (n < 0 ? -n : n) + \"\",\n\t\t\t\t\ta = s.split(\"e-\");\n\t\t\t\treturn (n < 0 ? \"-0.\" : \"0.\") + new Array(parseInt(a[1], 10) || 0).join(\"0\") + a[0].split(\".\").join(\"\");\n\t\t\t},\n\t\t\t*/\n\n\t\t\t_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {\n\t\t\t\tvar t = this.data, //refers to the element's _gsTransform object\n\t\t\t\t\tstyle = this.t.style,\n\t\t\t\t\tangle = t.rotation,\n\t\t\t\t\trotationX = t.rotationX,\n\t\t\t\t\trotationY = t.rotationY,\n\t\t\t\t\tsx = t.scaleX,\n\t\t\t\t\tsy = t.scaleY,\n\t\t\t\t\tsz = t.scaleZ,\n\t\t\t\t\tx = t.x,\n\t\t\t\t\ty = t.y,\n\t\t\t\t\tz = t.z,\n\t\t\t\t\tisSVG = t.svg,\n\t\t\t\t\tperspective = t.perspective,\n\t\t\t\t\tforce3D = t.force3D,\n\t\t\t\t\tskewY = t.skewY,\n\t\t\t\t\tskewX = t.skewX,\n\t\t\t\t\tt1,\ta11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,\n\t\t\t\t\tzOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;\n\t\t\t\tif (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n\t\t\t\t\tskewX += skewY;\n\t\t\t\t\tangle += skewY;\n\t\t\t\t}\n\n\t\t\t\t//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)\n\t\t\t\tif (((((v === 1 || v === 0) && force3D === \"auto\" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.\n\n\t\t\t\t\t//2D\n\t\t\t\t\tif (angle || skewX || isSVG) {\n\t\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\t\tskew = skewX * _DEG2RAD;\n\t\t\t\t\t\trnd = 100000;\n\t\t\t\t\t\ta11 = Math.cos(angle) * sx;\n\t\t\t\t\t\ta21 = Math.sin(angle) * sx;\n\t\t\t\t\t\ta12 = Math.sin(angle - skew) * -sy;\n\t\t\t\t\t\ta22 = Math.cos(angle - skew) * sy;\n\t\t\t\t\t\tif (skew && t.skewType === \"simple\") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\t\tt1 = Math.tan(skew - skewY * _DEG2RAD);\n\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\ta12 *= t1;\n\t\t\t\t\t\t\ta22 *= t1;\n\t\t\t\t\t\t\tif (skewY) {\n\t\t\t\t\t\t\t\tt1 = Math.tan(skewY * _DEG2RAD);\n\t\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isSVG) {\n\t\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t\t\tif (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the matrix to simulate it.\n\t\t\t\t\t\t\t\tmin = this.t.getBBox();\n\t\t\t\t\t\t\t\tx += t.xPercent * 0.01 * min.width;\n\t\t\t\t\t\t\t\ty += t.yPercent * 0.01 * min.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmin = 0.000001;\n\t\t\t\t\t\t\tif (x < min) if (x > -min) {\n\t\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (y < min) if (y > -min) {\n\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransform = (((a11 * rnd) | 0) / rnd) + \",\" + (((a21 * rnd) | 0) / rnd) + \",\" + (((a12 * rnd) | 0) / rnd) + \",\" + (((a22 * rnd) | 0) / rnd) + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\t\tif (isSVG && _useSVGTransformAttr) {\n\t\t\t\t\t\t\tthis.t.setAttribute(\"transform\", \"matrix(\" + transform);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 5 decimal places.\n\t\t\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + transform;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + sx + \",0,0,\" + sy + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\t\t\t\tif (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.\n\t\t\t\t\tmin = 0.0001;\n\t\t\t\t\tif (sx < min && sx > -min) {\n\t\t\t\t\t\tsx = sz = 0.00002;\n\t\t\t\t\t}\n\t\t\t\t\tif (sy < min && sy > -min) {\n\t\t\t\t\t\tsy = sz = 0.00002;\n\t\t\t\t\t}\n\t\t\t\t\tif (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).\n\t\t\t\t\t\tperspective = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angle || skewX) {\n\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\tcos = a11 = Math.cos(angle);\n\t\t\t\t\tsin = a21 = Math.sin(angle);\n\t\t\t\t\tif (skewX) {\n\t\t\t\t\t\tangle -= skewX * _DEG2RAD;\n\t\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\t\tif (t.skewType === \"simple\") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\t\tt1 = Math.tan((skewX - skewY) * _DEG2RAD);\n\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\tcos *= t1;\n\t\t\t\t\t\t\tsin *= t1;\n\t\t\t\t\t\t\tif (t.skewY) {\n\t\t\t\t\t\t\t\tt1 = Math.tan(skewY * _DEG2RAD);\n\t\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ta12 = -sin;\n\t\t\t\t\ta22 = cos;\n\n\t\t\t\t} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...\n\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) translate3d(\" : \"translate3d(\") + x + \"px,\" + y + \"px,\" + z +\"px)\" + ((sx !== 1 || sy !== 1) ? \" scale(\" + sx + \",\" + sy + \")\" : \"\");\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\ta11 = a22 = 1;\n\t\t\t\t\ta12 = a21 = 0;\n\t\t\t\t}\n\t\t\t\t// KEY  INDEX   AFFECTS a[row][column]\n\t\t\t\t// a11  0       rotation, rotationY, scaleX\n\t\t\t\t// a21  1       rotation, rotationY, scaleX\n\t\t\t\t// a31  2       rotationY, scaleX\n\t\t\t\t// a41  3       rotationY, scaleX\n\t\t\t\t// a12  4       rotation, skewX, rotationX, scaleY\n\t\t\t\t// a22  5       rotation, skewX, rotationX, scaleY\n\t\t\t\t// a32  6       rotationX, scaleY\n\t\t\t\t// a42  7       rotationX, scaleY\n\t\t\t\t// a13  8       rotationY, rotationX, scaleZ\n\t\t\t\t// a23  9       rotationY, rotationX, scaleZ\n\t\t\t\t// a33  10      rotationY, rotationX, scaleZ\n\t\t\t\t// a43  11      rotationY, rotationX, perspective, scaleZ\n\t\t\t\t// a14  12      x, zOrigin, svgOrigin\n\t\t\t\t// a24  13      y, zOrigin, svgOrigin\n\t\t\t\t// a34  14      z, zOrigin\n\t\t\t\t// a44  15\n\t\t\t\t// rotation: Math.atan2(a21, a11)\n\t\t\t\t// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))\n\t\t\t\t// rotationX: Math.atan2(a32, a33)\n\t\t\t\ta33 = 1;\n\t\t\t\ta13 = a23 = a31 = a32 = a41 = a42 = 0;\n\t\t\t\ta43 = (perspective) ? -1 / perspective : 0;\n\t\t\t\tzOrigin = t.zOrigin;\n\t\t\t\tmin = 0.000001; //threshold below which browsers use scientific notation which won't work.\n\t\t\t\tcomma = \",\";\n\t\t\t\tzero = \"0\";\n\t\t\t\tangle = rotationY * _DEG2RAD;\n\t\t\t\tif (angle) {\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\ta31 = -sin;\n\t\t\t\t\ta41 = a43*-sin;\n\t\t\t\t\ta13 = a11*sin;\n\t\t\t\t\ta23 = a21*sin;\n\t\t\t\t\ta33 = cos;\n\t\t\t\t\ta43 *= cos;\n\t\t\t\t\ta11 *= cos;\n\t\t\t\t\ta21 *= cos;\n\t\t\t\t}\n\t\t\t\tangle = rotationX * _DEG2RAD;\n\t\t\t\tif (angle) {\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\tt1 = a12*cos+a13*sin;\n\t\t\t\t\tt2 = a22*cos+a23*sin;\n\t\t\t\t\ta32 = a33*sin;\n\t\t\t\t\ta42 = a43*sin;\n\t\t\t\t\ta13 = a12*-sin+a13*cos;\n\t\t\t\t\ta23 = a22*-sin+a23*cos;\n\t\t\t\t\ta33 = a33*cos;\n\t\t\t\t\ta43 = a43*cos;\n\t\t\t\t\ta12 = t1;\n\t\t\t\t\ta22 = t2;\n\t\t\t\t}\n\t\t\t\tif (sz !== 1) {\n\t\t\t\t\ta13*=sz;\n\t\t\t\t\ta23*=sz;\n\t\t\t\t\ta33*=sz;\n\t\t\t\t\ta43*=sz;\n\t\t\t\t}\n\t\t\t\tif (sy !== 1) {\n\t\t\t\t\ta12*=sy;\n\t\t\t\t\ta22*=sy;\n\t\t\t\t\ta32*=sy;\n\t\t\t\t\ta42*=sy;\n\t\t\t\t}\n\t\t\t\tif (sx !== 1) {\n\t\t\t\t\ta11*=sx;\n\t\t\t\t\ta21*=sx;\n\t\t\t\t\ta31*=sx;\n\t\t\t\t\ta41*=sx;\n\t\t\t\t}\n\n\t\t\t\tif (zOrigin || isSVG) {\n\t\t\t\t\tif (zOrigin) {\n\t\t\t\t\t\tx += a13*-zOrigin;\n\t\t\t\t\t\ty += a23*-zOrigin;\n\t\t\t\t\t\tz += a33*-zOrigin+zOrigin;\n\t\t\t\t\t}\n\t\t\t\t\tif (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually\n\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t}\n\t\t\t\t\tif (x < min && x > -min) {\n\t\t\t\t\t\tx = zero;\n\t\t\t\t\t}\n\t\t\t\t\tif (y < min && y > -min) {\n\t\t\t\t\t\ty = zero;\n\t\t\t\t\t}\n\t\t\t\t\tif (z < min && z > -min) {\n\t\t\t\t\t\tz = 0; //don't use string because we calculate perspective later and need the number.\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:\n\t\t\t\ttransform = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix3d(\" : \"matrix3d(\");\n\t\t\t\ttransform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\n\t\t\t\ttransform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\n\t\t\t\tif (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)\n\t\t\t\t\ttransform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\n\t\t\t\t\ttransform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\n\t\t\t\t} else {\n\t\t\t\t\ttransform += \",0,0,0,0,1,0,\";\n\t\t\t\t}\n\t\t\t\ttransform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + \")\";\n\n\t\t\t\tstyle[_transformProp] = transform;\n\t\t\t};\n\n\t\tp = Transform.prototype;\n\t\tp.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;\n\t\tp.scaleX = p.scaleY = p.scaleZ = 1;\n\n\t\t_registerComplexSpecialProp(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\", {parser:function(t, e, parsingProp, cssp, pt, plugin, vars) {\n\t\t\tif (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.\n\t\t\tcssp._lastParsedTransform = vars;\n\t\t\tvar scaleFunc = (vars.scale && typeof(vars.scale) === \"function\") ? vars.scale : 0; //if there's a function-based \"scale\" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).\n\t\t\tif (scaleFunc) {\n\t\t\t\tvars.scale = scaleFunc(_index, t);\n\t\t\t}\n\t\t\tvar originalGSTransform = t._gsTransform,\n\t\t\t\tstyle = t.style,\n\t\t\t\tmin = 0.000001,\n\t\t\t\ti = _transformProps.length,\n\t\t\t\tv = vars,\n\t\t\t\tendRotations = {},\n\t\t\t\ttransformOriginString = \"transformOrigin\",\n\t\t\t\tm1 = _getTransform(t, _cs, true, v.parseTransform),\n\t\t\t\torig = v.transform && ((typeof(v.transform) === \"function\") ? v.transform(_index, _target) : v.transform),\n\t\t\t\tm2, copy, has3D, hasChange, dr, x, y, matrix, p;\n\t\t\tm1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;\n\t\t\tcssp._transform = m1;\n\t\t\tif (\"rotationZ\" in v) {\n\t\t\t\tv.rotation = v.rotationZ;\n\t\t\t}\n\t\t\tif (orig && typeof(orig) === \"string\" && _transformProp) { //for values like transform:\"rotate(60deg) scale(0.5, 0.8)\"\n\t\t\t\tcopy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.\n\t\t\t\tcopy[_transformProp] = orig;\n\t\t\t\tcopy.display = \"block\"; //if display is \"none\", the browser often refuses to report the transform properties correctly.\n\t\t\t\tcopy.position = \"absolute\";\n\t\t\t\tif (orig.indexOf(\"%\") !== -1) { //%-based translations will fail unless we set the width/height to match the original target...\n\t\t\t\t\tcopy.width = _getStyle(t, \"width\");\n\t\t\t\t\tcopy.height = _getStyle(t, \"height\");\n\t\t\t\t}\n\t\t\t\t_doc.body.appendChild(_tempDiv);\n\t\t\t\tm2 = _getTransform(_tempDiv, null, false);\n\t\t\t\tif (m1.skewType === \"simple\") { //the default _getTransform() reports the skewX/scaleY as if skewType is \"compensated\", thus we need to adjust that here if skewType is \"simple\".\n\t\t\t\t\tm2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);\n\t\t\t\t}\n\t\t\t\tif (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...\n\t\t\t\t\tx = m1.xOrigin;\n\t\t\t\t\ty = m1.yOrigin;\n\t\t\t\t\tm2.x -= m1.xOffset;\n\t\t\t\t\tm2.y -= m1.yOffset;\n\t\t\t\t\tif (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.\n\t\t\t\t\t\torig = {};\n\t\t\t\t\t\t_parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);\n\t\t\t\t\t\tx = orig.xOrigin;\n\t\t\t\t\t\ty = orig.yOrigin;\n\t\t\t\t\t\tm2.x -= orig.xOffset - m1.xOffset;\n\t\t\t\t\t\tm2.y -= orig.yOffset - m1.yOffset;\n\t\t\t\t\t}\n\t\t\t\t\tif (x || y) {\n\t\t\t\t\t\tmatrix = _getMatrix(_tempDiv, true);\n\t\t\t\t\t\tm2.x -= x - (x * matrix[0] + y * matrix[2]);\n\t\t\t\t\t\tm2.y -= y - (x * matrix[1] + y * matrix[3]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_doc.body.removeChild(_tempDiv);\n\t\t\t\tif (!m2.perspective) {\n\t\t\t\t\tm2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n\t\t\t\t}\n\t\t\t\tif (v.xPercent != null) {\n\t\t\t\t\tm2.xPercent = _parseVal(v.xPercent, m1.xPercent);\n\t\t\t\t}\n\t\t\t\tif (v.yPercent != null) {\n\t\t\t\t\tm2.yPercent = _parseVal(v.yPercent, m1.yPercent);\n\t\t\t\t}\n\t\t\t} else if (typeof(v) === \"object\") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)\n\t\t\t\tm2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),\n\t\t\t\t\tscaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),\n\t\t\t\t\tscaleZ:_parseVal(v.scaleZ, m1.scaleZ),\n\t\t\t\t\tx:_parseVal(v.x, m1.x),\n\t\t\t\t\ty:_parseVal(v.y, m1.y),\n\t\t\t\t\tz:_parseVal(v.z, m1.z),\n\t\t\t\t\txPercent:_parseVal(v.xPercent, m1.xPercent),\n\t\t\t\t\tyPercent:_parseVal(v.yPercent, m1.yPercent),\n\t\t\t\t\tperspective:_parseVal(v.transformPerspective, m1.perspective)};\n\t\t\t\tdr = v.directionalRotation;\n\t\t\t\tif (dr != null) {\n\t\t\t\t\tif (typeof(dr) === \"object\") {\n\t\t\t\t\t\tfor (copy in dr) {\n\t\t\t\t\t\t\tv[copy] = dr[copy];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv.rotation = dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (typeof(v.x) === \"string\" && v.x.indexOf(\"%\") !== -1) {\n\t\t\t\t\tm2.x = 0;\n\t\t\t\t\tm2.xPercent = _parseVal(v.x, m1.xPercent);\n\t\t\t\t}\n\t\t\t\tif (typeof(v.y) === \"string\" && v.y.indexOf(\"%\") !== -1) {\n\t\t\t\t\tm2.y = 0;\n\t\t\t\t\tm2.yPercent = _parseVal(v.y, m1.yPercent);\n\t\t\t\t}\n\n\t\t\t\tm2.rotation = _parseAngle((\"rotation\" in v) ? v.rotation : (\"shortRotation\" in v) ? v.shortRotation + \"_short\" : m1.rotation, m1.rotation, \"rotation\", endRotations);\n\t\t\t\tif (_supports3D) {\n\t\t\t\t\tm2.rotationX = _parseAngle((\"rotationX\" in v) ? v.rotationX : (\"shortRotationX\" in v) ? v.shortRotationX + \"_short\" : m1.rotationX || 0, m1.rotationX, \"rotationX\", endRotations);\n\t\t\t\t\tm2.rotationY = _parseAngle((\"rotationY\" in v) ? v.rotationY : (\"shortRotationY\" in v) ? v.shortRotationY + \"_short\" : m1.rotationY || 0, m1.rotationY, \"rotationY\", endRotations);\n\t\t\t\t}\n\t\t\t\tm2.skewX = _parseAngle(v.skewX, m1.skewX);\n\t\t\t\tm2.skewY = _parseAngle(v.skewY, m1.skewY);\n\t\t\t}\n\t\t\tif (_supports3D && v.force3D != null) {\n\t\t\t\tm1.force3D = v.force3D;\n\t\t\t\thasChange = true;\n\t\t\t}\n\n\t\t\thas3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);\n\t\t\tif (!has3D && v.scale != null) {\n\t\t\t\tm2.scaleZ = 1; //no need to tween scaleZ.\n\t\t\t}\n\n\t\t\twhile (--i > -1) {\n\t\t\t\tp = _transformProps[i];\n\t\t\t\torig = m2[p] - m1[p];\n\t\t\t\tif (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {\n\t\t\t\t\thasChange = true;\n\t\t\t\t\tpt = new CSSPropTween(m1, p, m1[p], orig, pt);\n\t\t\t\t\tif (p in endRotations) {\n\t\t\t\t\t\tpt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested\n\t\t\t\t\t}\n\t\t\t\t\tpt.xs0 = 0; //ensures the value stays numeric in setRatio()\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torig = (typeof(v.transformOrigin) === \"function\") ? v.transformOrigin(_index, _target) : v.transformOrigin;\n\t\t\tif (m1.svg && (orig || v.svgOrigin)) {\n\t\t\t\tx = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin\n\t\t\t\ty = m1.yOffset;\n\t\t\t\t_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);\n\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOrigin\", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to(\"#wheel\", 3, {rotation:180, transformOrigin:\"50% 50%\", delay:1}); TweenLite.fromTo(\"#wheel\", 3, {scale:0.5, transformOrigin:\"50% 50%\"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.\n\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOrigin\", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);\n\t\t\t\tif (x !== m1.xOffset || y !== m1.yOffset) {\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOffset\", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOffset\", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);\n\t\t\t\t}\n\t\t\t\torig = \"0px 0px\"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin\n\t\t\t}\n\t\t\tif (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a \"transformOrigin\" in this particular tween (maybe they did it via css directly).\n\t\t\t\tif (_transformProp) {\n\t\t\t\t\thasChange = true;\n\t\t\t\t\tp = _transformOriginProp;\n\t\t\t\t\tif (!orig) {\n\t\t\t\t\t\torig = (_getStyle(t, p, _cs, false, \"50% 50%\") + \"\").split(\" \");\n\t\t\t\t\t\torig = orig[0] + \" \" + orig[1] + \" \" + m1.zOrigin + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\torig += \"\";\n\t\t\t\t\tpt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);\n\t\t\t\t\tpt.b = style[p];\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\tcopy = m1.zOrigin;\n\t\t\t\t\t\torig = orig.split(\" \");\n\t\t\t\t\t\tm1.zOrigin = ((orig.length > 2) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.\n\t\t\t\t\t\tpt.xs0 = pt.e = orig[0] + \" \" + (orig[1] || \"50%\") + \" 0px\"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!\n\t\t\t\t\t\tpt = new CSSPropTween(m1, \"zOrigin\", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)\n\t\t\t\t\t\tpt.b = copy;\n\t\t\t\t\t\tpt.xs0 = pt.e = m1.zOrigin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.xs0 = pt.e = orig;\n\t\t\t\t\t}\n\n\t\t\t\t\t//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).\n\t\t\t\t} else {\n\t\t\t\t\t_parsePosition(orig + \"\", m1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasChange) {\n\t\t\t\tcssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();\n\t\t\t}\n\t\t\tif (scaleFunc) {\n\t\t\t\tvars.scale = scaleFunc;\n\t\t\t}\n\t\t\treturn pt;\n\t\t}, allowFunc:true, prefix:true});\n\n\t\t_registerComplexSpecialProp(\"boxShadow\", {defaultValue:\"0px 0px 0px 0px #999\", prefix:true, color:true, multi:true, keyword:\"inset\"});\n\t\t_registerComplexSpecialProp(\"clipPath\", {defaultValue:\"inset(0%)\", prefix:true, multi:true, formatter:_getFormatter(\"inset(0% 0% 0% 0%)\", false, true)});\n\n\t\t_registerComplexSpecialProp(\"borderRadius\", {defaultValue:\"0px\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\te = this.format(e);\n\t\t\tvar props = [\"borderTopLeftRadius\",\"borderTopRightRadius\",\"borderBottomRightRadius\",\"borderBottomLeftRadius\"],\n\t\t\t\tstyle = t.style,\n\t\t\t\tea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;\n\t\t\tw = parseFloat(t.offsetWidth);\n\t\t\th = parseFloat(t.offsetHeight);\n\t\t\tea1 = e.split(\" \");\n\t\t\tfor (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!\n\t\t\t\tif (this.p.indexOf(\"border\")) { //older browsers used a prefix\n\t\t\t\t\tprops[i] = _checkPropPrefix(props[i]);\n\t\t\t\t}\n\t\t\t\tbs = bs2 = _getStyle(t, props[i], _cs, false, \"0px\");\n\t\t\t\tif (bs.indexOf(\" \") !== -1) {\n\t\t\t\t\tbs2 = bs.split(\" \");\n\t\t\t\t\tbs = bs2[0];\n\t\t\t\t\tbs2 = bs2[1];\n\t\t\t\t}\n\t\t\t\tes = es2 = ea1[i];\n\t\t\t\tbn = parseFloat(bs);\n\t\t\t\tbsfx = bs.substr((bn + \"\").length);\n\t\t\t\trel = (es.charAt(1) === \"=\");\n\t\t\t\tif (rel) {\n\t\t\t\t\ten = parseInt(es.charAt(0)+\"1\", 10);\n\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\tesfx = es.substr((en + \"\").length - (en < 0 ? 1 : 0)) || \"\";\n\t\t\t\t} else {\n\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\tesfx = es.substr((en + \"\").length);\n\t\t\t\t}\n\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\tesfx = _suffixMap[p] || bsfx;\n\t\t\t\t}\n\t\t\t\tif (esfx !== bsfx) {\n\t\t\t\t\thn = _convertToPixels(t, \"borderLeft\", bn, bsfx); //horizontal number (we use a bogus \"borderLeft\" property just because the _convertToPixels() method searches for the keywords \"Left\", \"Right\", \"Top\", and \"Bottom\" to determine of it's a horizontal or vertical property, and we need \"border\" in the name so that it knows it should measure relative to the element itself, not its parent.\n\t\t\t\t\tvn = _convertToPixels(t, \"borderTop\", bn, bsfx); //vertical number\n\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\tbs = (hn / w * 100) + \"%\";\n\t\t\t\t\t\tbs2 = (vn / h * 100) + \"%\";\n\t\t\t\t\t} else if (esfx === \"em\") {\n\t\t\t\t\t\tem = _convertToPixels(t, \"borderLeft\", 1, \"em\");\n\t\t\t\t\t\tbs = (hn / em) + \"em\";\n\t\t\t\t\t\tbs2 = (vn / em) + \"em\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbs = hn + \"px\";\n\t\t\t\t\t\tbs2 = vn + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif (rel) {\n\t\t\t\t\t\tes = (parseFloat(bs) + en) + esfx;\n\t\t\t\t\t\tes2 = (parseFloat(bs2) + en) + esfx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = _parseComplex(style, props[i], bs + \" \" + bs2, es + \" \" + es2, false, \"0px\", pt);\n\t\t\t}\n\t\t\treturn pt;\n\t\t}, prefix:true, formatter:_getFormatter(\"0px 0px 0px 0px\", false, true)});\n\t\t_registerComplexSpecialProp(\"borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius\", {defaultValue:\"0px\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\treturn _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, \"0px 0px\")), this.format(e), false, \"0px\", pt);\n\t\t}, prefix:true, formatter:_getFormatter(\"0px 0px\", false, true)});\n\t\t_registerComplexSpecialProp(\"backgroundPosition\", {defaultValue:\"0 0\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar bp = \"background-position\",\n\t\t\t\tcs = (_cs || _getComputedStyle(t, null)),\n\t\t\t\tbs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + \"-x\") + \" \" + cs.getPropertyValue(bp + \"-y\") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + \" \" + t.currentStyle.backgroundPositionY) || \"0 0\"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase\n\t\t\t\tes = this.format(e),\n\t\t\t\tba, ea, i, pct, overlap, src;\n\t\t\tif ((bs.indexOf(\"%\") !== -1) !== (es.indexOf(\"%\") !== -1) && es.split(\",\").length < 2) {\n\t\t\t\tsrc = _getStyle(t, \"backgroundImage\").replace(_urlExp, \"\");\n\t\t\t\tif (src && src !== \"none\") {\n\t\t\t\t\tba = bs.split(\" \");\n\t\t\t\t\tea = es.split(\" \");\n\t\t\t\t\t_tempImg.setAttribute(\"src\", src); //set the temp IMG's src to the background-image so that we can measure its width/height\n\t\t\t\t\ti = 2;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tbs = ba[i];\n\t\t\t\t\t\tpct = (bs.indexOf(\"%\") !== -1);\n\t\t\t\t\t\tif (pct !== (ea[i].indexOf(\"%\") !== -1)) {\n\t\t\t\t\t\t\toverlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;\n\t\t\t\t\t\t\tba[i] = pct ? (parseFloat(bs) / 100 * overlap) + \"px\" : (parseFloat(bs) / overlap * 100) + \"%\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbs = ba.join(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, bs, es, pt, plugin);\n\t\t}, formatter:_parsePosition});\n\t\t_registerComplexSpecialProp(\"backgroundSize\", {defaultValue:\"0 0\", formatter:function(v) {\n\t\t\tv += \"\"; //ensure it's a string\n\t\t\treturn (v.substr(0,2) === \"co\") ? v : _parsePosition(v.indexOf(\" \") === -1 ? v + \" \" + v : v); //if set to something like \"100% 100%\", Safari typically reports the computed style as just \"100%\" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as \"100% 0\" (wrong). Also remember that it could be \"cover\" or \"contain\" which we can't tween but should be able to set.\n\t\t}});\n\t\t_registerComplexSpecialProp(\"perspective\", {defaultValue:\"0px\", prefix:true});\n\t\t_registerComplexSpecialProp(\"perspectiveOrigin\", {defaultValue:\"50% 50%\", prefix:true});\n\t\t_registerComplexSpecialProp(\"transformStyle\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"backfaceVisibility\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"userSelect\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"margin\", {parser:_getEdgeParser(\"marginTop,marginRight,marginBottom,marginLeft\")});\n\t\t_registerComplexSpecialProp(\"padding\", {parser:_getEdgeParser(\"paddingTop,paddingRight,paddingBottom,paddingLeft\")});\n\t\t_registerComplexSpecialProp(\"clip\", {defaultValue:\"rect(0px,0px,0px,0px)\", parser:function(t, e, p, cssp, pt, plugin){\n\t\t\tvar b, cs, delim;\n\t\t\tif (_ieVers < 9) { //IE8 and earlier don't report a \"clip\" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.\n\t\t\t\tcs = t.currentStyle;\n\t\t\t\tdelim = _ieVers < 8 ? \" \" : \",\";\n\t\t\t\tb = \"rect(\" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + \")\";\n\t\t\t\te = this.format(e).split(\",\").join(delim);\n\t\t\t} else {\n\t\t\t\tb = this.format(_getStyle(t, this.p, _cs, false, this.dflt));\n\t\t\t\te = this.format(e);\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, b, e, pt, plugin);\n\t\t}});\n\t\t_registerComplexSpecialProp(\"textShadow\", {defaultValue:\"0px 0px 0px #999\", color:true, multi:true});\n\t\t_registerComplexSpecialProp(\"autoRound,strictUnits\", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)\n\t\t_registerComplexSpecialProp(\"border\", {defaultValue:\"0px solid #000\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar bw = _getStyle(t, \"borderTopWidth\", _cs, false, \"0px\"),\n\t\t\t\tend = this.format(e).split(\" \"),\n\t\t\t\tesfx = end[0].replace(_suffixExp, \"\");\n\t\t\tif (esfx !== \"px\") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.\n\t\t\t\tbw = (parseFloat(bw) / _convertToPixels(t, \"borderTopWidth\", 1, esfx)) + esfx;\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, this.format(bw + \" \" + _getStyle(t, \"borderTopStyle\", _cs, false, \"solid\") + \" \" + _getStyle(t, \"borderTopColor\", _cs, false, \"#000\")), end.join(\" \"), pt, plugin);\n\t\t\t}, color:true, formatter:function(v) {\n\t\t\t\tvar a = v.split(\" \");\n\t\t\t\treturn a[0] + \" \" + (a[1] || \"solid\") + \" \" + (v.match(_colorExp) || [\"#000\"])[0];\n\t\t\t}});\n\t\t_registerComplexSpecialProp(\"borderWidth\", {parser:_getEdgeParser(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).\n\t\t_registerComplexSpecialProp(\"float,cssFloat,styleFloat\", {parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar s = t.style,\n\t\t\t\tprop = (\"cssFloat\" in s) ? \"cssFloat\" : \"styleFloat\";\n\t\t\treturn new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);\n\t\t}});\n\n\t\t//opacity-related\n\t\tvar _setIEOpacityRatio = function(v) {\n\t\t\t\tvar t = this.t, //refers to the element's style property\n\t\t\t\t\tfilters = t.filter || _getStyle(this.data, \"filter\") || \"\",\n\t\t\t\t\tval = (this.s + this.c * v) | 0,\n\t\t\t\t\tskip;\n\t\t\t\tif (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.\n\t\t\t\t\tif (filters.indexOf(\"atrix(\") === -1 && filters.indexOf(\"radient(\") === -1 && filters.indexOf(\"oader(\") === -1) {\n\t\t\t\t\t\tt.removeAttribute(\"filter\");\n\t\t\t\t\t\tskip = (!_getStyle(this.data, \"filter\")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt.filter = filters.replace(_alphaFilterExp, \"\");\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skip) {\n\t\t\t\t\tif (this.xn1) {\n\t\t\t\t\t\tt.filter = filters = filters || (\"alpha(opacity=\" + val + \")\"); //works around bug in IE7/8 that prevents changes to \"visibility\" from being applied properly if the filter is changed to a different alpha on the same frame.\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.indexOf(\"pacity\") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the \"O\" to avoid case-sensitivity issues\n\t\t\t\t\t\tif (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as \"visibility\" changes (this.xn1 is 1 if this tween is an \"autoAlpha\" tween)\n\t\t\t\t\t\t\tt.filter = filters + \" alpha(opacity=\" + val + \")\"; //we round the value because otherwise, bugs in IE7/8 can prevent \"visibility\" changes from being applied properly.\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt.filter = filters.replace(_opacityExp, \"opacity=\" + val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t_registerComplexSpecialProp(\"opacity,alpha,autoAlpha\", {defaultValue:\"1\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar b = parseFloat(_getStyle(t, \"opacity\", _cs, false, \"1\")),\n\t\t\t\tstyle = t.style,\n\t\t\t\tisAutoAlpha = (p === \"autoAlpha\");\n\t\t\tif (typeof(e) === \"string\" && e.charAt(1) === \"=\") {\n\t\t\t\te = ((e.charAt(0) === \"-\") ? -1 : 1) * parseFloat(e.substr(2)) + b;\n\t\t\t}\n\t\t\tif (isAutoAlpha && b === 1 && _getStyle(t, \"visibility\", _cs) === \"hidden\" && e !== 0) { //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t\tif (_supportsOpacity) {\n\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b, e - b, pt);\n\t\t\t} else {\n\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b * 100, (e - b) * 100, pt);\n\t\t\t\tpt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to \"visibility\" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.\n\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\tpt.type = 2;\n\t\t\t\tpt.b = \"alpha(opacity=\" + pt.s + \")\";\n\t\t\t\tpt.e = \"alpha(opacity=\" + (pt.s + pt.c) + \")\";\n\t\t\t\tpt.data = t;\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = _setIEOpacityRatio;\n\t\t\t}\n\t\t\tif (isAutoAlpha) { //we have to create the \"visibility\" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier\n\t\t\t\tpt = new CSSPropTween(style, \"visibility\", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? \"inherit\" : \"hidden\"), ((e === 0) ? \"hidden\" : \"inherit\"));\n\t\t\t\tpt.xs0 = \"inherit\";\n\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\tcssp._overwriteProps.push(p);\n\t\t\t}\n\t\t\treturn pt;\n\t\t}});\n\n\n\t\tvar _removeProp = function(s, p) {\n\t\t\t\tif (p) {\n\t\t\t\t\tif (s.removeProperty) {\n\t\t\t\t\t\tif (p.substr(0,2) === \"ms\" || p.substr(0,6) === \"webkit\") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n\t\t\t\t\t\t\tp = \"-\" + p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t\t} else { //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n\t\t\t\t\t\ts.removeAttribute(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t_setClassNameRatio = function(v) {\n\t\t\t\tthis.t._gsClassPT = this;\n\t\t\t\tif (v === 1 || v === 0) {\n\t\t\t\t\tthis.t.setAttribute(\"class\", (v === 0) ? this.b : this.e);\n\t\t\t\t\tvar mpt = this.data, //first MiniPropTween\n\t\t\t\t\t\ts = this.t.style;\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tif (!mpt.v) {\n\t\t\t\t\t\t\t_removeProp(s, mpt.p);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts[mpt.p] = mpt.v;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t\tif (v === 1 && this.t._gsClassPT === this) {\n\t\t\t\t\t\tthis.t._gsClassPT = null;\n\t\t\t\t\t}\n\t\t\t\t} else if (this.t.getAttribute(\"class\") !== this.e) {\n\t\t\t\t\tthis.t.setAttribute(\"class\", this.e);\n\t\t\t\t}\n\t\t\t};\n\t\t_registerComplexSpecialProp(\"className\", {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\tvar b = t.getAttribute(\"class\") || \"\", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute(\"class\") and setAttribute(\"class\", value\") is more reliable.\n\t\t\t\tcssText = t.style.cssText,\n\t\t\t\tdifData, bs, cnpt, cnptLookup, mpt;\n\t\t\tpt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\tpt.setRatio = _setClassNameRatio;\n\t\t\tpt.pr = -11;\n\t\t\t_hasPriority = true;\n\t\t\tpt.b = b;\n\t\t\tbs = _getAllStyles(t, _cs);\n\t\t\t//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)\n\t\t\tcnpt = t._gsClassPT;\n\t\t\tif (cnpt) {\n\t\t\t\tcnptLookup = {};\n\t\t\t\tmpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tcnptLookup[mpt.p] = 1;\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tcnpt.setRatio(1);\n\t\t\t}\n\t\t\tt._gsClassPT = pt;\n\t\t\tpt.e = (e.charAt(1) !== \"=\") ? e : b.replace(new RegExp(\"(?:\\\\s|^)\" + e.substr(2) + \"(?![\\\\w-])\"), \"\") + ((e.charAt(0) === \"+\") ? \" \" + e.substr(2) : \"\");\n\t\t\tt.setAttribute(\"class\", pt.e);\n\t\t\tdifData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);\n\t\t\tt.setAttribute(\"class\", b);\n\t\t\tpt.data = difData.firstMPT;\n\t\t\tif (t.style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.\n\t\t\t\tt.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n\t\t\t}\n\t\t\tpt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if \"className\" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)\n\t\t\treturn pt;\n\t\t}});\n\n\n\t\tvar _setClearPropsRatio = function(v) {\n\t\t\tif (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== \"isFromStart\") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).\n\t\t\t\tvar s = this.t.style,\n\t\t\t\t\ttransformParse = _specialProps.transform.parse,\n\t\t\t\t\ta, p, i, clearTransform, transform;\n\t\t\t\tif (this.e === \"all\") {\n\t\t\t\t\ts.cssText = \"\";\n\t\t\t\t\tclearTransform = true;\n\t\t\t\t} else {\n\t\t\t\t\ta = this.e.split(\" \").join(\"\").split(\",\");\n\t\t\t\t\ti = a.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = a[i];\n\t\t\t\t\t\tif (_specialProps[p]) {\n\t\t\t\t\t\t\tif (_specialProps[p].parse === transformParse) {\n\t\t\t\t\t\t\t\tclearTransform = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tp = (p === \"transformOrigin\") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like \"scaleX\" might be \"-webkit-transform\" or \"boxShadow\" might be \"-moz-box-shadow\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeProp(s, p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (clearTransform) {\n\t\t\t\t\t_removeProp(s, _transformProp);\n\t\t\t\t\ttransform = this.t._gsTransform;\n\t\t\t\t\tif (transform) {\n\t\t\t\t\t\tif (transform.svg) {\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"data-svg-origin\");\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"transform\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this.t._gsTransform;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\t_registerComplexSpecialProp(\"clearProps\", {parser:function(t, e, p, cssp, pt) {\n\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\tpt.setRatio = _setClearPropsRatio;\n\t\t\tpt.e = e;\n\t\t\tpt.pr = -10;\n\t\t\tpt.data = cssp._tween;\n\t\t\t_hasPriority = true;\n\t\t\treturn pt;\n\t\t}});\n\n\t\tp = \"bezier,throwProps,physicsProps,physics2D\".split(\",\");\n\t\ti = p.length;\n\t\twhile (i--) {\n\t\t\t_registerPluginProp(p[i]);\n\t\t}\n\n\n\n\n\n\n\n\n\t\tp = CSSPlugin.prototype;\n\t\tp._firstPT = p._lastParsedTransform = p._transform = null;\n\n\t\t//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.\n\t\tp._onInitTween = function(target, vars, tween, index) {\n\t\t\tif (!target.nodeType) { //css is only for dom elements\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._target = _target = target;\n\t\t\tthis._tween = tween;\n\t\t\tthis._vars = vars;\n\t\t\t_index = index;\n\t\t\t_autoRound = vars.autoRound;\n\t\t\t_hasPriority = false;\n\t\t\t_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;\n\t\t\t_cs = _getComputedStyle(target, \"\");\n\t\t\t_overwriteProps = this._overwriteProps;\n\t\t\tvar style = target.style,\n\t\t\t\tv, pt, pt2, first, last, next, zIndex, tpt, threeD;\n\t\t\tif (_reqSafariFix) if (style.zIndex === \"\") {\n\t\t\t\tv = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\tif (v === \"auto\" || v === \"\") {\n\t\t\t\t\t//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using \"left\" or \"top\" instead of transforms like \"x\" and \"y\") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.\n\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(vars) === \"string\") {\n\t\t\t\tfirst = style.cssText;\n\t\t\t\tv = _getAllStyles(target, _cs);\n\t\t\t\tstyle.cssText = first + \";\" + vars;\n\t\t\t\tv = _cssDif(target, v, _getAllStyles(target)).difs;\n\t\t\t\tif (!_supportsOpacity && _opacityValExp.test(vars)) {\n\t\t\t\t\tv.opacity = parseFloat( RegExp.$1 );\n\t\t\t\t}\n\t\t\t\tvars = v;\n\t\t\t\tstyle.cssText = first;\n\t\t\t}\n\n\t\t\tif (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:\"myClass\", scale:0.5, left:20} would work.\n\t\t\t\tthis._firstPT = pt = _specialProps.className.parse(target, vars.className, \"className\", this, null, null, vars);\n\t\t\t} else {\n\t\t\t\tthis._firstPT = pt = this.parse(target, vars, null);\n\t\t\t}\n\n\t\t\tif (this._transformType) {\n\t\t\t\tthreeD = (this._transformType === 3);\n\t\t\t\tif (!_transformProp) {\n\t\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\t} else if (_isSafari) {\n\t\t\t\t\t_reqSafariFix = true;\n\t\t\t\t\t//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).\n\t\t\t\t\tif (style.zIndex === \"\") {\n\t\t\t\t\t\tzIndex = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\t\t\tif (zIndex === \"auto\" || zIndex === \"\") {\n\t\t\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//Setting WebkitBackfaceVisibility corrects 3 bugs:\n\t\t\t\t\t// 1) [non-Android] Safari skips rendering changes to \"top\" and \"left\" that are made on the same frame/render as a transform update.\n\t\t\t\t\t// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly.\n\t\t\t\t\t// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.\n\t\t\t\t\t//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.\n\t\t\t\t\tif (_isSafariLT6) {\n\t\t\t\t\t\tthis._addLazySet(style, \"WebkitBackfaceVisibility\", this._vars.WebkitBackfaceVisibility || (threeD ? \"visible\" : \"hidden\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt2 = pt;\n\t\t\t\twhile (pt2 && pt2._next) {\n\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t}\n\t\t\t\ttpt = new CSSPropTween(target, \"transform\", 0, 0, null, 2);\n\t\t\t\tthis._linkCSSP(tpt, null, pt2);\n\t\t\t\ttpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;\n\t\t\t\ttpt.data = this._transform || _getTransform(target, _cs, true);\n\t\t\t\ttpt.tween = tween;\n\t\t\t\ttpt.pr = -1; //ensures that the transforms get applied after the components are updated.\n\t\t\t\t_overwriteProps.pop(); //we don't want to force the overwrite of all \"transform\" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.\n\t\t\t}\n\n\t\t\tif (_hasPriority) {\n\t\t\t\t//reorders the linked list in order of pr (priority)\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tthis._firstPT = first;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\n\t\tp.parse = function(target, vars, pt, plugin) {\n\t\t\tvar style = target.style,\n\t\t\t\tp, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;\n\t\t\tfor (p in vars) {\n\t\t\t\tes = vars[p]; //ending value string\n\t\t\t\tsp = _specialProps[p]; //SpecialProp lookup.\n\t\t\t\tif (typeof(es) === \"function\" && !(sp && sp.allowFunc)) {\n\t\t\t\t\tes = es(_index, _target);\n\t\t\t\t}\n\t\t\t\tif (sp) {\n\t\t\t\t\tpt = sp.parse(target, es, p, this, pt, plugin, vars);\n\t\t\t\t} else if (p.substr(0,2) === \"--\") { //for tweening CSS variables (which always start with \"--\"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.\n\t\t\t\t\tthis._tween._propLookup[p] = this._addTween.call(this._tween, target.style, \"setProperty\", _getComputedStyle(target).getPropertyValue(p) + \"\", es + \"\", p, false, p);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tbs = _getStyle(target, p, _cs) + \"\";\n\t\t\t\t\tisStr = (typeof(es) === \"string\");\n\t\t\t\t\tif (p === \"color\" || p === \"fill\" || p === \"stroke\" || p.indexOf(\"Color\") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:\n\t\t\t\t\t\tif (!isStr) {\n\t\t\t\t\t\t\tes = _parseColor(es);\n\t\t\t\t\t\t\tes = ((es.length > 3) ? \"rgba(\" : \"rgb(\") + es.join(\",\") + \")\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, \"transparent\", pt, 0, plugin);\n\n\t\t\t\t\t} else if (isStr && _complexExp.test(es)) {\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbn = parseFloat(bs);\n\t\t\t\t\t\tbsfx = (bn || bn === 0) ? bs.substr((bn + \"\").length) : \"\"; //remember, bs could be non-numeric like \"normal\" for fontWeight, so we should default to a blank suffix in that case.\n\n\t\t\t\t\t\tif (bs === \"\" || bs === \"auto\") {\n\t\t\t\t\t\t\tif (p === \"width\" || p === \"height\") {\n\t\t\t\t\t\t\t\tbn = _getDimension(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else if (p === \"left\" || p === \"top\") {\n\t\t\t\t\t\t\t\tbn = _calculateOffset(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbn = (p !== \"opacity\") ? 0 : 1;\n\t\t\t\t\t\t\t\tbsfx = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trel = (isStr && es.charAt(1) === \"=\");\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten = parseInt(es.charAt(0) + \"1\", 10);\n\t\t\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\t\t\tesfx = es.replace(_suffixExp, \"\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\t\t\tesfx = isStr ? es.replace(_suffixExp, \"\") : \"\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\t\t\tesfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tes = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.\n\t\t\t\t\t\t//if the beginning/ending suffixes don't match, normalize them...\n\t\t\t\t\t\tif (bsfx !== esfx) if (esfx !== \"\" || p === \"lineHeight\") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!\n\t\t\t\t\t\t\tbn = _convertToPixels(target, p, bn, bsfx);\n\t\t\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 100, \"%\") / 100;\n\t\t\t\t\t\t\t\tif (vars.strictUnits !== true) { //some browsers report only \"px\" values instead of allowing \"%\" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.\n\t\t\t\t\t\t\t\t\tbs = bn + \"%\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else if (esfx === \"em\" || esfx === \"rem\" || esfx === \"vw\" || esfx === \"vh\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 1, esfx);\n\n\t\t\t\t\t\t\t//otherwise convert to pixels.\n\t\t\t\t\t\t\t} else if (esfx !== \"px\") {\n\t\t\t\t\t\t\t\ten = _convertToPixels(target, p, en, esfx);\n\t\t\t\t\t\t\t\tesfx = \"px\"; //we don't use bsfx after this, so we don't need to set it to px too.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rel) if (en || en === 0) {\n\t\t\t\t\t\t\t\tes = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten += bn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === \"px\" || p === \"zIndex\")), 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = esfx;\n\t\t\t\t\t\t\t//DEBUG: _log(\"tween \"+p+\" from \"+pt.b+\" (\"+bn+esfx+\") to \"+pt.e+\" with suffix: \"+pt.xs0);\n\t\t\t\t\t\t} else if (style[p] === undefined || !es && (es + \"\" === \"NaN\" || es == null)) {\n\t\t\t\t\t\t\t_log(\"invalid \" + p + \" tween value: \" + vars[p]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = (es === \"none\" && (p === \"display\" || p.indexOf(\"Style\") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for \"display\" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.\n\t\t\t\t\t\t\t//DEBUG: _log(\"non-tweening value \"+p+\": \"+pt.xs0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (plugin) if (pt && !pt.plugin) {\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\n\t\t//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.\n\t\tp.setRatio = function(v) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tmin = 0.000001,\n\t\t\t\tval, str, i;\n\t\t\t//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like \"position\" or \"float\" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).\n\t\t\tif (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tif (pt.r && pt.type !== -1) {\n\t\t\t\t\t\t\tval = pt.r(pt.s + pt.c);\n\t\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t\t\t} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.e;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = pt.c * v + pt.s;\n\t\t\t\t\tif (pt.r) {\n\t\t\t\t\t\tval = pt.r(val);\n\t\t\t\t\t} else if (val < min) if (val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\tif (i === 2) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;\n\t\t\t\t\t\t} else if (i === 3) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;\n\t\t\t\t\t\t} else if (i === 4) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;\n\t\t\t\t\t\t} else if (i === 5) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (pt.type === -1) { //non-tweening value\n\t\t\t\t\t\tpt.t[pt.p] = pt.xs0;\n\n\t\t\t\t\t} else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).\n\t\t\t} else {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tpt.t[pt.p] = pt.b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @private\n\t\t * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.\n\t\t * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked\n\t\t * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call\n\t\t * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin\n\t\t * doesn't have any transform-related properties of its own. You can call this method as many times as you\n\t\t * want and it won't create duplicate CSSPropTweens.\n\t\t *\n\t\t * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)\n\t\t */\n\t\tp._enableTransforms = function(threeD) {\n\t\t\tthis._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.\n\t\t\tthis._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;\n\t\t};\n\n\t\tvar lazySet = function(v) {\n\t\t\tthis.t[this.p] = this.e;\n\t\t\tthis.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.\n\t\t};\n\t\t/** @private Gives us a way to set a value on the first render (and only the first render). **/\n\t\tp._addLazySet = function(t, p, v) {\n\t\t\tvar pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);\n\t\t\tpt.e = v;\n\t\t\tpt.setRatio = lazySet;\n\t\t\tpt.data = this;\n\t\t};\n\n\t\t/** @private **/\n\t\tp._linkCSSP = function(pt, next, prev, remove) {\n\t\t\tif (pt) {\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = pt;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t}\n\t\t\t\tif (pt._prev) {\n\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\tremove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)\n\t\t\t\t}\n\t\t\t\tif (prev) {\n\t\t\t\t\tprev._next = pt;\n\t\t\t\t} else if (!remove && this._firstPT === null) {\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t}\n\t\t\t\tpt._next = next;\n\t\t\t\tpt._prev = prev;\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\t\tp._mod = function(lookup) {\n\t\t\tvar pt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (typeof(lookup[pt.p]) === \"function\") { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging \"r\" as an indicator that the value should be rounded internally.\n\t\t\t\t\tpt.r = lookup[pt.p];\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\t//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the \"visibility\" property.\n\t\tp._kill = function(lookup) {\n\t\t\tvar copy = lookup,\n\t\t\t\tpt, p, xfirst;\n\t\t\tif (lookup.autoAlpha || lookup.alpha) {\n\t\t\t\tcopy = {};\n\t\t\t\tfor (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.\n\t\t\t\t\tcopy[p] = lookup[p];\n\t\t\t\t}\n\t\t\t\tcopy.opacity = 1;\n\t\t\t\tif (copy.autoAlpha) {\n\t\t\t\t\tcopy.visibility = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's \"xfirst\".\n\t\t\t\txfirst = pt.xfirst;\n\t\t\t\tif (xfirst && xfirst._prev) {\n\t\t\t\t\tthis._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev\n\t\t\t\t} else if (xfirst === this._firstPT) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tthis._linkCSSP(pt._next, pt._next._next, xfirst._prev);\n\t\t\t\t}\n\t\t\t\tthis._classNamePT = null;\n\t\t\t}\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.\n\t\t\t\t\tpt.plugin._kill(lookup);\n\t\t\t\t\tp = pt.plugin;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn TweenPlugin.prototype._kill.call(this, copy);\n\t\t};\n\n\n\n\t\t//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.\n\t\tvar _getChildStyles = function(e, props, targets) {\n\t\t\t\tvar children, i, child, type;\n\t\t\t\tif (e.slice) {\n\t\t\t\t\ti = e.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t_getChildStyles(e[i], props, targets);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tchildren = e.childNodes;\n\t\t\t\ti = children.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tchild = children[i];\n\t\t\t\t\ttype = child.type;\n\t\t\t\t\tif (child.style) {\n\t\t\t\t\t\tprops.push(_getAllStyles(child));\n\t\t\t\t\t\tif (targets) {\n\t\t\t\t\t\t\ttargets.push(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {\n\t\t\t\t\t\t_getChildStyles(child, props, targets);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t/**\n\t\t * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite\n\t\t * and then compares the style properties of all the target's child elements at the tween's start and end, and\n\t\t * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting\n\t\t * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is\n\t\t * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens\n\t\t * is because it creates entirely new tweens that may have completely different targets than the original tween,\n\t\t * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API\n\t\t * and it would create other problems. For example:\n\t\t *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)\n\t\t *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.\n\t\t *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.\n\t\t *\n\t\t * @param {Object} target object to be tweened\n\t\t * @param {number} Duration in seconds (or frames for frames-based tweens)\n\t\t * @param {Object} Object containing the end values, like {className:\"newClass\", ease:Linear.easeNone}\n\t\t * @return {Array} An array of TweenLite instances\n\t\t */\n\t\tCSSPlugin.cascadeTo = function(target, duration, vars) {\n\t\t\tvar tween = TweenLite.to(target, duration, vars),\n\t\t\t\tresults = [tween],\n\t\t\t\tb = [],\n\t\t\t\te = [],\n\t\t\t\ttargets = [],\n\t\t\t\t_reservedProps = TweenLite._internals.reservedProps,\n\t\t\t\ti, difs, p, from;\n\t\t\ttarget = tween._targets || tween.target;\n\t\t\t_getChildStyles(target, b, targets);\n\t\t\ttween.render(duration, true, true);\n\t\t\t_getChildStyles(target, e);\n\t\t\ttween.render(0, true, true);\n\t\t\ttween._enabled(true);\n\t\t\ti = targets.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tdifs = _cssDif(targets[i], b[i], e[i]);\n\t\t\t\tif (difs.firstMPT) {\n\t\t\t\t\tdifs = difs.difs;\n\t\t\t\t\tfor (p in vars) {\n\t\t\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfrom = {};\n\t\t\t\t\tfor (p in difs) {\n\t\t\t\t\t\tfrom[p] = b[i][p];\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(TweenLite.fromTo(targets[i], duration, from, difs));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tTweenPlugin.activate([CSSPlugin]);\n\t\treturn CSSPlugin;\n\n\t}, true);\n\nexport var CSSPlugin = globals.CSSPlugin;\nexport { CSSPlugin as default };","/*!\n * VERSION: 0.3.1\n * DATE: 2018-08-27\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\n\nimport { _gsScope } from \"./TweenLite.js\";\n\nexport var DirectionalRotationPlugin = _gsScope._gsDefine.plugin({\n\t\tpropName: \"directionalRotation\",\n\t\tversion: \"0.3.1\",\n\t\tAPI: 2,\n\n\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\tinit: function(target, value, tween, index) {\n\t\t\tif (typeof(value) !== \"object\") {\n\t\t\t\tvalue = {rotation:value};\n\t\t\t}\n\t\t\tthis.finals = {};\n\t\t\tvar cap = (value.useRadians === true) ? Math.PI * 2 : 360,\n\t\t\t\tmin = 0.000001,\n\t\t\t\tp, v, start, end, dif, split;\n\t\t\tfor (p in value) {\n\t\t\t\tif (p !== \"useRadians\") {\n\t\t\t\t\tend = value[p];\n\t\t\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\t\t\tend = end(index, target);\n\t\t\t\t\t}\n\t\t\t\t\tsplit = (end + \"\").split(\"_\");\n\t\t\t\t\tv = split[0];\n\t\t\t\t\tstart = parseFloat( (typeof(target[p]) !== \"function\") ? target[p] : target[ ((p.indexOf(\"set\") || typeof(target[\"get\" + p.substr(3)]) !== \"function\") ? p : \"get\" + p.substr(3)) ]() );\n\t\t\t\t\tend = this.finals[p] = (typeof(v) === \"string\" && v.charAt(1) === \"=\") ? start + parseInt(v.charAt(0) + \"1\", 10) * Number(v.substr(2)) : Number(v) || 0;\n\t\t\t\t\tdif = end - start;\n\t\t\t\t\tif (split.length) {\n\t\t\t\t\t\tv = split.join(\"_\");\n\t\t\t\t\t\tif (v.indexOf(\"short\") !== -1) {\n\t\t\t\t\t\t\tdif = dif % cap;\n\t\t\t\t\t\t\tif (dif !== dif % (cap / 2)) {\n\t\t\t\t\t\t\t\tdif = (dif < 0) ? dif + cap : dif - cap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"_cw\") !== -1 && dif < 0) {\n\t\t\t\t\t\t\tdif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t} else if (v.indexOf(\"ccw\") !== -1 && dif > 0) {\n\t\t\t\t\t\t\tdif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (dif > min || dif < -min) {\n\t\t\t\t\t\tthis._addTween(target, p, start, start + dif, p);\n\t\t\t\t\t\tthis._overwriteProps.push(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\n\t\tset: function(ratio) {\n\t\t\tvar pt;\n\t\t\tif (ratio !== 1) {\n\t\t\t\tthis._super.setRatio.call(this, ratio);\n\t\t\t} else {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\tpt.t[pt.p](this.finals[pt.p]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p] = this.finals[pt.p];\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\nDirectionalRotationPlugin._autoCSS = true;\n\nexport { DirectionalRotationPlugin as default };","/*!\n * VERSION: 1.16.1\n * DATE: 2018-08-27\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\n\nimport { _gsScope, globals, Ease, Linear, Power0, Power1, Power2, Power3, Power4 } from \"./TweenLite.js\";\n\n_gsScope._gsDefine(\"easing.Back\", [\"easing.Ease\"], function() {\n\t\t\n\t\tvar w = (_gsScope.GreenSockGlobals || _gsScope),\n\t\t\tgs = w.com.greensock,\n\t\t\t_2PI = Math.PI * 2,\n\t\t\t_HALF_PI = Math.PI / 2,\n\t\t\t_class = gs._class,\n\t\t\t_create = function(n, f) {\n\t\t\t\tvar C = _class(\"easing.\" + n, function(){}, true),\n\t\t\t\t\tp = C.prototype = new Ease();\n\t\t\t\tp.constructor = C;\n\t\t\t\tp.getRatio = f;\n\t\t\t\treturn C;\n\t\t\t},\n\t\t\t_easeReg = Ease.register || function(){}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.\n\t\t\t_wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {\n\t\t\t\tvar C = _class(\"easing.\"+name, {\n\t\t\t\t\teaseOut:new EaseOut(),\n\t\t\t\t\teaseIn:new EaseIn(),\n\t\t\t\t\teaseInOut:new EaseInOut()\n\t\t\t\t}, true);\n\t\t\t\t_easeReg(C, name);\n\t\t\t\treturn C;\n\t\t\t},\n\t\t\tEasePoint = function(time, value, next) {\n\t\t\t\tthis.t = time;\n\t\t\t\tthis.v = value;\n\t\t\t\tif (next) {\n\t\t\t\t\tthis.next = next;\n\t\t\t\t\tnext.prev = this;\n\t\t\t\t\tthis.c = next.v - value;\n\t\t\t\t\tthis.gap = next.t - time;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t//Back\n\t\t\t_createBack = function(n, f) {\n\t\t\t\tvar C = _class(\"easing.\" + n, function(overshoot) {\n\t\t\t\t\t\tthis._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;\n\t\t\t\t\t\tthis._p2 = this._p1 * 1.525;\n\t\t\t\t\t}, true), \n\t\t\t\t\tp = C.prototype = new Ease();\n\t\t\t\tp.constructor = C;\n\t\t\t\tp.getRatio = f;\n\t\t\t\tp.config = function(overshoot) {\n\t\t\t\t\treturn new C(overshoot);\n\t\t\t\t};\n\t\t\t\treturn C;\n\t\t\t},\n\n\t\t\tBack = _wrap(\"Back\",\n\t\t\t\t_createBack(\"BackOut\", function(p) {\n\t\t\t\t\treturn ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);\n\t\t\t\t}),\n\t\t\t\t_createBack(\"BackIn\", function(p) {\n\t\t\t\t\treturn p * p * ((this._p1 + 1) * p - this._p1);\n\t\t\t\t}),\n\t\t\t\t_createBack(\"BackInOut\", function(p) {\n\t\t\t\t\treturn ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);\n\t\t\t\t})\n\t\t\t),\n\n\n\t\t\t//SlowMo\n\t\t\tSlowMo = _class(\"easing.SlowMo\", function(linearRatio, power, yoyoMode) {\n\t\t\t\tpower = (power || power === 0) ? power : 0.7;\n\t\t\t\tif (linearRatio == null) {\n\t\t\t\t\tlinearRatio = 0.7;\n\t\t\t\t} else if (linearRatio > 1) {\n\t\t\t\t\tlinearRatio = 1;\n\t\t\t\t}\n\t\t\t\tthis._p = (linearRatio !== 1) ? power : 0;\n\t\t\t\tthis._p1 = (1 - linearRatio) / 2;\n\t\t\t\tthis._p2 = linearRatio;\n\t\t\t\tthis._p3 = this._p1 + this._p2;\n\t\t\t\tthis._calcEnd = (yoyoMode === true);\n\t\t\t}, true),\n\t\t\tp = SlowMo.prototype = new Ease(),\n\t\t\tSteppedEase, ExpoScaleEase, RoughEase, _createElastic;\n\t\t\t\n\t\tp.constructor = SlowMo;\n\t\tp.getRatio = function(p) {\n\t\t\tvar r = p + (0.5 - p) * this._p;\n\t\t\tif (p < this._p1) {\n\t\t\t\treturn this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);\n\t\t\t} else if (p > this._p3) {\n\t\t\t\treturn this._calcEnd ? (p === 1 ? 0 : 1 - (p = (p - this._p3) / this._p1) * p) : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p); //added p === 1 ? 0 to avoid floating point rounding errors from affecting the final value, like 1 - 0.7 = 0.30000000000000004 instead of 0.3\n\t\t\t}\n\t\t\treturn this._calcEnd ? 1 : r;\n\t\t};\n\t\tSlowMo.ease = new SlowMo(0.7, 0.7);\n\t\t\n\t\tp.config = SlowMo.config = function(linearRatio, power, yoyoMode) {\n\t\t\treturn new SlowMo(linearRatio, power, yoyoMode);\n\t\t};\n\n\n\t\t//SteppedEase\n\t\tSteppedEase = _class(\"easing.SteppedEase\", function(steps, immediateStart) {\n\t\t\t\tsteps = steps || 1;\n\t\t\t\tthis._p1 = 1 / steps;\n\t\t\t\tthis._p2 = steps + (immediateStart ? 0 : 1);\n\t\t\t\tthis._p3 = immediateStart ? 1 : 0;\n\t\t\t}, true);\n\t\tp = SteppedEase.prototype = new Ease();\t\n\t\tp.constructor = SteppedEase;\n\t\tp.getRatio = function(p) {\n\t\t\tif (p < 0) {\n\t\t\t\tp = 0;\n\t\t\t} else if (p >= 1) {\n\t\t\t\tp = 0.999999999;\n\t\t\t}\n\t\t\treturn (((this._p2 * p) | 0) + this._p3) * this._p1;\n\t\t};\n\t\tp.config = SteppedEase.config = function(steps, immediateStart) {\n\t\t\treturn new SteppedEase(steps, immediateStart);\n\t\t};\n\n\n\t\t//ExpoScaleEase\n\t\tExpoScaleEase = _class(\"easing.ExpoScaleEase\", function(start, end, ease) {\n\t\t\tthis._p1 = Math.log(end / start);\n\t\t\tthis._p2 = end - start;\n\t\t\tthis._p3 = start;\n\t\t\tthis._ease = ease;\n\t\t}, true);\n\t\tp = ExpoScaleEase.prototype = new Ease();\n\t\tp.constructor = ExpoScaleEase;\n\t\tp.getRatio = function(p) {\n\t\t\tif (this._ease) {\n\t\t\t\tp = this._ease.getRatio(p);\n\t\t\t}\n\t\t\treturn (this._p3 * Math.exp(this._p1 * p) - this._p3) / this._p2;\n\t\t};\n\t\tp.config = ExpoScaleEase.config = function(start, end, ease) {\n\t\t\treturn new ExpoScaleEase(start, end, ease);\n\t\t};\n\n\n\t\t//RoughEase\n\t\tRoughEase = _class(\"easing.RoughEase\", function(vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar taper = vars.taper || \"none\",\n\t\t\t\ta = [],\n\t\t\t\tcnt = 0,\n\t\t\t\tpoints = (vars.points || 20) | 0,\n\t\t\t\ti = points,\n\t\t\t\trandomize = (vars.randomize !== false),\n\t\t\t\tclamp = (vars.clamp === true),\n\t\t\t\ttemplate = (vars.template instanceof Ease) ? vars.template : null,\n\t\t\t\tstrength = (typeof(vars.strength) === \"number\") ? vars.strength * 0.4 : 0.4,\n\t\t\t\tx, y, bump, invX, obj, pnt;\n\t\t\twhile (--i > -1) {\n\t\t\t\tx = randomize ? Math.random() : (1 / points) * i;\n\t\t\t\ty = template ? template.getRatio(x) : x;\n\t\t\t\tif (taper === \"none\") {\n\t\t\t\t\tbump = strength;\n\t\t\t\t} else if (taper === \"out\") {\n\t\t\t\t\tinvX = 1 - x;\n\t\t\t\t\tbump = invX * invX * strength;\n\t\t\t\t} else if (taper === \"in\") {\n\t\t\t\t\tbump = x * x * strength;\n\t\t\t\t} else if (x < 0.5) {  //\"both\" (start)\n\t\t\t\t\tinvX = x * 2;\n\t\t\t\t\tbump = invX * invX * 0.5 * strength;\n\t\t\t\t} else {\t\t\t\t//\"both\" (end)\n\t\t\t\t\tinvX = (1 - x) * 2;\n\t\t\t\t\tbump = invX * invX * 0.5 * strength;\n\t\t\t\t}\n\t\t\t\tif (randomize) {\n\t\t\t\t\ty += (Math.random() * bump) - (bump * 0.5);\n\t\t\t\t} else if (i % 2) {\n\t\t\t\t\ty += bump * 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ty -= bump * 0.5;\n\t\t\t\t}\n\t\t\t\tif (clamp) {\n\t\t\t\t\tif (y > 1) {\n\t\t\t\t\t\ty = 1;\n\t\t\t\t\t} else if (y < 0) {\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ta[cnt++] = {x:x, y:y};\n\t\t\t}\n\t\t\ta.sort(function(a, b) {\n\t\t\t\treturn a.x - b.x;\n\t\t\t});\n\n\t\t\tpnt = new EasePoint(1, 1, null);\n\t\t\ti = points;\n\t\t\twhile (--i > -1) {\n\t\t\t\tobj = a[i];\n\t\t\t\tpnt = new EasePoint(obj.x, obj.y, pnt);\n\t\t\t}\n\n\t\t\tthis._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);\n\t\t}, true);\n\t\tp = RoughEase.prototype = new Ease();\n\t\tp.constructor = RoughEase;\n\t\tp.getRatio = function(p) {\n\t\t\tvar pnt = this._prev;\n\t\t\tif (p > pnt.t) {\n\t\t\t\twhile (pnt.next && p >= pnt.t) {\n\t\t\t\t\tpnt = pnt.next;\n\t\t\t\t}\n\t\t\t\tpnt = pnt.prev;\n\t\t\t} else {\n\t\t\t\twhile (pnt.prev && p <= pnt.t) {\n\t\t\t\t\tpnt = pnt.prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._prev = pnt;\n\t\t\treturn (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);\n\t\t};\n\t\tp.config = function(vars) {\n\t\t\treturn new RoughEase(vars);\n\t\t};\n\t\tRoughEase.ease = new RoughEase();\n\n\n\t\t//Bounce\n\t\t_wrap(\"Bounce\",\n\t\t\t_create(\"BounceOut\", function(p) {\n\t\t\t\tif (p < 1 / 2.75) {\n\t\t\t\t\treturn 7.5625 * p * p;\n\t\t\t\t} else if (p < 2 / 2.75) {\n\t\t\t\t\treturn 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n\t\t\t\t} else if (p < 2.5 / 2.75) {\n\t\t\t\t\treturn 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n\t\t\t\t}\n\t\t\t\treturn 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n\t\t\t}),\n\t\t\t_create(\"BounceIn\", function(p) {\n\t\t\t\tif ((p = 1 - p) < 1 / 2.75) {\n\t\t\t\t\treturn 1 - (7.5625 * p * p);\n\t\t\t\t} else if (p < 2 / 2.75) {\n\t\t\t\t\treturn 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\n\t\t\t\t} else if (p < 2.5 / 2.75) {\n\t\t\t\t\treturn 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\n\t\t\t\t}\n\t\t\t\treturn 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\n\t\t\t}),\n\t\t\t_create(\"BounceInOut\", function(p) {\n\t\t\t\tvar invert = (p < 0.5);\n\t\t\t\tif (invert) {\n\t\t\t\t\tp = 1 - (p * 2);\n\t\t\t\t} else {\n\t\t\t\t\tp = (p * 2) - 1;\n\t\t\t\t}\n\t\t\t\tif (p < 1 / 2.75) {\n\t\t\t\t\tp = 7.5625 * p * p;\n\t\t\t\t} else if (p < 2 / 2.75) {\n\t\t\t\t\tp = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n\t\t\t\t} else if (p < 2.5 / 2.75) {\n\t\t\t\t\tp = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n\t\t\t\t} else {\n\t\t\t\t\tp = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n\t\t\t\t}\n\t\t\t\treturn invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;\n\t\t\t})\n\t\t);\n\n\n\t\t//CIRC\n\t\t_wrap(\"Circ\",\n\t\t\t_create(\"CircOut\", function(p) {\n\t\t\t\treturn Math.sqrt(1 - (p = p - 1) * p);\n\t\t\t}),\n\t\t\t_create(\"CircIn\", function(p) {\n\t\t\t\treturn -(Math.sqrt(1 - (p * p)) - 1);\n\t\t\t}),\n\t\t\t_create(\"CircInOut\", function(p) {\n\t\t\t\treturn ((p*=2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);\n\t\t\t})\n\t\t);\n\n\n\t\t//Elastic\n\t\t_createElastic = function(n, f, def) {\n\t\t\tvar C = _class(\"easing.\" + n, function(amplitude, period) {\n\t\t\t\t\tthis._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n\t\t\t\t\tthis._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);\n\t\t\t\t\tthis._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);\n\t\t\t\t\tthis._p2 = _2PI / this._p2; //precalculate to optimize\n\t\t\t\t}, true),\n\t\t\t\tp = C.prototype = new Ease();\n\t\t\tp.constructor = C;\n\t\t\tp.getRatio = f;\n\t\t\tp.config = function(amplitude, period) {\n\t\t\t\treturn new C(amplitude, period);\n\t\t\t};\n\t\t\treturn C;\n\t\t};\n\t\t_wrap(\"Elastic\",\n\t\t\t_createElastic(\"ElasticOut\", function(p) {\n\t\t\t\treturn this._p1 * Math.pow(2, -10 * p) * Math.sin( (p - this._p3) * this._p2 ) + 1;\n\t\t\t}, 0.3),\n\t\t\t_createElastic(\"ElasticIn\", function(p) {\n\t\t\t\treturn -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2 ));\n\t\t\t}, 0.3),\n\t\t\t_createElastic(\"ElasticInOut\", function(p) {\n\t\t\t\treturn ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 *(p -= 1)) * Math.sin( (p - this._p3) * this._p2 ) * 0.5 + 1;\n\t\t\t}, 0.45)\n\t\t);\n\n\n\t\t//Expo\n\t\t_wrap(\"Expo\",\n\t\t\t_create(\"ExpoOut\", function(p) {\n\t\t\t\treturn 1 - Math.pow(2, -10 * p);\n\t\t\t}),\n\t\t\t_create(\"ExpoIn\", function(p) {\n\t\t\t\treturn Math.pow(2, 10 * (p - 1)) - 0.001;\n\t\t\t}),\n\t\t\t_create(\"ExpoInOut\", function(p) {\n\t\t\t\treturn ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\t\t\t})\n\t\t);\n\n\n\t\t//Sine\n\t\t_wrap(\"Sine\",\n\t\t\t_create(\"SineOut\", function(p) {\n\t\t\t\treturn Math.sin(p * _HALF_PI);\n\t\t\t}),\n\t\t\t_create(\"SineIn\", function(p) {\n\t\t\t\treturn -Math.cos(p * _HALF_PI) + 1;\n\t\t\t}),\n\t\t\t_create(\"SineInOut\", function(p) {\n\t\t\t\treturn -0.5 * (Math.cos(Math.PI * p) - 1);\n\t\t\t})\n\t\t);\n\n\t\t_class(\"easing.EaseLookup\", {\n\t\t\t\tfind:function(s) {\n\t\t\t\t\treturn Ease.map[s];\n\t\t\t\t}\n\t\t\t}, true);\n\n\t\t//register the non-standard eases\n\t\t_easeReg(w.SlowMo, \"SlowMo\", \"ease,\");\n\t\t_easeReg(RoughEase, \"RoughEase\", \"ease,\");\n\t\t_easeReg(SteppedEase, \"SteppedEase\", \"ease,\");\n\t\t\n\t\treturn Back;\n\t\t\n\t}, true);\n\nexport var Back = globals.Back;\nexport var Elastic = globals.Elastic;\nexport var Bounce = globals.Bounce;\nexport var RoughEase = globals.RoughEase;\nexport var SlowMo = globals.SlowMo;\nexport var SteppedEase = globals.SteppedEase;\nexport var Circ = globals.Circ;\nexport var Expo = globals.Expo;\nexport var Sine = globals.Sine;\nexport var ExpoScaleEase = globals.ExpoScaleEase;\nexport { Linear, Power0, Power1, Power2, Power3, Power4 };","/*!\n * VERSION: 1.6.0\n * DATE: 2018-08-27\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\n\nimport { _gsScope } from \"./TweenLite.js\";\n\nexport var RoundPropsPlugin = _gsScope._gsDefine.plugin({\n\t\t\t\tpropName: \"roundProps\",\n\t\t\t\tversion: \"1.7.0\",\n\t\t\t\tpriority: -1,\n\t\t\t\tAPI: 2,\n\n\t\t\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\t\tinit: function(target, value, tween) {\n\t\t\t\t\tthis._tween = tween;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t}),\n\t\t\t_getRoundFunc = function(v) { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.\n\t\t\t\tvar p = v < 1 ? Math.pow(10, (v + \"\").length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()\n\t\t\t\treturn function(n) {\n\t\t\t\t\treturn ((Math.round(n / v) * v * p) | 0) / p;\n\t\t\t\t};\n\t\t\t},\n\t\t\t_roundLinkedList = function(node, mod) {\n\t\t\t\twhile (node) {\n\t\t\t\t\tif (!node.f && !node.blob) {\n\t\t\t\t\t\tnode.m = mod || Math.round;\n\t\t\t\t\t}\n\t\t\t\t\tnode = node._next;\n\t\t\t\t}\n\t\t\t},\n\t\t\tp = RoundPropsPlugin.prototype;\n\n\t\tp._onInitAllProps = function() {\n\t\t\tvar tween = this._tween,\n\t\t\t\trp = tween.vars.roundProps,\n\t\t\t\tlookup = {},\n\t\t\t\trpt = tween._propLookup.roundProps,\n\t\t\t\tpt, next, i, p;\n\t\t\tif (typeof(rp) === \"object\" && !rp.push) {\n\t\t\t\tfor (p in rp) {\n\t\t\t\t\tlookup[p] = _getRoundFunc(rp[p]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (typeof(rp) === \"string\") {\n\t\t\t\t\trp = rp.split(\",\");\n\t\t\t\t}\n\t\t\t\ti = rp.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tlookup[rp[i]] = Math.round;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (p in lookup) {\n\t\t\t\tpt = tween._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next; //record here, because it may get removed\n\t\t\t\t\tif (pt.pg) {\n\t\t\t\t\t\tpt.t._mod(lookup);\n\t\t\t\t\t} else if (pt.n === p) {\n\t\t\t\t\t\tif (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)\n\t\t\t\t\t\t\t_roundLinkedList(pt.t._firstPT, lookup[p]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._add(pt.t, p, pt.s, pt.c, lookup[p]);\n\t\t\t\t\t\t\t//remove from linked list\n\t\t\t\t\t\t\tif (next) {\n\t\t\t\t\t\t\t\tnext._prev = pt._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\tpt._prev._next = next;\n\t\t\t\t\t\t\t} else if (tween._firstPT === pt) {\n\t\t\t\t\t\t\t\ttween._firstPT = next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\ttween._propLookup[p] = rpt;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._add = function(target, p, s, c, mod) {\n\t\t\tthis._addTween(target, p, s, s + c, p, mod || Math.round);\n\t\t\tthis._overwriteProps.push(p);\n\t\t};\n\nexport { RoundPropsPlugin as default };\n","/*!\n * VERSION: 2.1.3\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport TweenLite, { _gsScope, globals, Animation, SimpleTimeline } from \"./TweenLite.js\";\n\n_gsScope._gsDefine(\"TimelineLite\", [\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"], function() {\n\n\t\tvar TimelineLite = function(vars) {\n\t\t\t\tSimpleTimeline.call(this, vars);\n\t\t\t\tvar self = this,\n\t\t\t\t\tv = self.vars,\n\t\t\t\t\tval, p;\n\t\t\t\tself._labels = {};\n\t\t\t\tself.autoRemoveChildren = !!v.autoRemoveChildren;\n\t\t\t\tself.smoothChildTiming = !!v.smoothChildTiming;\n\t\t\t\tself._sortChildren = true;\n\t\t\t\tself._onUpdate = v.onUpdate;\n\t\t\t\tfor (p in v) {\n\t\t\t\t\tval = v[p];\n\t\t\t\t\tif (_isArray(val)) if (val.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tv[p] = self._swapSelfInParams(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (_isArray(v.tweens)) {\n\t\t\t\t\tself.add(v.tweens, 0, v.align, v.stagger);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_tinyNum = 0.00000001,\n\t\t\tTweenLiteInternals = TweenLite._internals,\n\t\t\t_internals = TimelineLite._internals = {},\n\t\t\t_isSelector = TweenLiteInternals.isSelector,\n\t\t\t_isArray = TweenLiteInternals.isArray,\n\t\t\t_lazyTweens = TweenLiteInternals.lazyTweens,\n\t\t\t_lazyRender = TweenLiteInternals.lazyRender,\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_copy = function(vars) {\n\t\t\t\tvar copy = {}, p;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tcopy[p] = vars[p];\n\t\t\t\t}\n\t\t\t\treturn copy;\n\t\t\t},\n\t\t\t_applyCycle = function(vars, targets, i) {\n\t\t\t\tvar alt = vars.cycle,\n\t\t\t\t\tp, val;\n\t\t\t\tfor (p in alt) {\n\t\t\t\t\tval = alt[p];\n\t\t\t\t\tvars[p] = (typeof(val) === \"function\") ? val(i, targets[i], targets) : val[i % val.length];\n\t\t\t\t}\n\t\t\t\tdelete vars.cycle;\n\t\t\t},\n\t\t\t_pauseCallback = _internals.pauseCallback = function() {},\n\t\t\t_slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++]));\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_defaultImmediateRender = function(tl, toVars, fromVars, defaultFalse) { //default to immediateRender:true unless otherwise set in toVars, fromVars or if defaultFalse is passed in as true\n\t\t\t\tvar ir = \"immediateRender\";\n\t\t\t\tif (!(ir in toVars)) {\n\t\t\t\t\ttoVars[ir] = !((fromVars && fromVars[ir] === false) || defaultFalse);\n\t\t\t\t}\n\t\t\t\treturn toVars;\n\t\t\t},\n\t\t\t//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following\n\t\t\t_distribute = function(v) {\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\tvar vars = (typeof(v) === \"object\") ? v : {each:v}, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total \"amount\" that's chunked out among them all.\n\t\t\t\t\tease = vars.ease,\n\t\t\t\t\tfrom = vars.from || 0,\n\t\t\t\t\tbase = vars.base || 0,\n\t\t\t\t\tcache = {},\n\t\t\t\t\tisFromKeyword = isNaN(from),\n\t\t\t\t\taxis = vars.axis,\n\t\t\t\t\tratio = {center:0.5, end:1}[from] || 0;\n\t\t\t\treturn function(i, target, a) {\n\t\t\t\t\tvar l = (a || vars).length,\n\t\t\t\t\t\tdistances = cache[l],\n\t\t\t\t\t\toriginX, originY, x, y, d, j, max, min, wrap;\n\t\t\t\t\tif (!distances) {\n\t\t\t\t\t\twrap = (vars.grid === \"auto\") ? 0 : (vars.grid || [Infinity])[0];\n\t\t\t\t\t\tif (!wrap) {\n\t\t\t\t\t\t\tmax = -Infinity;\n\t\t\t\t\t\t\twhile (max < (max = a[wrap++].getBoundingClientRect().left) && wrap < l) { }\n\t\t\t\t\t\t\twrap--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdistances = cache[l] = [];\n\t\t\t\t\t\toriginX = isFromKeyword ? (Math.min(wrap, l) * ratio) - 0.5 : from % wrap;\n\t\t\t\t\t\toriginY = isFromKeyword ? l * ratio / wrap - 0.5 : (from / wrap) | 0;\n\t\t\t\t\t\tmax = 0;\n\t\t\t\t\t\tmin = Infinity;\n\t\t\t\t\t\tfor (j = 0; j < l; j++) {\n\t\t\t\t\t\t\tx = (j % wrap) - originX;\n\t\t\t\t\t\t\ty = originY - ((j / wrap) | 0);\n\t\t\t\t\t\t\tdistances[j] = d = !axis ? Math.sqrt(x * x + y * y) : Math.abs((axis === \"y\") ? y : x);\n\t\t\t\t\t\t\tif (d > max) {\n\t\t\t\t\t\t\t\tmax = d;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (d < min) {\n\t\t\t\t\t\t\t\tmin = d;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdistances.max = max - min;\n\t\t\t\t\t\tdistances.min = min;\n\t\t\t\t\t\tdistances.v = l = vars.amount || (vars.each * (wrap > l ? l - 1 : !axis ? Math.max(wrap, l / wrap) : axis === \"y\" ? l / wrap : wrap)) || 0;\n\t\t\t\t\t\tdistances.b = (l < 0) ? base - l : base;\n\t\t\t\t\t}\n\t\t\t\t\tl = (distances[i] - distances.min) / distances.max;\n\t\t\t\t\treturn distances.b + (ease ? ease.getRatio(l) : l) * distances.v;\n\t\t\t\t};\n\t\t\t},\n\t\t\tp = TimelineLite.prototype = new SimpleTimeline();\n\n\t\tTimelineLite.version = \"2.1.3\";\n\t\tTimelineLite.distribute = _distribute;\n\t\tp.constructor = TimelineLite;\n\t\tp.kill()._gc = p._forcingPlayhead = p._hasPause = false;\n\n\t\t/* might use later...\n\t\t//translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.\n\t\tfunction localToGlobal(time, animation) {\n\t\t\twhile (animation) {\n\t\t\t\ttime = (time / animation._timeScale) + animation._startTime;\n\t\t\t\tanimation = animation.timeline;\n\t\t\t}\n\t\t\treturn time;\n\t\t}\n\n\t\t//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales\n\t\tfunction globalToLocal(time, animation) {\n\t\t\tvar scale = 1;\n\t\t\ttime -= localToGlobal(0, animation);\n\t\t\twhile (animation) {\n\t\t\t\tscale *= animation._timeScale;\n\t\t\t\tanimation = animation.timeline;\n\t\t\t}\n\t\t\treturn time * scale;\n\t\t}\n\t\t*/\n\n\t\tp.to = function(target, duration, vars, position) {\n\t\t\tvar Engine = (vars.repeat && _globals.TweenMax) || TweenLite;\n\t\t\treturn duration ? this.add( new Engine(target, duration, vars), position) : this.set(target, vars, position);\n\t\t};\n\n\t\tp.from = function(target, duration, vars, position) {\n\t\t\treturn this.add( ((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, _defaultImmediateRender(this, vars)), position);\n\t\t};\n\n\t\tp.fromTo = function(target, duration, fromVars, toVars, position) {\n\t\t\tvar Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;\n\t\t\ttoVars = _defaultImmediateRender(this, toVars, fromVars);\n\t\t\treturn duration ? this.add( Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);\n\t\t};\n\n\t\tp.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvar tl = new TimelineLite({onComplete:onCompleteAll, onCompleteParams:onCompleteAllParams, callbackScope:onCompleteAllScope, smoothChildTiming:this.smoothChildTiming}),\n\t\t\t\tstaggerFunc = _distribute(vars.stagger || stagger),\n\t\t\t\tstartAt = vars.startAt,\n\t\t\t\tcycle = vars.cycle,\n\t\t\t\tcopy, i;\n\t\t\tif (typeof(targets) === \"string\") {\n\t\t\t\ttargets = TweenLite.selector(targets) || targets;\n\t\t\t}\n\t\t\ttargets = targets || [];\n\t\t\tif (_isSelector(targets)) { //if the targets object is a selector, translate it into an array.\n\t\t\t\ttargets = _slice(targets);\n\t\t\t}\n\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\tcopy = _copy(vars);\n\t\t\t\tif (startAt) {\n\t\t\t\t\tcopy.startAt = _copy(startAt);\n\t\t\t\t\tif (startAt.cycle) {\n\t\t\t\t\t\t_applyCycle(copy.startAt, targets, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cycle) {\n\t\t\t\t\t_applyCycle(copy, targets, i);\n\t\t\t\t\tif (copy.duration != null) {\n\t\t\t\t\t\tduration = copy.duration;\n\t\t\t\t\t\tdelete copy.duration;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttl.to(targets[i], duration, copy, staggerFunc(i, targets[i], targets));\n\t\t\t}\n\t\t\treturn this.add(tl, position);\n\t\t};\n\n\t\tp.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvars.runBackwards = true;\n\t\t\treturn this.staggerTo(targets, duration, _defaultImmediateRender(this, vars), stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tp.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\treturn this.staggerTo(targets, duration, _defaultImmediateRender(this, toVars, fromVars), stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tp.call = function(callback, params, scope, position) {\n\t\t\treturn this.add( TweenLite.delayedCall(0, callback, params, scope), position);\n\t\t};\n\n\t\tp.set = function(target, vars, position) {\n\t\t\treturn this.add( new TweenLite(target, 0, _defaultImmediateRender(this, vars, null, true)), position);\n\t\t};\n\n\t\tTimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {\n\t\t\tvars = vars || {};\n\t\t\tif (vars.smoothChildTiming == null) {\n\t\t\t\tvars.smoothChildTiming = true;\n\t\t\t}\n\t\t\tvar tl = new TimelineLite(vars),\n\t\t\t\troot = tl._timeline,\n\t\t\t\thasNegativeStart, time,\ttween, next;\n\t\t\tif (ignoreDelayedCalls == null) {\n\t\t\t\tignoreDelayedCalls = true;\n\t\t\t}\n\t\t\troot._remove(tl, true);\n\t\t\ttl._startTime = 0;\n\t\t\ttl._rawPrevTime = tl._time = tl._totalTime = root._time;\n\t\t\ttween = root._first;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next;\n\t\t\t\tif (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {\n\t\t\t\t\ttime = tween._startTime - tween._delay;\n\t\t\t\t\tif (time < 0) {\n\t\t\t\t\t\thasNegativeStart = 1;\n\t\t\t\t\t}\n\t\t\t\t\ttl.add(tween, time);\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t\troot.add(tl, 0);\n\t\t\tif (hasNegativeStart) { //calling totalDuration() will force the adjustment necessary to shift the children forward so none of them start before zero, and moves the timeline backwards the same amount, so the playhead is still aligned where it should be globally, but the timeline doesn't have illegal children that start before zero.\n\t\t\t\ttl.totalDuration();\n\t\t\t}\n\t\t\treturn tl;\n\t\t};\n\n\t\tp.add = function(value, position, align, stagger) {\n\t\t\tvar self = this,\n\t\t\t\tcurTime, l, i, child, tl, beforeRawTime;\n\t\t\tif (typeof(position) !== \"number\") {\n\t\t\t\tposition = self._parseTimeOrLabel(position, 0, true, value);\n\t\t\t}\n\t\t\tif (!(value instanceof Animation)) {\n\t\t\t\tif ((value instanceof Array) || (value && value.push && _isArray(value))) {\n\t\t\t\t\talign = align || \"normal\";\n\t\t\t\t\tstagger = stagger || 0;\n\t\t\t\t\tcurTime = position;\n\t\t\t\t\tl = value.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif (_isArray(child = value[i])) {\n\t\t\t\t\t\t\tchild = new TimelineLite({tweens:child});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.add(child, curTime);\n\t\t\t\t\t\tif (typeof(child) !== \"string\" && typeof(child) !== \"function\") {\n\t\t\t\t\t\t\tif (align === \"sequence\") {\n\t\t\t\t\t\t\t\tcurTime = child._startTime + (child.totalDuration() / child._timeScale);\n\t\t\t\t\t\t\t} else if (align === \"start\") {\n\t\t\t\t\t\t\t\tchild._startTime -= child.delay();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurTime += stagger;\n\t\t\t\t\t}\n\t\t\t\t\treturn self._uncache(true);\n\t\t\t\t} else if (typeof(value) === \"string\") {\n\t\t\t\t\treturn self.addLabel(value, position);\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\tvalue = TweenLite.delayedCall(0, value);\n\t\t\t\t} else {\n\t\t\t\t\tthrow(\"Cannot add \" + value + \" into the timeline; it is not a tween, timeline, function, or string.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSimpleTimeline.prototype.add.call(self, value, position);\n\n\t\t\tif (value._time || (!value._duration && value._initted)) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.\n\t\t\t\tcurTime = (self.rawTime() - value._startTime) * value._timeScale;\n\t\t\t\tif (!value._duration || Math.abs(Math.max(0, Math.min(value.totalDuration(), curTime))) - value._totalTime > 0.00001) {\n\t\t\t\t\tvalue.render(curTime, false, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n\t\t\tif (self._gc || self._time === self._duration) if (!self._paused) if (self._duration < self.duration()) {\n\t\t\t\t//in case any of the ancestors had completed but should now be enabled...\n\t\t\t\ttl = self;\n\t\t\t\tbeforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tif (beforeRawTime && tl._timeline.smoothChildTiming) {\n\t\t\t\t\t\ttl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.\n\t\t\t\t\t} else if (tl._gc) {\n\t\t\t\t\t\ttl._enabled(true, false);\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t};\n\n\t\tp.remove = function(value) {\n\t\t\tif (value instanceof Animation) {\n\t\t\t\tthis._remove(value, false);\n\t\t\t\tvar tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.\n\t\t\t\tvalue._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.\n\t\t\t\treturn this;\n\t\t\t} else if (value instanceof Array || (value && value.push && _isArray(value))) {\n\t\t\t\tvar i = value.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tthis.remove(value[i]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t} else if (typeof(value) === \"string\") {\n\t\t\t\treturn this.removeLabel(value);\n\t\t\t}\n\t\t\treturn this.kill(null, value);\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tSimpleTimeline.prototype._remove.call(this, tween, skipDisable);\n\t\t\tvar last = this._last;\n\t\t\tif (!last) {\n\t\t\t\tthis._time = this._totalTime = this._duration = this._totalDuration = 0;\n\t\t\t} else if (this._time > this.duration()) {\n\t\t\t\tthis._time = this._duration;\n\t\t\t\tthis._totalTime = this._totalDuration;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.append = function(value, offsetOrLabel) {\n\t\t\treturn this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));\n\t\t};\n\n\t\tp.insert = p.insertMultiple = function(value, position, align, stagger) {\n\t\t\treturn this.add(value, position || 0, align, stagger);\n\t\t};\n\n\t\tp.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {\n\t\t\treturn this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);\n\t\t};\n\n\t\tp.addLabel = function(label, position) {\n\t\t\tthis._labels[label] = this._parseTimeOrLabel(position);\n\t\t\treturn this;\n\t\t};\n\n\t\tp.addPause = function(position, callback, params, scope) {\n\t\t\tvar t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);\n\t\t\tt.vars.onComplete = t.vars.onReverseComplete = callback;\n\t\t\tt.data = \"isPause\";\n\t\t\tthis._hasPause = true;\n\t\t\treturn this.add(t, position);\n\t\t};\n\n\t\tp.removeLabel = function(label) {\n\t\t\tdelete this._labels[label];\n\t\t\treturn this;\n\t\t};\n\n\t\tp.getLabelTime = function(label) {\n\t\t\treturn (this._labels[label] != null) ? this._labels[label] : -1;\n\t\t};\n\n\t\tp._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {\n\t\t\tvar clippedDuration, i;\n\t\t\t//if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().\n\t\t\tif (ignore instanceof Animation && ignore.timeline === this) {\n\t\t\t\tthis.remove(ignore);\n\t\t\t} else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {\n\t\t\t\ti = ignore.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (ignore[i] instanceof Animation && ignore[i].timeline === this) {\n\t\t\t\t\t\tthis.remove(ignore[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclippedDuration = (typeof(timeOrLabel) === \"number\" && !offsetOrLabel) ? 0 : (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n\t\t\tif (typeof(offsetOrLabel) === \"string\") {\n\t\t\t\treturn this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === \"number\" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);\n\t\t\t}\n\t\t\toffsetOrLabel = offsetOrLabel || 0;\n\t\t\tif (typeof(timeOrLabel) === \"string\" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n\t\t\t\ti = timeOrLabel.indexOf(\"=\");\n\t\t\t\tif (i === -1) {\n\t\t\t\t\tif (this._labels[timeOrLabel] == null) {\n\t\t\t\t\t\treturn appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;\n\t\t\t\t\t}\n\t\t\t\t\treturn this._labels[timeOrLabel] + offsetOrLabel;\n\t\t\t\t}\n\t\t\t\toffsetOrLabel = parseInt(timeOrLabel.charAt(i-1) + \"1\", 10) * Number(timeOrLabel.substr(i+1));\n\t\t\t\ttimeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i-1), 0, appendIfAbsent) : clippedDuration;\n\t\t\t} else if (timeOrLabel == null) {\n\t\t\t\ttimeOrLabel = clippedDuration;\n\t\t\t}\n\t\t\treturn Number(timeOrLabel) + offsetOrLabel;\n\t\t};\n\n\t\tp.seek = function(position, suppressEvents) {\n\t\t\treturn this.totalTime((typeof(position) === \"number\") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));\n\t\t};\n\n\t\tp.stop = function() {\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.gotoAndPlay = function(position, suppressEvents) {\n\t\t\treturn this.play(position, suppressEvents);\n\t\t};\n\n\t\tp.gotoAndStop = function(position, suppressEvents) {\n\t\t\treturn this.pause(position, suppressEvents);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tif (this._gc) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\tvar self = this,\n\t\t\t\tprevTime = self._time,\n\t\t\t\ttotalDur = (!self._dirty) ? self._totalDuration : self.totalDuration(),\n\t\t\t\tprevStart = self._startTime,\n\t\t\t\tprevTimeScale = self._timeScale,\n\t\t\t\tprevPaused = self._paused,\n\t\t\t\ttween, isComplete, next, callback, internalForce, pauseTween, curTime, pauseTime;\n\t\t\tif (prevTime !== self._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n\t\t\t\ttime += self._time - prevTime;\n\t\t\t}\n\t\t\tif (self._hasPause && !self._forcingPlayhead && !suppressEvents) {\n\t\t\t\tif (time > prevTime) {\n\t\t\t\t\ttween = self._first;\n\t\t\t\t\twhile (tween && tween._startTime <= time && !pauseTween) {\n\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && self._rawPrevTime === 0)) {\n\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttween = self._last;\n\t\t\t\t\twhile (tween && tween._startTime >= time && !pauseTween) {\n\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && tween._rawPrevTime > 0) {\n\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = tween._prev;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pauseTween) {\n\t\t\t\t\tself._time = self._totalTime = time = pauseTween._startTime;\n\t\t\t\t\tpauseTime = self._startTime + (self._reversed ? self._duration - time : time) / self._timeScale;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (time >= totalDur - _tinyNum && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tself._totalTime = self._time = totalDur;\n\t\t\t\tif (!self._reversed) if (!self._hasPausedChild()) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tinternalForce = !!self._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t\tif (self._duration === 0) if ((time <= 0 && time >= -_tinyNum) || self._rawPrevTime < 0 || self._rawPrevTime === _tinyNum) if (self._rawPrevTime !== time && self._first) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t\tif (self._rawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tself._rawPrevTime = (self._duration || !suppressEvents || time || self._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\ttime = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.\n\n\t\t\t} else if (time < _tinyNum) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tself._totalTime = self._time = 0;\n\t\t\t\tif (time > -_tinyNum) {\n\t\t\t\t\ttime = 0;\n\t\t\t\t}\n\t\t\t\tif (prevTime !== 0 || (self._duration === 0 && self._rawPrevTime !== _tinyNum && (self._rawPrevTime > 0 || (time < 0 && self._rawPrevTime >= 0)))) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = self._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tself._active = false;\n\t\t\t\t\tif (self._timeline.autoRemoveChildren && self._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.\n\t\t\t\t\t\tinternalForce = isComplete = true;\n\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t} else if (self._rawPrevTime >= 0 && self._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t\tself._rawPrevTime = time;\n\t\t\t\t} else {\n\t\t\t\t\tself._rawPrevTime = (self._duration || !suppressEvents || time || self._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\tif (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n\t\t\t\t\t\ttween = self._first;\n\t\t\t\t\t\twhile (tween && tween._startTime === 0) {\n\t\t\t\t\t\t\tif (!tween._duration) {\n\t\t\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttime = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n\t\t\t\t\tif (!self._initted) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tself._totalTime = self._time = self._rawPrevTime = time;\n\t\t\t}\n\t\t\tif ((self._time === prevTime || !self._first) && !force && !internalForce && !pauseTween) {\n\t\t\t\treturn;\n\t\t\t} else if (!self._initted) {\n\t\t\t\tself._initted = true;\n\t\t\t}\n\n\t\t\tif (!self._active) if (!self._paused && self._time !== prevTime && time > 0) {\n\t\t\t\tself._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n\t\t\t}\n\n\t\t\tif (prevTime === 0) if (self.vars.onStart) if (self._time !== 0 || !self._duration) if (!suppressEvents) {\n\t\t\t\tself._callback(\"onStart\");\n\t\t\t}\n\n\t\t\tcurTime = self._time;\n\t\t\tif (curTime >= prevTime) {\n\t\t\t\ttween = self._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\t\tif (curTime !== self._time || (self._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tself.pause();\n\t\t\t\t\t\t\tself._pauseTime = pauseTime; //so that when we resume(), it's starting from exactly the right spot (the pause() method uses the rawTime for the parent, but that may be a bit too far ahead)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttween = self._last;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._prev; //record it here because the value could change after rendering...\n\t\t\t\t\tif (curTime !== self._time || (self._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tpauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n\t\t\t\t\t\t\twhile (pauseTween && pauseTween.endTime() > self._time) {\n\t\t\t\t\t\t\t\tpauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t\t\tpauseTween = pauseTween._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpauseTween = null;\n\t\t\t\t\t\t\tself.pause();\n\t\t\t\t\t\t\tself._pauseTime = pauseTime; //so that when we resume(), it's starting from exactly the right spot (the pause() method uses the rawTime for the parent, but that may be a bit too far ahead)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._onUpdate) if (!suppressEvents) {\n\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t}\n\n\t\t\tif (callback) if (!self._gc) if (prevStart === self._startTime || prevTimeScale !== self._timeScale) if (self._time === 0 || totalDur >= self.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tif (self._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tself._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tself._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && self.vars[callback]) {\n\t\t\t\t\tself._callback(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._hasPausedChild = function() {\n\t\t\tvar tween = this._first;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {\n\t\t\tignoreBeforeTime = ignoreBeforeTime || -9999999999;\n\t\t\tvar a = [],\n\t\t\t\ttween = this._first,\n\t\t\t\tcnt = 0;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._startTime < ignoreBeforeTime) {\n\t\t\t\t\t//do nothing\n\t\t\t\t} else if (tween instanceof TweenLite) {\n\t\t\t\t\tif (tweens !== false) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (timelines !== false) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t\tif (nested !== false) {\n\t\t\t\t\t\ta = a.concat(tween.getChildren(true, tweens, timelines));\n\t\t\t\t\t\tcnt = a.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.getTweensOf = function(target, nested) {\n\t\t\tvar disabled = this._gc,\n\t\t\t\ta = [],\n\t\t\t\tcnt = 0,\n\t\t\t\ttweens, i;\n\t\t\tif (disabled) {\n\t\t\t\tthis._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.\n\t\t\t}\n\t\t\ttweens = TweenLite.getTweensOf(target);\n\t\t\ti = tweens.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {\n\t\t\t\t\ta[cnt++] = tweens[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (disabled) {\n\t\t\t\tthis._enabled(false, true);\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.recent = function() {\n\t\t\treturn this._recent;\n\t\t};\n\n\t\tp._contains = function(tween) {\n\t\t\tvar tl = tween.timeline;\n\t\t\twhile (tl) {\n\t\t\t\tif (tl === this) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttl = tl.timeline;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {\n\t\t\tignoreBeforeTime = ignoreBeforeTime || 0;\n\t\t\tvar tween = this._first,\n\t\t\t\tlabels = this._labels,\n\t\t\t\tp;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._startTime >= ignoreBeforeTime) {\n\t\t\t\t\ttween._startTime += amount;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\tif (adjustLabels) {\n\t\t\t\tfor (p in labels) {\n\t\t\t\t\tif (labels[p] >= ignoreBeforeTime) {\n\t\t\t\t\t\tlabels[p] += amount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp._kill = function(vars, target) {\n\t\t\tif (!vars && !target) {\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\tvar tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),\n\t\t\t\ti = tweens.length,\n\t\t\t\tchanged = false;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (tweens[i]._kill(vars, target)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.clear = function(labels) {\n\t\t\tvar tweens = this.getChildren(false, true, true),\n\t\t\t\ti = tweens.length;\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\twhile (--i > -1) {\n\t\t\t\ttweens[i]._enabled(false, false);\n\t\t\t}\n\t\t\tif (labels !== false) {\n\t\t\t\tthis._labels = {};\n\t\t\t}\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tvar tween = this._first;\n\t\t\twhile (tween) {\n\t\t\t\ttween.invalidate();\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn Animation.prototype.invalidate.call(this);;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (enabled === this._gc) {\n\t\t\t\tvar tween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\ttween._enabled(enabled, true);\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tthis._forcingPlayhead = true;\n\t\t\tvar val = Animation.prototype.totalTime.apply(this, arguments);\n\t\t\tthis._forcingPlayhead = false;\n\t\t\treturn val;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tthis.totalDuration(); //just triggers recalculation\n\t\t\t\t}\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tif (this.duration() !== 0 && value !== 0) {\n\t\t\t\tthis.timeScale(this._duration / value);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tvar max = 0,\n\t\t\t\t\t\tself = this,\n\t\t\t\t\t\ttween = self._last,\n\t\t\t\t\t\tprevStart = 999999999999,\n\t\t\t\t\t\tprev, end;\n\t\t\t\t\twhile (tween) {\n\t\t\t\t\t\tprev = tween._prev; //record it here in case the tween changes position in the sequence...\n\t\t\t\t\t\tif (tween._dirty) {\n\t\t\t\t\t\t\ttween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tween._startTime > prevStart && self._sortChildren && !tween._paused && !self._calculatingDuration) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n\t\t\t\t\t\t\tself._calculatingDuration = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add(), like _parseTimeOrLabel().\n\t\t\t\t\t\t\tself.add(tween, tween._startTime - tween._delay);\n\t\t\t\t\t\t\tself._calculatingDuration = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprevStart = tween._startTime;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n\t\t\t\t\t\t\tmax -= tween._startTime;\n\t\t\t\t\t\t\tif (self._timeline.smoothChildTiming) {\n\t\t\t\t\t\t\t\tself._startTime += tween._startTime / self._timeScale;\n\t\t\t\t\t\t\t\tself._time -= tween._startTime;\n\t\t\t\t\t\t\t\tself._totalTime -= tween._startTime;\n\t\t\t\t\t\t\t\tself._rawPrevTime -= tween._startTime;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.shiftChildren(-tween._startTime, false, -9999999999);\n\t\t\t\t\t\t\tprevStart = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tend = tween._startTime + (tween._totalDuration / tween._timeScale);\n\t\t\t\t\t\tif (end > max) {\n\t\t\t\t\t\t\tmax = end;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = prev;\n\t\t\t\t\t}\n\t\t\t\t\tself._duration = self._totalDuration = max;\n\t\t\t\t\tself._dirty = false;\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\treturn (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (value === false && this._paused) { //if there's a pause directly at the spot from where we're unpausing, skip it.\n\t\t\t\tvar tween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tif (tween._startTime === this._time && tween.data === \"isPause\") {\n\t\t\t\t\t\ttween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.\n\t\t\t\t\t}\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Animation.prototype.paused.apply(this, arguments);\n\t\t};\n\n\t\tp.usesFrames = function() {\n\t\t\tvar tl = this._timeline;\n\t\t\twhile (tl._timeline) {\n\t\t\t\ttl = tl._timeline;\n\t\t\t}\n\t\t\treturn (tl === Animation._rootFramesTimeline);\n\t\t};\n\n\t\tp.rawTime = function(wrapRepeats) {\n\t\t\treturn (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;\n\t\t};\n\n\t\treturn TimelineLite;\n\n\t}, true);\n\nexport var TimelineLite = globals.TimelineLite;\nexport { TimelineLite as default };\n","/*!\n * VERSION: 2.1.3\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport TweenLite, { _gsScope, globals, Ease, Animation } from \"./TweenLite.js\";\nimport TimelineLite from \"./TimelineLite.js\";\n\n_gsScope._gsDefine(\"TimelineMax\", [\"TimelineLite\",\"TweenLite\",\"easing.Ease\"], function() {\n\t\t\n\t\tvar TimelineMax = function(vars) {\n\t\t\t\tTimelineLite.call(this, vars);\n\t\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\t\tthis._cycle = 0;\n\t\t\t\tthis._yoyo = !!this.vars.yoyo;\n\t\t\t\tthis._dirty = true;\n\t\t\t},\n\t\t\t_tinyNum = 0.00000001,\n\t\t\tTweenLiteInternals = TweenLite._internals,\n\t\t\t_lazyTweens = TweenLiteInternals.lazyTweens,\n\t\t\t_lazyRender = TweenLiteInternals.lazyRender,\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_easeNone = new Ease(null, null, 1, 0),\n\t\t\tp = TimelineMax.prototype = new TimelineLite();\n\n\t\tp.constructor = TimelineMax;\n\t\tp.kill()._gc = false;\n\t\tTimelineMax.version = \"2.1.3\";\n\n\t\tp.invalidate = function() {\n\t\t\tthis._yoyo = !!this.vars.yoyo;\n\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\tthis._uncache(true);\n\t\t\treturn TimelineLite.prototype.invalidate.call(this);\n\t\t};\n\n\t\tp.addCallback = function(callback, position, params, scope) {\n\t\t\treturn this.add( TweenLite.delayedCall(0, callback, params, scope), position);\n\t\t};\n\n\t\tp.removeCallback = function(callback, position) {\n\t\t\tif (callback) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tthis._kill(null, callback);\n\t\t\t\t} else {\n\t\t\t\t\tvar a = this.getTweensOf(callback, false),\n\t\t\t\t\t\ti = a.length,\n\t\t\t\t\t\ttime = this._parseTimeOrLabel(position);\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (a[i]._startTime === time) {\n\t\t\t\t\t\t\ta[i]._enabled(false, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.removePause = function(position) {\n\t\t\treturn this.removeCallback(TimelineLite._internals.pauseCallback, position);\n\t\t};\n\n\t\tp.tweenTo = function(position, vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar copy = {ease:_easeNone, useFrames:this.usesFrames(), immediateRender:false, lazy:false},\n\t\t\t\tEngine = (vars.repeat && _globals.TweenMax) || TweenLite,\n\t\t\t\tduration, p, t;\n\t\t\tfor (p in vars) {\n\t\t\t\tcopy[p] = vars[p];\n\t\t\t}\n\t\t\tcopy.time = this._parseTimeOrLabel(position);\n\t\t\tduration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;\n\t\t\tt = new Engine(this, duration, copy);\n\t\t\tcopy.onStart = function() {\n\t\t\t\tt.target.paused(true);\n\t\t\t\tif (t.vars.time !== t.target.time() && duration === t.duration() && !t.isFromTo) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.\n\t\t\t\t\tt.duration( Math.abs( t.vars.time - t.target.time()) / t.target._timeScale ).render(t.time(), true, true); //render() right away to ensure that things look right, especially in the case of .tweenTo(0).\n\t\t\t\t}\n\t\t\t\tif (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.\n\t\t\t\t\tvars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback(\"onStart\") or it'll point to the copy.onStart and we'll get a recursion error.\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn t;\n\t\t};\n\n\t\tp.tweenFromTo = function(fromPosition, toPosition, vars) {\n\t\t\tvars = vars || {};\n\t\t\tfromPosition = this._parseTimeOrLabel(fromPosition);\n\t\t\tvars.startAt = {onComplete:this.seek, onCompleteParams:[fromPosition], callbackScope:this};\n\t\t\tvars.immediateRender = (vars.immediateRender !== false);\n\t\t\tvar t = this.tweenTo(toPosition, vars);\n\t\t\tt.isFromTo = 1; //to ensure we don't mess with the duration in the onStart (we've got the start and end values here, so lock it in)\n\t\t\treturn t.duration((Math.abs( t.vars.time - fromPosition) / this._timeScale) || 0.001);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tif (this._gc) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\tvar self = this,\n\t\t\t\tprevTime = self._time,\n\t\t\t\ttotalDur = (!self._dirty) ? self._totalDuration : self.totalDuration(),\n\t\t\t\tdur = self._duration,\n\t\t\t\tprevTotalTime = self._totalTime,\n\t\t\t\tprevStart = self._startTime,\n\t\t\t\tprevTimeScale = self._timeScale,\n\t\t\t\tprevRawPrevTime = self._rawPrevTime,\n\t\t\t\tprevPaused = self._paused,\n\t\t\t\tprevCycle = self._cycle,\n\t\t\t\ttween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime, pauseTime;\n\t\t\tif (prevTime !== self._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n\t\t\t\ttime += self._time - prevTime;\n\t\t\t}\n\t\t\tif (time >= totalDur - _tinyNum && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tif (!self._locked) {\n\t\t\t\t\tself._totalTime = totalDur;\n\t\t\t\t\tself._cycle = self._repeat;\n\t\t\t\t}\n\t\t\t\tif (!self._reversed) if (!self._hasPausedChild()) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tinternalForce = !!self._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t\tif (self._duration === 0) if ((time <= 0 && time >= -_tinyNum) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && self._first) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tself._rawPrevTime = (self._duration || !suppressEvents || time || self._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\tif (self._yoyo && (self._cycle & 1)) {\n\t\t\t\t\tself._time = time = 0;\n\t\t\t\t} else {\n\t\t\t\t\tself._time = dur;\n\t\t\t\t\ttime = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.\n\t\t\t\t}\n\n\t\t\t} else if (time < _tinyNum) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tif (!self._locked) {\n\t\t\t\t\tself._totalTime = self._cycle = 0;\n\t\t\t\t}\n\t\t\t\tself._time = 0;\n\t\t\t\tif (time > -_tinyNum) {\n\t\t\t\t\ttime = 0;\n\t\t\t\t}\n\t\t\t\tif (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !self._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = self._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tself._active = false;\n\t\t\t\t\tif (self._timeline.autoRemoveChildren && self._reversed) {\n\t\t\t\t\t\tinternalForce = isComplete = true;\n\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t} else if (prevRawPrevTime >= 0 && self._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t\tself._rawPrevTime = time;\n\t\t\t\t} else {\n\t\t\t\t\tself._rawPrevTime = (dur || !suppressEvents || time || self._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\tif (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n\t\t\t\t\t\ttween = self._first;\n\t\t\t\t\t\twhile (tween && tween._startTime === 0) {\n\t\t\t\t\t\t\tif (!tween._duration) {\n\t\t\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttime = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n\t\t\t\t\tif (!self._initted) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.\n\t\t\t\t\tinternalForce = true;\n\t\t\t\t}\n\t\t\t\tself._time = self._rawPrevTime = time;\n\t\t\t\tif (!self._locked) {\n\t\t\t\t\tself._totalTime = time;\n\t\t\t\t\tif (self._repeat !== 0) {\n\t\t\t\t\t\tcycleDuration = dur + self._repeatDelay;\n\t\t\t\t\t\tself._cycle = (self._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)\n\t\t\t\t\t\tif (self._cycle) if (self._cycle === self._totalTime / cycleDuration && prevTotalTime <= time) {\n\t\t\t\t\t\t\tself._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._time = self._totalTime - (self._cycle * cycleDuration);\n\t\t\t\t\t\tif (self._yoyo) if (self._cycle & 1) {\n\t\t\t\t\t\t\tself._time = dur - self._time;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self._time > dur) {\n\t\t\t\t\t\t\tself._time = dur;\n\t\t\t\t\t\t\ttime = dur + 0.0001; //to avoid occasional floating point rounding error\n\t\t\t\t\t\t} else if (self._time < 0) {\n\t\t\t\t\t\t\tself._time = time = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttime = self._time;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._hasPause && !self._forcingPlayhead && !suppressEvents) {\n\t\t\t\ttime = self._time;\n\t\t\t\tif (time > prevTime || (self._repeat && prevCycle !== self._cycle)) {\n\t\t\t\t\ttween = self._first;\n\t\t\t\t\twhile (tween && tween._startTime <= time && !pauseTween) {\n\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && self._rawPrevTime === 0)) {\n\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttween = self._last;\n\t\t\t\t\twhile (tween && tween._startTime >= time && !pauseTween) {\n\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && tween._rawPrevTime > 0) {\n\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = tween._prev;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pauseTween) {\n\t\t\t\t\tpauseTime = self._startTime + (self._reversed ? self._duration - pauseTween._startTime : pauseTween._startTime) / self._timeScale;\n\t\t\t\t\tif (pauseTween._startTime < dur) {\n\t\t\t\t\t\tself._time = self._rawPrevTime = time = pauseTween._startTime;\n\t\t\t\t\t\tself._totalTime = time + (self._cycle * (self._totalDuration + self._repeatDelay));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._cycle !== prevCycle) if (!self._locked) {\n\t\t\t\t/*\n\t\t\t\tmake sure children at the end/beginning of the timeline are rendered properly. If, for example,\n\t\t\t\ta 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n\t\t\t\twould get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n\t\t\t\tcould be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n\t\t\t\twe need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n\t\t\t\tensure that zero-duration tweens at the very beginning or end of the TimelineMax work.\n\t\t\t\t*/\n\t\t\t\tvar backwards = (self._yoyo && (prevCycle & 1) !== 0),\n\t\t\t\t\twrap = (backwards === (self._yoyo && (self._cycle & 1) !== 0)),\n\t\t\t\t\trecTotalTime = self._totalTime,\n\t\t\t\t\trecCycle = self._cycle,\n\t\t\t\t\trecRawPrevTime = self._rawPrevTime,\n\t\t\t\t\trecTime = self._time;\n\n\t\t\t\tself._totalTime = prevCycle * dur;\n\t\t\t\tif (self._cycle < prevCycle) {\n\t\t\t\t\tbackwards = !backwards;\n\t\t\t\t} else {\n\t\t\t\t\tself._totalTime += dur;\n\t\t\t\t}\n\t\t\t\tself._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a \"cleaner\" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.\n\n\t\t\t\tself._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;\n\t\t\t\tself._cycle = prevCycle;\n\t\t\t\tself._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()\n\t\t\t\tprevTime = (backwards) ? 0 : dur;\n\t\t\t\tself.render(prevTime, suppressEvents, (dur === 0));\n\t\t\t\tif (!suppressEvents) if (!self._gc) {\n\t\t\t\t\tif (self.vars.onRepeat) {\n\t\t\t\t\t\tself._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.\n\t\t\t\t\t\tself._locked = false;\n\t\t\t\t\t\tself._callback(\"onRepeat\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (prevTime !== self._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (wrap) {\n\t\t\t\t\tself._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.\n\t\t\t\t\tself._locked = true;\n\t\t\t\t\tprevTime = (backwards) ? dur + 0.0001 : -0.0001;\n\t\t\t\t\tself.render(prevTime, true, false);\n\t\t\t\t}\n\t\t\t\tself._locked = false;\n\t\t\t\tif (self._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tself._time = recTime;\n\t\t\t\tself._totalTime = recTotalTime;\n\t\t\t\tself._cycle = recCycle;\n\t\t\t\tself._rawPrevTime = recRawPrevTime;\n\t\t\t}\n\n\t\t\tif ((self._time === prevTime || !self._first) && !force && !internalForce && !pauseTween) {\n\t\t\t\tif (prevTotalTime !== self._totalTime) if (self._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\n\t\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else if (!self._initted) {\n\t\t\t\tself._initted = true;\n\t\t\t}\n\n\t\t\tif (!self._active) if (!self._paused && self._totalTime !== prevTotalTime && time > 0) {\n\t\t\t\tself._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n\t\t\t}\n\n\t\t\tif (prevTotalTime === 0) if (self.vars.onStart) if (self._totalTime !== 0 || !self._totalDuration) if (!suppressEvents) {\n\t\t\t\tself._callback(\"onStart\");\n\t\t\t}\n\n\t\t\tcurTime = self._time;\n\t\t\tif (curTime >= prevTime) {\n\t\t\t\ttween = self._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\t\tif (curTime !== self._time || (self._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || (tween._startTime <= self._time && !tween._paused && !tween._gc)) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tself.pause();\n\t\t\t\t\t\t\tself._pauseTime = pauseTime; //so that when we resume(), it's starting from exactly the right spot (the pause() method uses the rawTime for the parent, but that may be a bit too far ahead)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttween = self._last;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._prev; //record it here because the value could change after rendering...\n\t\t\t\t\tif (curTime !== self._time || (self._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tpauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n\t\t\t\t\t\t\twhile (pauseTween && pauseTween.endTime() > self._time) {\n\t\t\t\t\t\t\t\tpauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t\t\tpauseTween = pauseTween._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpauseTween = null;\n\t\t\t\t\t\t\tself.pause();\n\t\t\t\t\t\t\tself._pauseTime = pauseTime; //so that when we resume(), it's starting from exactly the right spot (the pause() method uses the rawTime for the parent, but that may be a bit too far ahead)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._onUpdate) if (!suppressEvents) {\n\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t}\n\t\t\tif (callback) if (!self._locked) if (!self._gc) if (prevStart === self._startTime || prevTimeScale !== self._timeScale) if (self._time === 0 || totalDur >= self.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tif (self._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tself._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tself._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && self.vars[callback]) {\n\t\t\t\t\tself._callback(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.getActive = function(nested, tweens, timelines) {\n\t\t\tvar a = [],\n\t\t\t\tall = this.getChildren(nested || (nested == null), tweens || (nested == null), !!timelines),\n\t\t\t\tcnt = 0,\n\t\t\t\tl = all.length,\n\t\t\t\ti, tween;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\ttween = all[i];\n\t\t\t\tif (tween.isActive()) {\n\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\n\t\tp.getLabelAfter = function(time) {\n\t\t\tif (!time) if (time !== 0) { //faster than isNan()\n\t\t\t\ttime = this._time;\n\t\t\t}\n\t\t\tvar labels = this.getLabelsArray(),\n\t\t\t\tl = labels.length,\n\t\t\t\ti;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tif (labels[i].time > time) {\n\t\t\t\t\treturn labels[i].name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tp.getLabelBefore = function(time) {\n\t\t\tif (time == null) {\n\t\t\t\ttime = this._time;\n\t\t\t}\n\t\t\tvar labels = this.getLabelsArray(),\n\t\t\t\ti = labels.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (labels[i].time < time) {\n\t\t\t\t\treturn labels[i].name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tp.getLabelsArray = function() {\n\t\t\tvar a = [],\n\t\t\t\tcnt = 0,\n\t\t\t\tp;\n\t\t\tfor (p in this._labels) {\n\t\t\t\ta[cnt++] = {time:this._labels[p], name:p};\n\t\t\t}\n\t\t\ta.sort(function(a,b) {\n\t\t\t\treturn a.time - b.time;\n\t\t\t});\n\t\t\treturn a;\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tthis._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat\n\t\t\treturn TimelineLite.prototype.invalidate.call(this);\n\t\t};\n\n\n//---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------\n\n\t\tp.progress = function(value, suppressEvents) {\n\t\t\treturn (!arguments.length) ? (this._time / this.duration()) || 0 : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);\n\t\t};\n\n\t\tp.totalProgress = function(value, suppressEvents) {\n\t\t\treturn (!arguments.length) ? (this._totalTime / this.totalDuration()) || 0 : this.totalTime( this.totalDuration() * value, suppressEvents);\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tTimelineLite.prototype.totalDuration.call(this); //just forces refresh\n\t\t\t\t\t//Instead of Infinity, we use 999999999999 so that we can accommodate reverses.\n\t\t\t\t\tthis._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\treturn (this._repeat === -1 || !value) ? this : this.timeScale( this.totalDuration() / value );\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\tvar duration = this._duration,\n\t\t\t\tcycle = this._cycle,\n\t\t\t\tcycleDur = cycle * (duration + this._repeatDelay);\n\t\t\tif (value > duration) {\n\t\t\t\tvalue = duration;\n\t\t\t}\n\t\t\treturn this.totalTime((this._yoyo && (cycle & 1)) ? duration - value + cycleDur : this._repeat ? value + cycleDur : value, suppressEvents);\n\t\t};\n\n\t\tp.repeat = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeat;\n\t\t\t}\n\t\t\tthis._repeat = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.repeatDelay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeatDelay;\n\t\t\t}\n\t\t\tthis._repeatDelay = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.yoyo = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._yoyo;\n\t\t\t}\n\t\t\tthis._yoyo = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.currentLabel = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this.getLabelBefore(this._time + _tinyNum);\n\t\t\t}\n\t\t\treturn this.seek(value, true);\n\t\t};\n\t\t\n\t\treturn TimelineMax;\n\t\t\n\t}, true);\n\nexport var TimelineMax = globals.TimelineMax;\nexport { TimelineLite, TimelineMax as default };","/*!\n * VERSION: 2.1.3\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\n/* ES6 changes:\n\t- declare and export _gsScope at top.\n\t- set var TweenLite = the result of the main function\n\t- export default TweenLite at the bottom\n\t- return TweenLite at the bottom of the main function\n\t- pass in _gsScope as the first parameter of the main function (which is actually at the bottom)\n\t- remove the \"export to multiple environments\" in Definition().\n */\nexport var _gsScope = (typeof(window) !== \"undefined\") ? window : (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || {};\n\nexport var TweenLite = (function(window) {\n\n\t\t\"use strict\";\n\t\tvar _exports = {},\n\t\t\t_doc = window.document,\n\t\t\t_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n\t\tif (_globals.TweenLite) {\n\t\t\treturn _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.\n\t\t}\n\t\tvar _namespace = function(ns) {\n\t\t\t\tvar a = ns.split(\".\"),\n\t\t\t\t\tp = _globals, i;\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\tp[a[i]] = p = p[a[i]] || {};\n\t\t\t\t}\n\t\t\t\treturn p;\n\t\t\t},\n\t\t\tgs = _namespace(\"com.greensock\"),\n\t\t\t_tinyNum = 0.00000001,\n\t\t\t_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_emptyFunc = function() {},\n\t\t\t_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n\t\t\t\tvar toString = Object.prototype.toString,\n\t\t\t\t\tarray = toString.call([]);\n\t\t\t\treturn function(obj) {\n\t\t\t\t\treturn obj != null && (obj instanceof Array || (typeof(obj) === \"object\" && !!obj.push && toString.call(obj) === array));\n\t\t\t\t};\n\t\t\t}()),\n\t\t\ta, i, p, _ticker, _tickerActive,\n\t\t\t_defLookup = {},\n\n\t\t\t/**\n\t\t\t * @constructor\n\t\t\t * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n\t\t\t * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n\t\t\t * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n\t\t\t * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n\t\t\t *\n\t\t\t * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n\t\t\t * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n\t\t\t * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n\t\t\t * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n\t\t\t * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n\t\t\t * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n\t\t\t * sandbox the banner one like:\n\t\t\t *\n\t\t\t * <script>\n\t\t\t *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     gs.TweenLite.to(...); //would use v1.7\n\t\t\t *     TweenLite.to(...); //would use v1.6\n\t\t\t * </script>\n\t\t\t *\n\t\t\t * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n\t\t\t * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n\t\t\t * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n\t\t\t * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n\t\t\t */\n\t\t\tDefinition = function(ns, dependencies, func, global) {\n\t\t\t\tthis.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses\n\t\t\t\t_defLookup[ns] = this;\n\t\t\t\tthis.gsClass = null;\n\t\t\t\tthis.func = func;\n\t\t\t\tvar _classes = [];\n\t\t\t\tthis.check = function(init) {\n\t\t\t\t\tvar i = dependencies.length,\n\t\t\t\t\t\tmissing = i,\n\t\t\t\t\t\tcur, a, n, cl;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n\t\t\t\t\t\t\t_classes[i] = cur.gsClass;\n\t\t\t\t\t\t\tmissing--;\n\t\t\t\t\t\t} else if (init) {\n\t\t\t\t\t\t\tcur.sc.push(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (missing === 0 && func) {\n\t\t\t\t\t\ta = (\"com.greensock.\" + ns).split(\".\");\n\t\t\t\t\t\tn = a.pop();\n\t\t\t\t\t\tcl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func, _classes);\n\n\t\t\t\t\t\t//exports to multiple environments\n\t\t\t\t\t\tif (global) {\n\t\t\t\t\t\t\t_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\t\t\t\t\t\t\tif (ns === moduleName) {\n\t\t\t\t\t\t\t\t\tmodule.exports = _exports[moduleName] = cl;\n\t\t\t\t\t\t\t\t\tfor (i in _exports) {\n\t\t\t\t\t\t\t\t\t\tcl[i] = _exports[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (_exports[moduleName]) {\n\t\t\t\t\t\t\t\t\t_exports[moduleName][n] = cl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (typeof(define) === \"function\" && define.amd){ //AMD\n\t\t\t\t\t\t\t\tdefine((window.GreenSockAMDPath ? window.GreenSockAMDPath + \"/\" : \"\") + ns.split(\".\").pop(), [], function() { return cl; });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0; i < this.sc.length; i++) {\n\t\t\t\t\t\t\tthis.sc[i].check();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.check(true);\n\t\t\t},\n\n\t\t\t//used to create Definition instances (which basically registers a class that has dependencies).\n\t\t\t_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {\n\t\t\t\treturn new Definition(ns, dependencies, func, global);\n\t\t\t},\n\n\t\t\t//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n\t\t\t_class = gs._class = function(ns, func, global) {\n\t\t\t\tfunc = func || function() {};\n\t\t\t\t_gsDefine(ns, [], function(){ return func; }, global);\n\t\t\t\treturn func;\n\t\t\t};\n\n\t\t_gsDefine.globals = _globals;\n\n\n\n/*\n * ----------------------------------------------------------------\n * Ease\n * ----------------------------------------------------------------\n */\n\t\tvar _baseParams = [0, 0, 1, 1],\n\t\t\tEase = _class(\"easing.Ease\", function(func, extraParams, type, power) {\n\t\t\t\tthis._func = func;\n\t\t\t\tthis._type = type || 0;\n\t\t\t\tthis._power = power || 0;\n\t\t\t\tthis._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n\t\t\t}, true),\n\t\t\t_easeMap = Ease.map = {},\n\t\t\t_easeReg = Ease.register = function(ease, names, types, create) {\n\t\t\t\tvar na = names.split(\",\"),\n\t\t\t\t\ti = na.length,\n\t\t\t\t\tta = (types || \"easeIn,easeOut,easeInOut\").split(\",\"),\n\t\t\t\t\te, name, j, type;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tname = na[i];\n\t\t\t\t\te = create ? _class(\"easing.\"+name, null, true) : gs.easing[name] || {};\n\t\t\t\t\tj = ta.length;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\ttype = ta[j];\n\t\t\t\t\t\t_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tp = Ease.prototype;\n\t\tp._calcEnd = false;\n\t\tp.getRatio = function(p) {\n\t\t\tif (this._func) {\n\t\t\t\tthis._params[0] = p;\n\t\t\t\treturn this._func.apply(null, this._params);\n\t\t\t}\n\t\t\tvar t = this._type,\n\t\t\t\tpw = this._power,\n\t\t\t\tr = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\t\t\tif (pw === 1) {\n\t\t\t\tr *= r;\n\t\t\t} else if (pw === 2) {\n\t\t\t\tr *= r * r;\n\t\t\t} else if (pw === 3) {\n\t\t\t\tr *= r * r * r;\n\t\t\t} else if (pw === 4) {\n\t\t\t\tr *= r * r * r * r;\n\t\t\t}\n\t\t\treturn (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t};\n\n\t\t//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n\t\ta = [\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"];\n\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\tp = a[i]+\",Power\"+i;\n\t\t\t_easeReg(new Ease(null,null,1,i), p, \"easeOut\", true);\n\t\t\t_easeReg(new Ease(null,null,2,i), p, \"easeIn\" + ((i === 0) ? \",easeNone\" : \"\"));\n\t\t\t_easeReg(new Ease(null,null,3,i), p, \"easeInOut\");\n\t\t}\n\t\t_easeMap.linear = gs.easing.Linear.easeIn;\n\t\t_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n/*\n * ----------------------------------------------------------------\n * EventDispatcher\n * ----------------------------------------------------------------\n */\n\t\tvar EventDispatcher = _class(\"events.EventDispatcher\", function(target) {\n\t\t\tthis._listeners = {};\n\t\t\tthis._eventTarget = target || this;\n\t\t});\n\t\tp = EventDispatcher.prototype;\n\n\t\tp.addEventListener = function(type, callback, scope, useParam, priority) {\n\t\t\tpriority = priority || 0;\n\t\t\tvar list = this._listeners[type],\n\t\t\t\tindex = 0,\n\t\t\t\tlistener, i;\n\t\t\tif (this === _ticker && !_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (list == null) {\n\t\t\t\tthis._listeners[type] = list = [];\n\t\t\t}\n\t\t\ti = list.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlistener = list[i];\n\t\t\t\tif (listener.c === callback && listener.s === scope) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t} else if (index === 0 && listener.pr < priority) {\n\t\t\t\t\tindex = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});\n\t\t};\n\n\t\tp.removeEventListener = function(type, callback) {\n\t\t\tvar list = this._listeners[type], i;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (list[i].c === callback) {\n\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.dispatchEvent = function(type) {\n\t\t\tvar list = this._listeners[type],\n\t\t\t\ti, t, listener;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\tif (i > 1) {\n\t\t\t\t\tlist = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)\n\t\t\t\t}\n\t\t\t\tt = this._eventTarget;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tlistener = list[i];\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tif (listener.up) {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t, {type:type, target:t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * Ticker\n * ----------------------------------------------------------------\n */\n \t\tvar _reqAnimFrame = window.requestAnimationFrame,\n\t\t\t_cancelAnimFrame = window.cancelAnimationFrame,\n\t\t\t_getTime = Date.now || function() {return new Date().getTime();},\n\t\t\t_lastUpdate = _getTime();\n\n\t\t//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n\t\ta = [\"ms\",\"moz\",\"webkit\",\"o\"];\n\t\ti = a.length;\n\t\twhile (--i > -1 && !_reqAnimFrame) {\n\t\t\t_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];\n\t\t\t_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];\n\t\t}\n\n\t\t_class(\"Ticker\", function(fps, useRAF) {\n\t\t\tvar _self = this,\n\t\t\t\t_startTime = _getTime(),\n\t\t\t\t_useRAF = (useRAF !== false && _reqAnimFrame) ? \"auto\" : false,\n\t\t\t\t_lagThreshold = 500,\n\t\t\t\t_adjustedLag = 33,\n\t\t\t\t_tickWord = \"tick\", //helps reduce gc burden\n\t\t\t\t_fps, _req, _id, _gap, _nextTime,\n\t\t\t\t_tick = function(manual) {\n\t\t\t\t\tvar elapsed = _getTime() - _lastUpdate,\n\t\t\t\t\t\toverlap, dispatch;\n\t\t\t\t\tif (elapsed > _lagThreshold) {\n\t\t\t\t\t\t_startTime += elapsed - _adjustedLag;\n\t\t\t\t\t}\n\t\t\t\t\t_lastUpdate += elapsed;\n\t\t\t\t\t_self.time = (_lastUpdate - _startTime) / 1000;\n\t\t\t\t\toverlap = _self.time - _nextTime;\n\t\t\t\t\tif (!_fps || overlap > 0 || manual === true) {\n\t\t\t\t\t\t_self.frame++;\n\t\t\t\t\t\t_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (manual !== true) { //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\t\t\t\t\t\t_id = _req(_tick);\n\t\t\t\t\t}\n\t\t\t\t\tif (dispatch) {\n\t\t\t\t\t\t_self.dispatchEvent(_tickWord);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\tEventDispatcher.call(_self);\n\t\t\t_self.time = _self.frame = 0;\n\t\t\t_self.tick = function() {\n\t\t\t\t_tick(true);\n\t\t\t};\n\n\t\t\t_self.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t\tif (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.\n\t\t\t\t\treturn (_lagThreshold < 1 / _tinyNum);\n\t\t\t\t}\n\t\t\t\t_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited\n\t\t\t\t_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n\t\t\t};\n\n\t\t\t_self.sleep = function() {\n\t\t\t\tif (_id == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_useRAF || !_cancelAnimFrame) {\n\t\t\t\t\tclearTimeout(_id);\n\t\t\t\t} else {\n\t\t\t\t\t_cancelAnimFrame(_id);\n\t\t\t\t}\n\t\t\t\t_req = _emptyFunc;\n\t\t\t\t_id = null;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = false;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_self.wake = function(seamless) {\n\t\t\t\tif (_id !== null) {\n\t\t\t\t\t_self.sleep();\n\t\t\t\t} else if (seamless) {\n\t\t\t\t\t_startTime += -_lastUpdate + (_lastUpdate = _getTime());\n\t\t\t\t} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n\t\t\t\t\t_lastUpdate = _getTime() - _lagThreshold + 5;\n\t\t\t\t}\n\t\t\t\t_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = true;\n\t\t\t\t}\n\t\t\t\t_tick(2);\n\t\t\t};\n\n\t\t\t_self.fps = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _fps;\n\t\t\t\t}\n\t\t\t\t_fps = value;\n\t\t\t\t_gap = 1 / (_fps || 60);\n\t\t\t\t_nextTime = this.time + _gap;\n\t\t\t\t_self.wake();\n\t\t\t};\n\n\t\t\t_self.useRAF = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _useRAF;\n\t\t\t\t}\n\t\t\t\t_self.sleep();\n\t\t\t\t_useRAF = value;\n\t\t\t\t_self.fps(_fps);\n\t\t\t};\n\t\t\t_self.fps(fps);\n\n\t\t\t//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (_useRAF === \"auto\" && _self.frame < 5 && (_doc || {}).visibilityState !== \"hidden\") {\n\t\t\t\t\t_self.useRAF(false);\n\t\t\t\t}\n\t\t\t}, 1500);\n\t\t});\n\n\t\tp = gs.Ticker.prototype = new gs.events.EventDispatcher();\n\t\tp.constructor = gs.Ticker;\n\n\n/*\n * ----------------------------------------------------------------\n * Animation\n * ----------------------------------------------------------------\n */\n\t\tvar Animation = _class(\"core.Animation\", function(duration, vars) {\n\t\t\t\tthis.vars = vars = vars || {};\n\t\t\t\tthis._duration = this._totalDuration = duration || 0;\n\t\t\t\tthis._delay = Number(vars.delay) || 0;\n\t\t\t\tthis._timeScale = 1;\n\t\t\t\tthis._active = !!vars.immediateRender;\n\t\t\t\tthis.data = vars.data;\n\t\t\t\tthis._reversed = !!vars.reversed;\n\n\t\t\t\tif (!_rootTimeline) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\n\t\t\t\tvar tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n\t\t\t\ttl.add(this, tl._time);\n\n\t\t\t\tif (this.vars.paused) {\n\t\t\t\t\tthis.paused(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t_ticker = Animation.ticker = new gs.Ticker();\n\t\tp = Animation.prototype;\n\t\tp._dirty = p._gc = p._initted = p._paused = false;\n\t\tp._totalTime = p._time = 0;\n\t\tp._rawPrevTime = -1;\n\t\tp._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n\t\tp._paused = false;\n\n\n\t\t//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n\t\tvar _checkTimeout = function() {\n\t\t\t\tif (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== \"hidden\" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\tvar t = setTimeout(_checkTimeout, 2000);\n\t\t\t\tif (t.unref) {\n\t\t\t\t\t// allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.\n\t\t\t\t\tt.unref();\n\t\t\t\t}\n\t\t\t};\n\t\t_checkTimeout();\n\n\n\t\tp.play = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(false).paused(false);\n\t\t};\n\n\t\tp.pause = function(atTime, suppressEvents) {\n\t\t\tif (atTime != null) {\n\t\t\t\tthis.seek(atTime, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.resume = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(false);\n\t\t};\n\n\t\tp.seek = function(time, suppressEvents) {\n\t\t\treturn this.totalTime(Number(time), suppressEvents !== false);\n\t\t};\n\n\t\tp.restart = function(includeDelay, suppressEvents) {\n\t\t\treturn this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);\n\t\t};\n\n\t\tp.reverse = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek((from || this.totalDuration()), suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(true).paused(false);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\t//stub - we override this method in subclasses.\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\tthis._initted = this._gc = false;\n\t\t\tthis._rawPrevTime = -1;\n\t\t\tif (this._gc || !this.timeline) {\n\t\t\t\tthis._enabled(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.isActive = function() {\n\t\t\tvar tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.\n\t\t\t\tstartTime = this._startTime,\n\t\t\t\trawTime;\n\t\t\treturn (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - _tinyNum));\n\t\t};\n\n\t\tp._enabled = function (enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tthis._gc = !enabled;\n\t\t\tthis._active = this.isActive();\n\t\t\tif (ignoreTimeline !== true) {\n\t\t\t\tif (enabled && !this.timeline) {\n\t\t\t\t\tthis._timeline.add(this, this._startTime - this._delay);\n\t\t\t\t} else if (!enabled && this.timeline) {\n\t\t\t\t\tthis._timeline._remove(this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n\t\tp._kill = function(vars, target) {\n\t\t\treturn this._enabled(false, false);\n\t\t};\n\n\t\tp.kill = function(vars, target) {\n\t\t\tthis._kill(vars, target);\n\t\t\treturn this;\n\t\t};\n\n\t\tp._uncache = function(includeSelf) {\n\t\t\tvar tween = includeSelf ? this : this.timeline;\n\t\t\twhile (tween) {\n\t\t\t\ttween._dirty = true;\n\t\t\t\ttween = tween.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._swapSelfInParams = function(params) {\n\t\t\tvar i = params.length,\n\t\t\t\tcopy = params.concat();\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (params[i] === \"{self}\") {\n\t\t\t\t\tcopy[i] = this;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn copy;\n\t\t};\n\n\t\tp._callback = function(type) {\n\t\t\tvar v = this.vars,\n\t\t\t\tcallback = v[type],\n\t\t\t\tparams = v[type + \"Params\"],\n\t\t\t\tscope = v[type + \"Scope\"] || v.callbackScope || this,\n\t\t\t\tl = params ? params.length : 0;\n\t\t\tswitch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n\t\t\t\tcase 0: callback.call(scope); break;\n\t\t\t\tcase 1: callback.call(scope, params[0]); break;\n\t\t\t\tcase 2: callback.call(scope, params[0], params[1]); break;\n\t\t\t\tdefault: callback.apply(scope, params);\n\t\t\t}\n\t\t};\n\n//----Animation getters/setters --------------------------------------------------------\n\n\t\tp.eventCallback = function(type, callback, params, scope) {\n\t\t\tif ((type || \"\").substr(0,2) === \"on\") {\n\t\t\t\tvar v = this.vars;\n\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\treturn v[type];\n\t\t\t\t}\n\t\t\t\tif (callback == null) {\n\t\t\t\t\tdelete v[type];\n\t\t\t\t} else {\n\t\t\t\t\tv[type] = callback;\n\t\t\t\t\tv[type + \"Params\"] = (_isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1) ? this._swapSelfInParams(params) : params;\n\t\t\t\t\tv[type + \"Scope\"] = scope;\n\t\t\t\t}\n\t\t\t\tif (type === \"onUpdate\") {\n\t\t\t\t\tthis._onUpdate = callback;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.delay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._delay;\n\t\t\t}\n\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\tthis.startTime( this._startTime + value - this._delay );\n\t\t\t}\n\t\t\tthis._delay = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tthis._dirty = false;\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tthis._duration = this._totalDuration = value;\n\t\t\tthis._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n\t\t\tif (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n\t\t\t\tthis.totalTime(this._totalTime * (value / this._duration), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tthis._dirty = false;\n\t\t\treturn (!arguments.length) ? this._totalDuration : this.duration(value);\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\treturn this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._totalTime;\n\t\t\t}\n\t\t\tif (this._timeline) {\n\t\t\t\tif (time < 0 && !uncapped) {\n\t\t\t\t\ttime += this.totalDuration();\n\t\t\t\t}\n\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\tif (this._dirty) {\n\t\t\t\t\t\tthis.totalDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar totalDuration = this._totalDuration,\n\t\t\t\t\t\ttl = this._timeline;\n\t\t\t\t\tif (time > totalDuration && !uncapped) {\n\t\t\t\t\t\ttime = totalDuration;\n\t\t\t\t\t}\n\t\t\t\t\tthis._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);\n\t\t\t\t\tif (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n\t\t\t\t\t\tthis._uncache(false);\n\t\t\t\t\t}\n\t\t\t\t\t//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n\t\t\t\t\tif (tl._timeline) {\n\t\t\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\t\t\tif (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n\t\t\t\t\t\t\t\ttl.totalTime(tl._totalTime, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._gc) {\n\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t}\n\t\t\t\tif (this._totalTime !== time || this._duration === 0) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tthis.render(time, suppressEvents, false);\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.progress = p.totalProgress = function(value, suppressEvents) {\n\t\t\tvar duration = this.duration();\n\t\t\treturn (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);\n\t\t};\n\n\t\tp.startTime = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._startTime;\n\t\t\t}\n\t\t\tif (value !== this._startTime) {\n\t\t\t\tthis._startTime = value;\n\t\t\t\tif (this.timeline) if (this.timeline._sortChildren) {\n\t\t\t\t\tthis.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.endTime = function(includeRepeats) {\n\t\t\treturn this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;\n\t\t};\n\n\t\tp.timeScale = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._timeScale;\n\t\t\t}\n\t\t\tvar pauseTime, t;\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\tif (this._timeline && this._timeline.smoothChildTiming) {\n\t\t\t\tpauseTime = this._pauseTime;\n\t\t\t\tt = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();\n\t\t\t\tthis._startTime = t - ((t - this._startTime) * this._timeScale / value);\n\t\t\t}\n\t\t\tthis._timeScale = value;\n\t\t\tt = this.timeline;\n\t\t\twhile (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n\t\t\t\tt._dirty = true;\n\t\t\t\tt.totalDuration();\n\t\t\t\tt = t.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.reversed = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._reversed;\n\t\t\t}\n\t\t\tif (value != this._reversed) {\n\t\t\t\tthis._reversed = value;\n\t\t\t\tthis.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._paused;\n\t\t\t}\n\t\t\tvar tl = this._timeline,\n\t\t\t\traw, elapsed;\n\t\t\tif (value != this._paused) if (tl) {\n\t\t\t\tif (!_tickerActive && !value) {\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\traw = tl.rawTime();\n\t\t\t\telapsed = raw - this._pauseTime;\n\t\t\t\tif (!value && tl.smoothChildTiming) {\n\t\t\t\t\tthis._startTime += elapsed;\n\t\t\t\t\tthis._uncache(false);\n\t\t\t\t}\n\t\t\t\tthis._pauseTime = value ? raw : null;\n\t\t\t\tthis._paused = value;\n\t\t\t\tthis._active = this.isActive();\n\t\t\t\tif (!value && elapsed !== 0 && this._initted && this.duration()) {\n\t\t\t\t\traw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n\t\t\t\t\tthis.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._gc && !value) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * SimpleTimeline\n * ----------------------------------------------------------------\n */\n\t\tvar SimpleTimeline = _class(\"core.SimpleTimeline\", function(vars) {\n\t\t\tAnimation.call(this, 0, vars);\n\t\t\tthis.autoRemoveChildren = this.smoothChildTiming = true;\n\t\t});\n\n\t\tp = SimpleTimeline.prototype = new Animation();\n\t\tp.constructor = SimpleTimeline;\n\t\tp.kill()._gc = false;\n\t\tp._first = p._last = p._recent = null;\n\t\tp._sortChildren = false;\n\n\t\tp.add = p.insert = function(child, position, align, stagger) {\n\t\t\tvar prevTween, st;\n\t\t\tchild._startTime = Number(position || 0) + child._delay;\n\t\t\tif (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n\t\t\t\tchild._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);\n\t\t\t}\n\t\t\tif (child.timeline) {\n\t\t\t\tchild.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n\t\t\t}\n\t\t\tchild.timeline = child._timeline = this;\n\t\t\tif (child._gc) {\n\t\t\t\tchild._enabled(true, true);\n\t\t\t}\n\t\t\tprevTween = this._last;\n\t\t\tif (this._sortChildren) {\n\t\t\t\tst = child._startTime;\n\t\t\t\twhile (prevTween && prevTween._startTime > st) {\n\t\t\t\t\tprevTween = prevTween._prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prevTween) {\n\t\t\t\tchild._next = prevTween._next;\n\t\t\t\tprevTween._next = child;\n\t\t\t} else {\n\t\t\t\tchild._next = this._first;\n\t\t\t\tthis._first = child;\n\t\t\t}\n\t\t\tif (child._next) {\n\t\t\t\tchild._next._prev = child;\n\t\t\t} else {\n\t\t\t\tthis._last = child;\n\t\t\t}\n\t\t\tchild._prev = prevTween;\n\t\t\tthis._recent = child;\n\t\t\tif (this._timeline) {\n\t\t\t\tthis._uncache(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tif (tween.timeline === this) {\n\t\t\t\tif (!skipDisable) {\n\t\t\t\t\ttween._enabled(false, true);\n\t\t\t\t}\n\n\t\t\t\tif (tween._prev) {\n\t\t\t\t\ttween._prev._next = tween._next;\n\t\t\t\t} else if (this._first === tween) {\n\t\t\t\t\tthis._first = tween._next;\n\t\t\t\t}\n\t\t\t\tif (tween._next) {\n\t\t\t\t\ttween._next._prev = tween._prev;\n\t\t\t\t} else if (this._last === tween) {\n\t\t\t\t\tthis._last = tween._prev;\n\t\t\t\t}\n\t\t\t\ttween._next = tween._prev = tween.timeline = null;\n\t\t\t\tif (tween === this._recent) {\n\t\t\t\t\tthis._recent = this._last;\n\t\t\t\t}\n\n\t\t\t\tif (this._timeline) {\n\t\t\t\t\tthis._uncache(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar tween = this._first,\n\t\t\t\tnext;\n\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\tif (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t};\n\n\t\tp.rawTime = function() {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\treturn this._totalTime;\n\t\t};\n\n/*\n * ----------------------------------------------------------------\n * TweenLite\n * ----------------------------------------------------------------\n */\n\t\tvar TweenLite = _class(\"TweenLite\", function(target, duration, vars) {\n\t\t\t\tAnimation.call(this, duration, vars);\n\t\t\t\tthis.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n\t\t\t\tif (target == null) {\n\t\t\t\t\tthrow \"Cannot tween a null target.\";\n\t\t\t\t}\n\n\t\t\t\tthis.target = target = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\n\t\t\t\tvar isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),\n\t\t\t\t\toverwrite = this.vars.overwrite,\n\t\t\t\t\ti, targ, targets;\n\n\t\t\t\tthis._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === \"number\") ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n\t\t\t\tif ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== \"number\") {\n\t\t\t\t\tthis._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\t\tthis._propLookup = [];\n\t\t\t\t\tthis._siblings = [];\n\t\t\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\t\t\ttarg = targets[i];\n\t\t\t\t\t\tif (!targ) {\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\ttarg = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n\t\t\t\t\t\t\tif (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\t\ttargets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tthis._targets = targets = targets.concat(_slice(targ));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._siblings[i] = _register(targ, this, false);\n\t\t\t\t\t\tif (overwrite === 1) if (this._siblings[i].length > 1) {\n\t\t\t\t\t\t\t_applyOverwrite(targ, this, null, 1, this._siblings[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._propLookup = {};\n\t\t\t\t\tthis._siblings = _register(target, this, false);\n\t\t\t\t\tif (overwrite === 1) if (this._siblings.length > 1) {\n\t\t\t\t\t\t_applyOverwrite(target, this, null, 1, this._siblings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {\n\t\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative\n\t\t\t\t}\n\t\t\t}, true),\n\t\t\t_isSelector = function(v) {\n\t\t\t\treturn (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n\t\t\t},\n\t\t\t_autoCSS = function(vars, target) {\n\t\t\t\tvar css = {},\n\t\t\t\t\tp;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tif (!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n\t\t\t\t\t\tcss[p] = vars[p];\n\t\t\t\t\t\tdelete vars[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvars.css = css;\n\t\t\t};\n\n\t\tp = TweenLite.prototype = new Animation();\n\t\tp.constructor = TweenLite;\n\t\tp.kill()._gc = false;\n\n//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n\t\tp.ratio = 0;\n\t\tp._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n\t\tp._notifyPluginsOfEnabled = p._lazy = false;\n\n\t\tTweenLite.version = \"2.1.3\";\n\t\tTweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n\t\tTweenLite.defaultOverwrite = \"auto\";\n\t\tTweenLite.ticker = _ticker;\n\t\tTweenLite.autoSleep = 120;\n\t\tTweenLite.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t_ticker.lagSmoothing(threshold, adjustedLag);\n\t\t};\n\n\t\tTweenLite.selector = window.$ || window.jQuery || function(e) {\n\t\t\tvar selector = window.$ || window.jQuery;\n\t\t\tif (selector) {\n\t\t\t\tTweenLite.selector = selector;\n\t\t\t\treturn selector(e);\n\t\t\t}\n\t\t\tif (!_doc) { //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.\n\t\t\t\t_doc = window.document;\n\t\t\t}\n\t\t\treturn (!_doc) ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === \"#\") ? e.substr(1) : e));\n\t\t};\n\n\t\tvar _lazyTweens = [],\n\t\t\t_lazyLookup = {},\n\t\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_relExp = /[\\+-]=-?[\\.\\d]/,\n\t\t\t//_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n\t\t\t_setRatio = function(v) {\n\t\t\t\tvar pt = this._firstPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join(\"\") : this.start;\n\t\t\t\t\tif (pt.m) {\n\t\t\t\t\t\tval = pt.m.call(this._tween, val, this._target || pt.t, this._tween);\n\t\t\t\t\t} else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.f) {\n\t\t\t\t\t\tpt.t[pt.p] = val;\n\t\t\t\t\t} else if (pt.fp) {\n\t\t\t\t\t\tpt.t[pt.p](pt.fp, val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p](val);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_blobRound = function(v) {\n\t\t\t\treturn (((v * 1000) | 0) / 1000) + \"\";\n\t\t\t},\n\t\t\t//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n\t\t\t_blobDif = function(start, end, filter, pt) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\ts = \"\",\n\t\t\t\t\tcolor = 0,\n\t\t\t\t\tstartNums, endNums, num, i, l, nonNumbers, currentNum;\n\t\t\t\ta.start = start;\n\t\t\t\ta.end = end;\n\t\t\t\tstart = a[0] = start + \"\"; //ensure values are strings\n\t\t\t\tend = a[1] = end + \"\";\n\t\t\t\tif (filter) {\n\t\t\t\t\tfilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\t\t\t\t\tstart = a[0];\n\t\t\t\t\tend = a[1];\n\t\t\t\t}\n\t\t\t\ta.length = 0;\n\t\t\t\tstartNums = start.match(_numbersExp) || [];\n\t\t\t\tendNums = end.match(_numbersExp) || [];\n\t\t\t\tif (pt) {\n\t\t\t\t\tpt._next = null;\n\t\t\t\t\tpt.blob = 1;\n\t\t\t\t\ta._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)\n\t\t\t\t}\n\t\t\t\tl = endNums.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tcurrentNum = endNums[i];\n\t\t\t\t\tnonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);\n\t\t\t\t\ts += (nonNumbers || !i) ? nonNumbers : \",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n\t\t\t\t\tcharIndex += nonNumbers.length;\n\t\t\t\t\tif (color) { //sense rgba() values and round them.\n\t\t\t\t\t\tcolor = (color + 1) % 5;\n\t\t\t\t\t} else if (nonNumbers.substr(-5) === \"rgba(\") {\n\t\t\t\t\t\tcolor = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentNum === startNums[i] || startNums.length <= i) {\n\t\t\t\t\t\ts += currentNum;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\ta.push(s);\n\t\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = parseFloat(startNums[i]);\n\t\t\t\t\t\ta.push(num);\n\t\t\t\t\t\ta._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === \"=\") ? parseInt(currentNum.charAt(0) + \"1\", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : _blobRound}; //limiting to 3 decimal places and casting as a string can really help performance when array.join() is called!\n\t\t\t\t\t\t//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n\t\t\t\t\t}\n\t\t\t\t\tcharIndex += currentNum.length;\n\t\t\t\t}\n\t\t\t\ts += end.substr(charIndex);\n\t\t\t\tif (s) {\n\t\t\t\t\ta.push(s);\n\t\t\t\t}\n\t\t\t\ta.setRatio = _setRatio;\n\t\t\t\tif (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\t\t\t\t\ta.end = null;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t//note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n\t\t\t_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {\n\t\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\t\tend = end(index || 0, target);\n\t\t\t\t}\n\t\t\t\tvar type = typeof(target[prop]),\n\t\t\t\t\tgetterName = (type !== \"function\") ? \"\" : ((prop.indexOf(\"set\") || typeof(target[\"get\" + prop.substr(3)]) !== \"function\") ? prop : \"get\" + prop.substr(3)),\n\t\t\t\t\ts = (start !== \"get\") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),\n\t\t\t\t\tisRelative = (typeof(end) === \"string\" && end.charAt(1) === \"=\"),\n\t\t\t\t\tpt = {t:target, p:prop, s:s, f:(type === \"function\"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === \"function\") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + \"1\", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},\n\t\t\t\t\tblob;\n\n\t\t\t\tif (typeof(s) !== \"number\" || (typeof(end) !== \"number\" && !isRelative)) {\n\t\t\t\t\tif (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === \"boolean\" || typeof(end) === \"boolean\") {\n\t\t\t\t\t\t//a blob (string that has multiple numbers in it)\n\t\t\t\t\t\tpt.fp = funcParam;\n\t\t\t\t\t\tblob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + \"\").replace(/[0-9\\-\\.]/g, \"\") : end), stringFilter || TweenLite.defaultStringFilter, pt);\n\t\t\t\t\t\tpt = {t: blob, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.s = parseFloat(s);\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\tpt.c = (parseFloat(end) - pt.s) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pt.c) { //only add it to the linked list if there's a change.\n\t\t\t\t\tif ((pt._next = this._firstPT)) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t\treturn pt;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n\t\t\t_plugins = TweenLite._plugins = {},\n\t\t\t_tweenLookup = _internals.tweenLookup = {},\n\t\t\t_tweenLookupNum = 0,\n\t\t\t_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1, stagger:1},\n\t\t\t_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, \"true\":1, \"false\":0},\n\t\t\t_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n\t\t\t_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n\t\t\t_nextGCFrame = 30,\n\t\t\t_lazyRender = _internals.lazyRender = function() {\n\t\t\t\tvar l = _lazyTweens.length,\n\t\t\t\t\ti, tween;\n\t\t\t\t_lazyLookup = {};\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\ttween = _lazyTweens[i];\n\t\t\t\t\tif (tween && tween._lazy !== false) {\n\t\t\t\t\t\ttween.render(tween._lazy[0], tween._lazy[1], true);\n\t\t\t\t\t\ttween._lazy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_lazyTweens.length = 0;\n\t\t\t};\n\n\t\t_rootTimeline._startTime = _ticker.time;\n\t\t_rootFramesTimeline._startTime = _ticker.frame;\n\t\t_rootTimeline._active = _rootFramesTimeline._active = true;\n\t\tsetTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n\t\tAnimation._updateRoot = TweenLite.render = function() {\n\t\t\t\tvar i, a, p;\n\t\t\t\tif (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\t_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n\t\t\t\t_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tif (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n\t\t\t\t\t_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n\t\t\t\t\tfor (p in _tweenLookup) {\n\t\t\t\t\t\ta = _tweenLookup[p].tweens;\n\t\t\t\t\t\ti = a.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i]._gc) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a.length === 0) {\n\t\t\t\t\t\t\tdelete _tweenLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n\t\t\t\t\tp = _rootTimeline._first;\n\t\t\t\t\tif (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n\t\t\t\t\t\twhile (p && p._paused) {\n\t\t\t\t\t\t\tp = p._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!p) {\n\t\t\t\t\t\t\t_ticker.sleep();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t_ticker.addEventListener(\"tick\", Animation._updateRoot);\n\n\t\tvar _register = function(target, tween, scrub) {\n\t\t\t\tvar id = target._gsTweenID, a, i;\n\t\t\t\tif (!_tweenLookup[id || (target._gsTweenID = id = \"t\" + (_tweenLookupNum++))]) {\n\t\t\t\t\t_tweenLookup[id] = {target:target, tweens:[]};\n\t\t\t\t}\n\t\t\t\tif (tween) {\n\t\t\t\t\ta = _tweenLookup[id].tweens;\n\t\t\t\t\ta[(i = a.length)] = tween;\n\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i] === tween) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn _tweenLookup[id].tweens;\n\t\t\t},\n\t\t\t_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {\n\t\t\t\tvar func = overwrittenTween.vars.onOverwrite, r1, r2;\n\t\t\t\tif (func) {\n\t\t\t\t\tr1 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\tfunc = TweenLite.onOverwrite;\n\t\t\t\tif (func) {\n\t\t\t\t\tr2 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\treturn (r1 !== false && r2 !== false);\n\t\t\t},\n\t\t\t_applyOverwrite = function(target, tween, props, mode, siblings) {\n\t\t\t\tvar i, changed, curTween, l;\n\t\t\t\tif (mode === 1 || mode >= 4) {\n\t\t\t\t\tl = siblings.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif ((curTween = siblings[i]) !== tween) {\n\t\t\t\t\t\t\tif (!curTween._gc) {\n\t\t\t\t\t\t\t\tif (curTween._kill(null, target, tween)) {\n\t\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (mode === 5) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\t\t\t\t//NOTE: Add tiny amount to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n\t\t\t\tvar startTime = tween._startTime + _tinyNum,\n\t\t\t\t\toverlaps = [],\n\t\t\t\t\toCount = 0,\n\t\t\t\t\tzeroDur = (tween._duration === 0),\n\t\t\t\t\tglobalStart;\n\t\t\t\ti = siblings.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n\t\t\t\t\t\t//ignore\n\t\t\t\t\t} else if (curTween._timeline !== tween._timeline) {\n\t\t\t\t\t\tglobalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n\t\t\t\t\t\tif (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n\t\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= _tinyNum * 2)) {\n\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ti = oCount;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tcurTween = overlaps[i];\n\t\t\t\t\tl = curTween._firstPT; //we need to discern if there were property tweens originally; if they all get removed in the next line's _kill() call, the tween should be killed. See https://github.com/greensock/GreenSock-JS/issues/278\n\t\t\t\t\tif (mode === 2) if (curTween._kill(props, target, tween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (mode !== 2 || (!curTween._firstPT && curTween._initted && l)) {\n\t\t\t\t\t\tif (mode !== 2 && !_onOverwrite(curTween, tween)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn changed;\n\t\t\t},\n\t\t\t_checkOverlap = function(tween, reference, zeroDur) {\n\t\t\t\tvar tl = tween._timeline,\n\t\t\t\t\tts = tl._timeScale,\n\t\t\t\t\tt = tween._startTime;\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tt += tl._startTime;\n\t\t\t\t\tts *= tl._timeScale;\n\t\t\t\t\tif (tl._paused) {\n\t\t\t\t\t\treturn -100;\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t\tt /= ts;\n\t\t\t\treturn (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;\n\t\t\t};\n\n\n//---- TweenLite instance methods -----------------------------------------------------------------------------\n\n\t\tp._init = function() {\n\t\t\tvar v = this.vars,\n\t\t\t\top = this._overwrittenProps,\n\t\t\t\tdur = this._duration,\n\t\t\t\timmediate = !!v.immediateRender,\n\t\t\t\tease = v.ease,\n\t\t\t\tstartAt = this._startAt,\n\t\t\t\ti, initPlugins, pt, p, startVars, l;\n\t\t\tif (v.startAt) {\n\t\t\t\tif (startAt) {\n\t\t\t\t\tstartAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n\t\t\t\t\tstartAt.kill();\n\t\t\t\t}\n\t\t\t\tstartVars = {};\n\t\t\t\tfor (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n\t\t\t\t\tstartVars[p] = v.startAt[p];\n\t\t\t\t}\n\t\t\t\tstartVars.data = \"isStart\";\n\t\t\t\tstartVars.overwrite = false;\n\t\t\t\tstartVars.immediateRender = true;\n\t\t\t\tstartVars.lazy = (immediate && v.lazy !== false);\n\t\t\t\tstartVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n\t\t\t\tstartVars.onUpdate = v.onUpdate;\n\t\t\t\tstartVars.onUpdateParams = v.onUpdateParams;\n\t\t\t\tstartVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;\n\t\t\t\tthis._startAt = TweenLite.to(this.target || {}, 0, startVars);\n\t\t\t\tif (immediate) {\n\t\t\t\t\tif (this._time > 0) {\n\t\t\t\t\t\tthis._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n\t\t\t\t\t} else if (dur !== 0) {\n\t\t\t\t\t\treturn; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (v.runBackwards && dur !== 0) {\n\t\t\t\t//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n\t\t\t\tif (startAt) {\n\t\t\t\t\tstartAt.render(-1, true);\n\t\t\t\t\tstartAt.kill();\n\t\t\t\t\tthis._startAt = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\t\t\t\t\t\timmediate = false;\n\t\t\t\t\t}\n\t\t\t\t\tpt = {};\n\t\t\t\t\tfor (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n\t\t\t\t\t\tif (!_reservedProps[p] || p === \"autoCSS\") {\n\t\t\t\t\t\t\tpt[p] = v[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt.overwrite = 0;\n\t\t\t\t\tpt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n\t\t\t\t\tpt.lazy = (immediate && v.lazy !== false);\n\t\t\t\t\tpt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n\t\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, pt);\n\t\t\t\t\tif (!immediate) {\n\t\t\t\t\t\tthis._startAt._init(); //ensures that the initial values are recorded\n\t\t\t\t\t\tthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n\t\t\t\t\t\tif (this.vars.immediateRender) {\n\t\t\t\t\t\t\tthis._startAt = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this._time === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === \"function\") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n\t\t\tif (v.easeParams instanceof Array && ease.config) {\n\t\t\t\tthis._ease = ease.config.apply(ease, v.easeParams);\n\t\t\t}\n\t\t\tthis._easeType = this._ease._type;\n\t\t\tthis._easePower = this._ease._power;\n\t\t\tthis._firstPT = null;\n\n\t\t\tif (this._targets) {\n\t\t\t\tl = this._targets.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tif ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);\n\t\t\t}\n\n\t\t\tif (initPlugins) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onInitAllProps\", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n\t\t\t}\n\t\t\tif (op) if (!this._firstPT) if (typeof(this.target) !== \"function\") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n\t\t\t\tthis._enabled(false, false);\n\t\t\t}\n\t\t\tif (v.runBackwards) {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tpt.s += pt.c;\n\t\t\t\t\tpt.c = -pt.c;\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onUpdate = v.onUpdate;\n\t\t\tthis._initted = true;\n\t\t};\n\n\t\tp._initProps = function(target, propLookup, siblings, overwrittenProps, index) {\n\t\t\tvar p, i, initPlugins, plugin, pt, v;\n\t\t\tif (target == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (_lazyLookup[target._gsTweenID]) {\n\t\t\t\t_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\t\t\t}\n\n\t\t\tif (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n\t\t\t\t_autoCSS(this.vars, target);\n\t\t\t}\n\t\t\tfor (p in this.vars) {\n\t\t\t\tv = this.vars[p];\n\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\tif (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tthis.vars[p] = v = this._swapSelfInParams(v, this);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {\n\n\t\t\t\t\t//t - target \t\t[object]\n\t\t\t\t\t//p - property \t\t[string]\n\t\t\t\t\t//s - start\t\t\t[number]\n\t\t\t\t\t//c - change\t\t[number]\n\t\t\t\t\t//f - isFunction\t[boolean]\n\t\t\t\t\t//n - name\t\t\t[string]\n\t\t\t\t\t//pg - isPlugin \t[boolean]\n\t\t\t\t\t//pr - priority\t\t[number]\n\t\t\t\t\t//m - mod           [function | 0]\n\t\t\t\t\tthis._firstPT = pt = {_next:this._firstPT, t:plugin, p:\"setRatio\", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};\n\t\t\t\t\ti = plugin._overwriteProps.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tpropLookup[plugin._overwriteProps[i]] = this._firstPT;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._priority || plugin._onInitAllProps) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._onDisable || plugin._onEnable) {\n\t\t\t\t\t\tthis._notifyPluginsOfEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup[p] = _addPropTween.call(this, target, p, \"get\", v, p, 0, null, this.vars.stringFilter, index);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n\t\t\t\tthis._kill(propLookup, target);\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.\n\t\t\t\t_lazyLookup[target._gsTweenID] = true;\n\t\t\t}\n\t\t\treturn initPlugins;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar self = this,\n\t\t\t\tprevTime = self._time,\n\t\t\t\tduration = self._duration,\n\t\t\t\tprevRawPrevTime = self._rawPrevTime,\n\t\t\t\tisComplete, callback, pt, rawPrevTime;\n\t\t\tif (time >= duration - _tinyNum && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tself._totalTime = self._time = duration;\n\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(1) : 1;\n\t\t\t\tif (!self._reversed ) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = (force || self._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (self._initted || !self.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (self._startTime === self._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevRawPrevTime < 0 || (time <= 0 && time >= -_tinyNum) || (prevRawPrevTime === _tinyNum && self.data !== \"isPause\")) if (prevRawPrevTime !== time) { //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tself._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\n\t\t\t} else if (time < _tinyNum) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tself._totalTime = self._time = 0;\n\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = self._reversed;\n\t\t\t\t}\n\t\t\t\tif (time > -_tinyNum) {\n\t\t\t\t\ttime = 0;\n\t\t\t\t} else if (time < 0) {\n\t\t\t\t\tself._active = false;\n\t\t\t\t\tif (duration === 0) if (self._initted || !self.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && self.data === \"isPause\")) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!self._initted || (self._startAt && self._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself._totalTime = self._time = time;\n\n\t\t\t\tif (self._easeType) {\n\t\t\t\t\tvar r = time / duration, type = self._easeType, pow = self._easePower;\n\t\t\t\t\tif (type === 1 || (type === 3 && r >= 0.5)) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\t\t\t\t\tself.ratio = (type === 1) ? 1 - r : (type === 2) ? r : (time / duration < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t\t\t} else {\n\t\t\t\t\tself.ratio = self._ease.getRatio(time / duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._time === prevTime && !force) {\n\t\t\t\treturn;\n\t\t\t} else if (!self._initted) {\n\t\t\t\tself._init();\n\t\t\t\tif (!self._initted || self._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && self._firstPT && ((self.vars.lazy !== false && self._duration) || (self.vars.lazy && !self._duration))) {\n\t\t\t\t\tself._time = self._totalTime = prevTime;\n\t\t\t\t\tself._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\t_lazyTweens.push(self);\n\t\t\t\t\tself._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (self._time && !isComplete) {\n\t\t\t\t\tself.ratio = self._ease.getRatio(self._time / duration);\n\t\t\t\t} else if (isComplete && self._ease._calcEnd) {\n\t\t\t\t\tself.ratio = self._ease.getRatio((self._time === 0) ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (self._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n\t\t\t\tself._lazy = false;\n\t\t\t}\n\t\t\tif (!self._active) if (!self._paused && self._time !== prevTime && time >= 0) {\n\t\t\t\tself._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTime === 0) {\n\t\t\t\tif (self._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tself._startAt.render(time, true, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (self.vars.onStart) if (self._time !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tself._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tpt = self._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * self.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * self.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (self._onUpdate) {\n\t\t\t\tif (time < 0) if (self._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tself._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (self._time !== prevTime || isComplete || force) {\n\t\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (callback) if (!self._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && self._startAt && !self._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n\t\t\t\t\tself._startAt.render(time, true, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (self._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tself._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tself._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && self.vars[callback]) {\n\t\t\t\t\tself._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && self._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tself._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function(vars, target, overwritingTween) {\n\t\t\tif (vars === \"all\") {\n\t\t\t\tvars = null;\n\t\t\t}\n\t\t\tif (vars == null) if (target == null || target === this.target) {\n\t\t\t\tthis._lazy = false;\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\ttarget = (typeof(target) !== \"string\") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;\n\t\t\tvar simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),\n\t\t\t\tfirstPT = this._firstPT,\n\t\t\t\ti, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (this._kill(vars, target[i], overwritingTween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._targets) {\n\t\t\t\t\ti = this._targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (target === this._targets[i]) {\n\t\t\t\t\t\t\tpropLookup = this._propLookup[i] || {};\n\t\t\t\t\t\t\tthis._overwrittenProps = this._overwrittenProps || [];\n\t\t\t\t\t\t\toverwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : \"all\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (target !== this.target) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup = this._propLookup;\n\t\t\t\t\toverwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : \"all\";\n\t\t\t\t}\n\n\t\t\t\tif (propLookup) {\n\t\t\t\t\tkillProps = vars || propLookup;\n\t\t\t\t\trecord = (vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && (typeof(vars) !== \"object\" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n\t\t\t\t\tif (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n\t\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\t\tif (propLookup[p]) {\n\t\t\t\t\t\t\t\tif (!killed) {\n\t\t\t\t\t\t\t\t\tkilled = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tkilled.push(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\tif ((pt = propLookup[p])) {\n\t\t\t\t\t\t\tif (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n\t\t\t\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p](pt.s);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p] = pt.s;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt.pg && pt.t._kill(killProps)) {\n\t\t\t\t\t\t\t\tchanged = true; //some plugins need to be notified so they can perform cleanup tasks first\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!pt.pg || pt.t._overwriteProps.length === 0) {\n\t\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\t\t\t} else if (pt === this._firstPT) {\n\t\t\t\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete propLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (record) {\n\t\t\t\t\t\t\toverwrittenProps[p] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._firstPT && this._initted && firstPT) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tif (this._notifyPluginsOfEnabled) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this);\n\t\t\t}\n\t\t\tvar t = this._time;\n\t\t\tthis._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n\t\t\tthis._notifyPluginsOfEnabled = this._active = this._lazy = false;\n\t\t\tthis._propLookup = (this._targets) ? {} : [];\n\t\t\tAnimation.prototype.invalidate.call(this);\n\t\t\tif (this.vars.immediateRender) {\n\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\tthis.render(t, false, this.vars.lazy !== false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (enabled && this._gc) {\n\t\t\t\tvar targets = this._targets,\n\t\t\t\t\ti;\n\t\t\t\tif (targets) {\n\t\t\t\t\ti = targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tthis._siblings[i] = _register(targets[i], this, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._siblings = _register(this.target, this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAnimation.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t\tif (this._notifyPluginsOfEnabled) if (this._firstPT) {\n\t\t\t\treturn TweenLite._onPluginEvent((enabled ? \"_onEnable\" : \"_onDisable\"), this);\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n//----TweenLite static methods -----------------------------------------------------\n\n\t\tTweenLite.to = function(target, duration, vars) {\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.from = function(target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.fromTo = function(target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, toVars);\n\t\t};\n\n\t\tTweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});\n\t\t};\n\n\t\tTweenLite.set = function(target, vars) {\n\t\t\treturn new TweenLite(target, 0, vars);\n\t\t};\n\n\t\tTweenLite.getTweensOf = function(target, onlyActive) {\n\t\t\tif (target == null) { return []; }\n\t\t\ttarget = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\t\t\tvar i, a, j, t;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\ta = [];\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ta = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n\t\t\t\t}\n\t\t\t\ti = a.length;\n\t\t\t\t//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tt = a[i];\n\t\t\t\t\tj = i;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\tif (t === a[j]) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (target._gsTweenID) {\n\t\t\t\ta = _register(target).concat();\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i]._gc || (onlyActive && !a[i].isActive())) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a || [];\n\t\t};\n\n\t\tTweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {\n\t\t\tif (typeof(onlyActive) === \"object\") {\n\t\t\t\tvars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n\t\t\t\tonlyActive = false;\n\t\t\t}\n\t\t\tvar a = TweenLite.getTweensOf(target, onlyActive),\n\t\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[i]._kill(vars, target);\n\t\t\t}\n\t\t};\n\n\n\n/*\n * ----------------------------------------------------------------\n * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n * ----------------------------------------------------------------\n */\n\t\tvar TweenPlugin = _class(\"plugins.TweenPlugin\", function(props, priority) {\n\t\t\t\t\tthis._overwriteProps = (props || \"\").split(\",\");\n\t\t\t\t\tthis._propName = this._overwriteProps[0];\n\t\t\t\t\tthis._priority = priority || 0;\n\t\t\t\t\tthis._super = TweenPlugin.prototype;\n\t\t\t\t}, true);\n\n\t\tp = TweenPlugin.prototype;\n\t\tTweenPlugin.version = \"1.19.0\";\n\t\tTweenPlugin.API = 2;\n\t\tp._firstPT = null;\n\t\tp._addTween = _addPropTween;\n\t\tp.setRatio = _setRatio;\n\n\t\tp._kill = function(lookup) {\n\t\t\tvar a = this._overwriteProps,\n\t\t\t\tpt = this._firstPT,\n\t\t\t\ti;\n\t\t\tif (lookup[this._propName] != null) {\n\t\t\t\tthis._overwriteProps = [];\n\t\t\t} else {\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (lookup[a[i]] != null) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (lookup[pt.n] != null) {\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\tpt._prev = null;\n\t\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._mod = p._roundProps = function(lookup) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tval;\n\t\t\twhile (pt) {\n\t\t\t\tval = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + \"_\").join(\"\") ]);\n\t\t\t\tif (val && typeof(val) === \"function\") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n\t\t\t\t\tif (pt.f === 2) {\n\t\t\t\t\t\tpt.t._applyPT.m = val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.m = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\tTweenLite._onPluginEvent = function(type, tween) {\n\t\t\tvar pt = tween._firstPT,\n\t\t\t\tchanged, pt2, first, last, next;\n\t\t\tif (type === \"_onInitAllProps\") {\n\t\t\t\t//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tpt = tween._firstPT = first;\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.pg) if (typeof(pt.t[type]) === \"function\") if (pt.t[type]()) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tTweenPlugin.activate = function(plugins) {\n\t\t\tvar i = plugins.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (plugins[i].API === TweenPlugin.API) {\n\t\t\t\t\t_plugins[(new plugins[i]())._propName] = plugins[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n\t\t_gsDefine.plugin = function(config) {\n\t\t\tif (!config || !config.propName || !config.init || !config.API) { throw \"illegal plugin definition.\"; }\n\t\t\tvar propName = config.propName,\n\t\t\t\tpriority = config.priority || 0,\n\t\t\t\toverwriteProps = config.overwriteProps,\n\t\t\t\tmap = {init:\"_onInitTween\", set:\"setRatio\", kill:\"_kill\", round:\"_mod\", mod:\"_mod\", initAll:\"_onInitAllProps\"},\n\t\t\t\tPlugin = _class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\",\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tTweenPlugin.call(this, propName, priority);\n\t\t\t\t\t\tthis._overwriteProps = overwriteProps || [];\n\t\t\t\t\t}, (config.global === true)),\n\t\t\t\tp = Plugin.prototype = new TweenPlugin(propName),\n\t\t\t\tprop;\n\t\t\tp.constructor = Plugin;\n\t\t\tPlugin.API = config.API;\n\t\t\tfor (prop in map) {\n\t\t\t\tif (typeof(config[prop]) === \"function\") {\n\t\t\t\t\tp[map[prop]] = config[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.version = config.version;\n\t\t\tTweenPlugin.activate([Plugin]);\n\t\t\treturn Plugin;\n\t\t};\n\n\n\t\t//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n\t\ta = window._gsQueue;\n\t\tif (a) {\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\ta[i]();\n\t\t\t}\n\t\t\tfor (p in _defLookup) {\n\t\t\t\tif (!_defLookup[p].func) {\n\t\t\t\t\twindow.console.log(\"GSAP encountered missing dependency: \" + p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n\n\t\treturn TweenLite;\n\n})(_gsScope, \"TweenLite\");\n\nexport var globals = _gsScope.GreenSockGlobals;\nvar nonGlobals = globals.com.greensock;\nexport { TweenLite as default };\nexport var SimpleTimeline = nonGlobals.core.SimpleTimeline;\nexport var Animation = nonGlobals.core.Animation;\nexport var Ease = globals.Ease;\nexport var Linear = globals.Linear;\nexport var Power0 = Linear;\nexport var Power1 = globals.Power1;\nexport var Power2 = globals.Power2;\nexport var Power3 = globals.Power3;\nexport var Power4 = globals.Power4;\nexport var TweenPlugin = globals.TweenPlugin;\nexport var EventDispatcher = nonGlobals.events.EventDispatcher;\n","/*!\n * VERSION: 2.1.3\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\n\nimport TweenLite, { TweenPlugin, Ease, Power0, Power1, Power2, Power3, Power4, Linear } from \"./TweenLite.js\";\nimport TweenMaxBase from \"./TweenMaxBase.js\";\nimport CSSPlugin from \"./CSSPlugin.js\";\nimport AttrPlugin from \"./AttrPlugin.js\";\nimport RoundPropsPlugin from \"./RoundPropsPlugin.js\";\nimport DirectionalRotationPlugin from \"./DirectionalRotationPlugin.js\";\nimport TimelineLite from \"./TimelineLite.js\";\nimport TimelineMax from \"./TimelineMax.js\";\nimport BezierPlugin from \"./BezierPlugin.js\";\nimport { Back, Elastic, Bounce, RoughEase, SlowMo, SteppedEase, Circ, Expo, Sine, ExpoScaleEase } from \"./EasePack.js\";\n\n//the following two lines are designed to prevent tree shaking of the classes that were historically included with TweenMax (otherwise, folks would have to reference CSSPlugin, for example, to ensure their CSS-related animations worked)\nexport var TweenMax = TweenMaxBase;\nTweenMax._autoActivated = [TimelineLite, TimelineMax, CSSPlugin, AttrPlugin, BezierPlugin, RoundPropsPlugin, DirectionalRotationPlugin, Back, Elastic, Bounce, RoughEase, SlowMo, SteppedEase, Circ, Expo, Sine, ExpoScaleEase];\n\nexport { TweenMax as default };\nexport { TweenLite, TimelineLite, TimelineMax, CSSPlugin, AttrPlugin, BezierPlugin, DirectionalRotationPlugin, RoundPropsPlugin, TweenPlugin, Ease, Power0, Power1, Power2, Power3, Power4, Linear, Back, Elastic, Bounce, RoughEase, SlowMo, SteppedEase, Circ, Expo, Sine, ExpoScaleEase };\n","/*!\n * VERSION: 2.1.3\n * DATE: 2019-05-17\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\n/* eslint-disable */\n\nimport TweenLite, { _gsScope, globals, Animation, SimpleTimeline, Ease, Power0, Power1, Power2, Power3, Power4, Linear  } from \"./TweenLite.js\";\n\n\n_gsScope._gsDefine(\"TweenMax\", [\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"], function() {\n\n\t\tvar _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++]));\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_applyCycle = function(vars, targets, i) {\n\t\t\t\tvar alt = vars.cycle,\n\t\t\t\t\tp, val;\n\t\t\t\tfor (p in alt) {\n\t\t\t\t\tval = alt[p];\n\t\t\t\t\tvars[p] = (typeof(val) === \"function\") ? val(i, targets[i], targets) : val[i % val.length];\n\t\t\t\t}\n\t\t\t\tdelete vars.cycle;\n\t\t\t},\n\t\t\t//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following\n\t\t\t_distribute = function(v) {\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\tvar vars = (typeof(v) === \"object\") ? v : {each:v}, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total \"amount\" that's chunked out among them all.\n\t\t\t\t\tease = vars.ease,\n\t\t\t\t\tfrom = vars.from || 0,\n\t\t\t\t\tbase = vars.base || 0,\n\t\t\t\t\tcache = {},\n\t\t\t\t\tisFromKeyword = isNaN(from),\n\t\t\t\t\taxis = vars.axis,\n\t\t\t\t\tratio = {center:0.5, end:1}[from] || 0;\n\t\t\t\treturn function(i, target, a) {\n\t\t\t\t\tvar l = (a || vars).length,\n\t\t\t\t\t\tdistances = cache[l],\n\t\t\t\t\t\toriginX, originY, x, y, d, j, max, min, wrap;\n\t\t\t\t\tif (!distances) {\n\t\t\t\t\t\twrap = (vars.grid === \"auto\") ? 0 : (vars.grid || [Infinity])[0];\n\t\t\t\t\t\tif (!wrap) {\n\t\t\t\t\t\t\tmax = -Infinity;\n\t\t\t\t\t\t\twhile (max < (max = a[wrap++].getBoundingClientRect().left) && wrap < l) { }\n\t\t\t\t\t\t\twrap--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdistances = cache[l] = [];\n\t\t\t\t\t\toriginX = isFromKeyword ? (Math.min(wrap, l) * ratio) - 0.5 : from % wrap;\n\t\t\t\t\t\toriginY = isFromKeyword ? l * ratio / wrap - 0.5 : (from / wrap) | 0;\n\t\t\t\t\t\tmax = 0;\n\t\t\t\t\t\tmin = Infinity;\n\t\t\t\t\t\tfor (j = 0; j < l; j++) {\n\t\t\t\t\t\t\tx = (j % wrap) - originX;\n\t\t\t\t\t\t\ty = originY - ((j / wrap) | 0);\n\t\t\t\t\t\t\tdistances[j] = d = !axis ? Math.sqrt(x * x + y * y) : Math.abs((axis === \"y\") ? y : x);\n\t\t\t\t\t\t\tif (d > max) {\n\t\t\t\t\t\t\t\tmax = d;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (d < min) {\n\t\t\t\t\t\t\t\tmin = d;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdistances.max = max - min;\n\t\t\t\t\t\tdistances.min = min;\n\t\t\t\t\t\tdistances.v = l = vars.amount || (vars.each * (wrap > l ? l - 1 : !axis ? Math.max(wrap, l / wrap) : axis === \"y\" ? l / wrap : wrap)) || 0;\n\t\t\t\t\t\tdistances.b = (l < 0) ? base - l : base;\n\t\t\t\t\t}\n\t\t\t\t\tl = (distances[i] - distances.min) / distances.max;\n\t\t\t\t\treturn distances.b + (ease ? ease.getRatio(l) : l) * distances.v;\n\t\t\t\t};\n\t\t\t},\n\t\t\tTweenMax = function(target, duration, vars) {\n\t\t\t\tTweenLite.call(this, target, duration, vars);\n\t\t\t\tthis._cycle = 0;\n\t\t\t\tthis._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);\n\t\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\t\tif (this._repeat) {\n\t\t\t\t\tthis._uncache(true); //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.\n\t\t\t\t}\n\t\t\t\tthis.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\t\t\t},\n\t\t\t_tinyNum = 0.00000001,\n\t\t\tTweenLiteInternals = TweenLite._internals,\n\t\t\t_isSelector = TweenLiteInternals.isSelector,\n\t\t\t_isArray = TweenLiteInternals.isArray,\n\t\t\tp = TweenMax.prototype = TweenLite.to({}, 0.1, {}),\n\t\t\t_blankArray = [];\n\n\t\tTweenMax.version = \"2.1.3\";\n\t\tp.constructor = TweenMax;\n\t\tp.kill()._gc = false;\n\t\tTweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;\n\t\tTweenMax.getTweensOf = TweenLite.getTweensOf;\n\t\tTweenMax.lagSmoothing = TweenLite.lagSmoothing;\n\t\tTweenMax.ticker = TweenLite.ticker;\n\t\tTweenMax.render = TweenLite.render;\n\t\tTweenMax.distribute = _distribute;\n\n\t\tp.invalidate = function() {\n\t\t\tthis._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);\n\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\tthis._yoyoEase = null;\n\t\t\tthis._uncache(true);\n\t\t\treturn TweenLite.prototype.invalidate.call(this);\n\t\t};\n\n\t\tp.updateTo = function(vars, resetDuration) {\n\t\t\tvar self = this,\n\t\t\t\tcurRatio = self.ratio,\n\t\t\t\timmediate = self.vars.immediateRender || vars.immediateRender,\n\t\t\t\tp;\n\t\t\tif (resetDuration && self._startTime < self._timeline._time) {\n\t\t\t\tself._startTime = self._timeline._time;\n\t\t\t\tself._uncache(false);\n\t\t\t\tif (self._gc) {\n\t\t\t\t\tself._enabled(true, false);\n\t\t\t\t} else {\n\t\t\t\t\tself._timeline.insert(self, self._startTime - self._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (p in vars) {\n\t\t\t\tself.vars[p] = vars[p];\n\t\t\t}\n\t\t\tif (self._initted || immediate) {\n\t\t\t\tif (resetDuration) {\n\t\t\t\t\tself._initted = false;\n\t\t\t\t\tif (immediate) {\n\t\t\t\t\t\tself.render(0, true, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (self._gc) {\n\t\t\t\t\t\tself._enabled(true, false);\n\t\t\t\t\t}\n\t\t\t\t\tif (self._notifyPluginsOfEnabled && self._firstPT) {\n\t\t\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", self); //in case a plugin like MotionBlur must perform some cleanup tasks\n\t\t\t\t\t}\n\t\t\t\t\tif (self._time / self._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards.\n\t\t\t\t\t\tvar prevTime = self._totalTime;\n\t\t\t\t\t\tself.render(0, true, false);\n\t\t\t\t\t\tself._initted = false;\n\t\t\t\t\t\tself.render(prevTime, true, false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself._initted = false;\n\t\t\t\t\t\tself._init();\n\t\t\t\t\t\tif (self._time > 0 || immediate) {\n\t\t\t\t\t\t\tvar inv = 1 / (1 - curRatio),\n\t\t\t\t\t\t\t\tpt = self._firstPT, endValue;\n\t\t\t\t\t\t\twhile (pt) {\n\t\t\t\t\t\t\t\tendValue = pt.s + pt.c;\n\t\t\t\t\t\t\t\tpt.c *= inv;\n\t\t\t\t\t\t\t\tpt.s = endValue - pt.c;\n\t\t\t\t\t\t\t\tpt = pt._next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn self;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tif (!this._initted) if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.\n\t\t\t\tthis.invalidate();\n\t\t\t}\n\t\t\tvar self = this,\n\t\t\t\ttotalDur = (!self._dirty) ? self._totalDuration : self.totalDuration(),\n\t\t\t\tprevTime = self._time,\n\t\t\t\tprevTotalTime = self._totalTime,\n\t\t\t\tprevCycle = self._cycle,\n\t\t\t\tduration = self._duration,\n\t\t\t\tprevRawPrevTime = self._rawPrevTime,\n\t\t\t\tisComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime, yoyoEase;\n\t\t\tif (time >= totalDur - _tinyNum && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tself._totalTime = totalDur;\n\t\t\t\tself._cycle = self._repeat;\n\t\t\t\tif (self._yoyo && (self._cycle & 1) !== 0) {\n\t\t\t\t\tself._time = 0;\n\t\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(0) : 0;\n\t\t\t\t} else {\n\t\t\t\t\tself._time = duration;\n\t\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(1) : 1;\n\t\t\t\t}\n\t\t\t\tif (!self._reversed) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = (force || self._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (self._initted || !self.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (self._startTime === self._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevRawPrevTime < 0 || (time <= 0 && time >= -_tinyNum) || (prevRawPrevTime === _tinyNum && self.data !== \"isPause\")) if (prevRawPrevTime !== time) { //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tself._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\n\t\t\t} else if (time < _tinyNum) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tself._totalTime = self._time = self._cycle = 0;\n\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = self._reversed;\n\t\t\t\t}\n\t\t\t\tif (time > -_tinyNum) {\n\t\t\t\t\ttime = 0;\n\t\t\t\t} else if (time < 0) {\n\t\t\t\t\tself._active = false;\n\t\t\t\t\tif (duration === 0) if (self._initted || !self.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!self._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself._totalTime = self._time = time;\n\t\t\t\tif (self._repeat !== 0) {\n\t\t\t\t\tcycleDuration = duration + self._repeatDelay;\n\t\t\t\t\tself._cycle = (self._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n\t\t\t\t\tif (self._cycle !== 0) if (self._cycle === self._totalTime / cycleDuration && prevTotalTime <= time) {\n\t\t\t\t\t\tself._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n\t\t\t\t\t}\n\t\t\t\t\tself._time = self._totalTime - (self._cycle * cycleDuration);\n\t\t\t\t\tif (self._yoyo) if ((self._cycle & 1) !== 0) {\n\t\t\t\t\t\tself._time = duration - self._time;\n\t\t\t\t\t\tyoyoEase = self._yoyoEase || self.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.\n\t\t\t\t\t\tif (yoyoEase) {\n\t\t\t\t\t\t\tif (!self._yoyoEase) {\n\t\t\t\t\t\t\t\tif (yoyoEase === true && !self._initted) { //if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.\n\t\t\t\t\t\t\t\t\tyoyoEase = self.vars.ease;\n\t\t\t\t\t\t\t\t\tself._yoyoEase = yoyoEase = !yoyoEase ? TweenLite.defaultEase : (yoyoEase instanceof Ease) ? yoyoEase : (typeof(yoyoEase) === \"function\") ? new Ease(yoyoEase, self.vars.easeParams) : Ease.map[yoyoEase] || TweenLite.defaultEase;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tself._yoyoEase = yoyoEase = (yoyoEase === true) ? self._ease : (yoyoEase instanceof Ease) ? yoyoEase : Ease.map[yoyoEase];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - self._time) / duration) : 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (self._time > duration) {\n\t\t\t\t\t\tself._time = duration;\n\t\t\t\t\t} else if (self._time < 0) {\n\t\t\t\t\t\tself._time = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (self._easeType && !yoyoEase) {\n\t\t\t\t\tr = self._time / duration;\n\t\t\t\t\ttype = self._easeType;\n\t\t\t\t\tpow = self._easePower;\n\t\t\t\t\tif (type === 1 || (type === 3 && r >= 0.5)) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\t\t\t\t\tself.ratio = (type === 1) ? 1 - r : (type === 2) ? r : (self._time / duration < 0.5) ? r / 2 : 1 - (r / 2);\n\n\t\t\t\t} else if (!yoyoEase) {\n\t\t\t\t\tself.ratio = self._ease.getRatio(self._time / duration);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (prevTime === self._time && !force && prevCycle === self._cycle) {\n\t\t\t\tif (prevTotalTime !== self._totalTime) if (self._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\n\t\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else if (!self._initted) {\n\t\t\t\tself._init();\n\t\t\t\tif (!self._initted || self._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && self._firstPT && ((self.vars.lazy !== false && self._duration) || (self.vars.lazy && !self._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.\n\t\t\t\t\tself._time = prevTime;\n\t\t\t\t\tself._totalTime = prevTotalTime;\n\t\t\t\t\tself._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\tself._cycle = prevCycle;\n\t\t\t\t\tTweenLiteInternals.lazyTweens.push(self);\n\t\t\t\t\tself._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (self._time && !isComplete && !yoyoEase) {\n\t\t\t\t\tself.ratio = self._ease.getRatio(self._time / duration);\n\t\t\t\t} else if (isComplete && this._ease._calcEnd && !yoyoEase) {\n\t\t\t\t\tself.ratio = self._ease.getRatio((self._time === 0) ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (self._lazy !== false) {\n\t\t\t\tself._lazy = false;\n\t\t\t}\n\n\t\t\tif (!self._active) if (!self._paused && self._time !== prevTime && time >= 0) {\n\t\t\t\tself._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTotalTime === 0) {\n\t\t\t\tif (self._initted === 2 && time > 0) {\n\t\t\t\t\tself._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true\n\t\t\t\t}\n\t\t\t\tif (self._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tself._startAt.render(time, true, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (self.vars.onStart) if (self._totalTime !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tself._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpt = self._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * self.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * self.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (self._onUpdate) {\n\t\t\t\tif (time < 0) if (self._startAt && self._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tself._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (self._totalTime !== prevTotalTime || callback) {\n\t\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (self._cycle !== prevCycle) if (!suppressEvents) if (!self._gc) if (self.vars.onRepeat) {\n\t\t\t\tself._callback(\"onRepeat\");\n\t\t\t}\n\t\t\tif (callback) if (!self._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && self._startAt && !self._onUpdate && self._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tself._startAt.render(time, true, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (self._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tself._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tself._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && self.vars[callback]) {\n\t\t\t\t\tself._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && self._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tself._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n//---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------\n\n\t\tTweenMax.to = function(target, duration, vars) {\n\t\t\treturn new TweenMax(target, duration, vars);\n\t\t};\n\n\t\tTweenMax.from = function(target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn new TweenMax(target, duration, vars);\n\t\t};\n\n\t\tTweenMax.fromTo = function(target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn new TweenMax(target, duration, toVars);\n\t\t};\n\n\t\tTweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvar a = [],\n\t\t\t\tstaggerFunc = _distribute(vars.stagger || stagger),\n\t\t\t\tcycle = vars.cycle,\n\t\t\t\tfromCycle = (vars.startAt || _blankArray).cycle,\n\t\t\t\tl, copy, i, p;\n\t\t\tif (!_isArray(targets)) {\n\t\t\t\tif (typeof(targets) === \"string\") {\n\t\t\t\t\ttargets = TweenLite.selector(targets) || targets;\n\t\t\t\t}\n\t\t\t\tif (_isSelector(targets)) {\n\t\t\t\t\ttargets = _slice(targets);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttargets = targets || [];\n\t\t\tl = targets.length - 1;\n\t\t\tfor (i = 0; i <= l; i++) {\n\t\t\t\tcopy = {};\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tcopy[p] = vars[p];\n\t\t\t\t}\n\t\t\t\tif (cycle) {\n\t\t\t\t\t_applyCycle(copy, targets, i);\n\t\t\t\t\tif (copy.duration != null) {\n\t\t\t\t\t\tduration = copy.duration;\n\t\t\t\t\t\tdelete copy.duration;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (fromCycle) {\n\t\t\t\t\tfromCycle = copy.startAt = {};\n\t\t\t\t\tfor (p in vars.startAt) {\n\t\t\t\t\t\tfromCycle[p] = vars.startAt[p];\n\t\t\t\t\t}\n\t\t\t\t\t_applyCycle(copy.startAt, targets, i);\n\t\t\t\t}\n\t\t\t\tcopy.delay = staggerFunc(i, targets[i], targets) + (copy.delay || 0);\n\t\t\t\tif (i === l && onCompleteAll) {\n\t\t\t\t\tcopy.onComplete = function() {\n\t\t\t\t\t\tif (vars.onComplete) {\n\t\t\t\t\t\t\tvars.onComplete.apply(vars.onCompleteScope || this, arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\ta[i] = new TweenMax(targets[i], duration, copy);\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tTweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tTweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tTweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenMax(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, useFrames:useFrames, overwrite:0});\n\t\t};\n\n\t\tTweenMax.set = function(target, vars) {\n\t\t\treturn new TweenMax(target, 0, vars);\n\t\t};\n\n\t\tTweenMax.isTweening = function(target) {\n\t\t\treturn (TweenLite.getTweensOf(target, true).length > 0);\n\t\t};\n\n\t\tvar _getChildrenOf = function(timeline, includeTimelines) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tcnt = 0,\n\t\t\t\t\ttween = timeline._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tif (tween instanceof TweenLite) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (includeTimelines) {\n\t\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ta = a.concat(_getChildrenOf(tween, includeTimelines));\n\t\t\t\t\t\tcnt = a.length;\n\t\t\t\t\t}\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\tgetAllTweens = TweenMax.getAllTweens = function(includeTimelines) {\n\t\t\t\treturn _getChildrenOf(Animation._rootTimeline, includeTimelines).concat( _getChildrenOf(Animation._rootFramesTimeline, includeTimelines) );\n\t\t\t};\n\n\t\tTweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {\n\t\t\tif (tweens == null) {\n\t\t\t\ttweens = true;\n\t\t\t}\n\t\t\tif (delayedCalls == null) {\n\t\t\t\tdelayedCalls = true;\n\t\t\t}\n\t\t\tvar a = getAllTweens((timelines != false)),\n\t\t\t\tl = a.length,\n\t\t\t\tallTrue = (tweens && delayedCalls && timelines),\n\t\t\t\tisDC, tween, i;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\ttween = a[i];\n\t\t\t\tif (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {\n\t\t\t\t\tif (complete) {\n\t\t\t\t\t\ttween.totalTime(tween._reversed ? 0 : tween.totalDuration());\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tTweenMax.killChildTweensOf = function(parent, complete) {\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar tl = TweenLiteInternals.tweenLookup,\n\t\t\t\ta, curParent, p, i, l;\n\t\t\tif (typeof(parent) === \"string\") {\n\t\t\t\tparent = TweenLite.selector(parent) || parent;\n\t\t\t}\n\t\t\tif (_isSelector(parent)) {\n\t\t\t\tparent = _slice(parent);\n\t\t\t}\n\t\t\tif (_isArray(parent)) {\n\t\t\t\ti = parent.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tTweenMax.killChildTweensOf(parent[i], complete);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ta = [];\n\t\t\tfor (p in tl) {\n\t\t\t\tcurParent = tl[p].target.parentNode;\n\t\t\t\twhile (curParent) {\n\t\t\t\t\tif (curParent === parent) {\n\t\t\t\t\t\ta = a.concat(tl[p].tweens);\n\t\t\t\t\t}\n\t\t\t\t\tcurParent = curParent.parentNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tl = a.length;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tif (complete) {\n\t\t\t\t\ta[i].totalTime(a[i].totalDuration());\n\t\t\t\t}\n\t\t\t\ta[i]._enabled(false, false);\n\t\t\t}\n\t\t};\n\n\t\tvar _changePause = function(pause, tweens, delayedCalls, timelines) {\n\t\t\ttweens = (tweens !== false);\n\t\t\tdelayedCalls = (delayedCalls !== false);\n\t\t\ttimelines = (timelines !== false);\n\t\t\tvar a = getAllTweens(timelines),\n\t\t\t\tallTrue = (tweens && delayedCalls && timelines),\n\t\t\t\ti = a.length,\n\t\t\t\tisDC, tween;\n\t\t\twhile (--i > -1) {\n\t\t\t\ttween = a[i];\n\t\t\t\tif (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {\n\t\t\t\t\ttween.paused(pause);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tTweenMax.pauseAll = function(tweens, delayedCalls, timelines) {\n\t\t\t_changePause(true, tweens, delayedCalls, timelines);\n\t\t};\n\n\t\tTweenMax.resumeAll = function(tweens, delayedCalls, timelines) {\n\t\t\t_changePause(false, tweens, delayedCalls, timelines);\n\t\t};\n\n\t\tTweenMax.globalTimeScale = function(value) {\n\t\t\tvar tl = Animation._rootTimeline,\n\t\t\t\tt = TweenLite.ticker.time;\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn tl._timeScale;\n\t\t\t}\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\ttl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);\n\t\t\ttl = Animation._rootFramesTimeline;\n\t\t\tt = TweenLite.ticker.frame;\n\t\t\ttl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);\n\t\t\ttl._timeScale = Animation._rootTimeline._timeScale = value;\n\t\t\treturn value;\n\t\t};\n\n\n//---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------\n\n\t\tp.progress = function(value, suppressEvents) {\n\t\t\treturn (!arguments.length) ? (this.duration() ? this._time / this._duration : this.ratio) : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);\n\t\t};\n\n\t\tp.totalProgress = function(value, suppressEvents) {\n\t\t\treturn (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime( this.totalDuration() * value, suppressEvents);\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\tvar duration = this._duration,\n\t\t\t\tcycle = this._cycle,\n\t\t\t\tcycleDur = cycle * (duration + this._repeatDelay);\n\t\t\tif (value > duration) {\n\t\t\t\tvalue = duration;\n\t\t\t}\n\t\t\treturn this.totalTime((this._yoyo && (cycle & 1)) ? duration - value + cycleDur : this._repeat ? value + cycleDur : value, suppressEvents);\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.\n\t\t\t}\n\t\t\treturn Animation.prototype.duration.call(this, value);\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\t//instead of Infinity, we use 999999999999 so that we can accommodate reverses\n\t\t\t\t\tthis._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);\n\t\t\t\t\tthis._dirty = false;\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\treturn (this._repeat === -1) ? this : this.duration( (value - (this._repeat * this._repeatDelay)) / (this._repeat + 1) );\n\t\t};\n\n\t\tp.repeat = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeat;\n\t\t\t}\n\t\t\tthis._repeat = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.repeatDelay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeatDelay;\n\t\t\t}\n\t\t\tthis._repeatDelay = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.yoyo = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._yoyo;\n\t\t\t}\n\t\t\tthis._yoyo = value;\n\t\t\treturn this;\n\t\t};\n\n\n\t\treturn TweenMax;\n\n\t}, true);\n\nexport var TweenMax = globals.TweenMax;\nexport var TweenMaxBase = TweenMax;\nexport { TweenMax as default };\nexport { TweenLite, Ease, Power0, Power1, Power2, Power3, Power4, Linear };\n","/*!\n * jQuery JavaScript Library v3.4.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2019-05-01T21:04Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.4.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code, options ) {\n\t\tDOMEval( code, { nonce: options && options.nonce } );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.4\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2019-04-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t(nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\") ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 && rdescend.test( selector ) ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem.namespaceURI,\n\t\tdocElem = (elem.ownerDocument || elem).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( typeof elem.contentDocument !== \"undefined\" ) {\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t// Support: IE 9-11 only\n\t// Also use offsetWidth/offsetHeight for when box sizing is unreliable\n\t// We use getClientRects() to check for hidden/disconnected.\n\t// In those cases, the computed value can be trusted to be border-box\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\t\tval === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url, options ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","(function(window, factory) {\n\tvar lazySizes = factory(window, window.document);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(typeof window != 'undefined' ?\n      window : {}, function l(window, document) {\n\t'use strict';\n\t/*jshint eqnull:true */\n\n\tvar lazysizes, lazySizesCfg;\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2,\n\t\t\tloadHidden: true,\n\t\t\tricTimeout: 0,\n\t\t\tthrottleDelay: 125,\n\t\t};\n\n\t\tlazySizesCfg = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesCfg)){\n\t\t\t\tlazySizesCfg[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\t})();\n\n\tif (!document || !document.getElementsByClassName) {\n\t\treturn {\n\t\t\tinit: function () {},\n\t\t\tcfg: lazySizesCfg,\n\t\t\tnoSupport: true,\n\t\t};\n\t}\n\n\tvar docElem = document.documentElement;\n\n\tvar Date = window.Date;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\tvar addEventListener = window[_addEventListener];\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('Event');\n\n\t\tif(!detail){\n\t\t\tdetail = {};\n\t\t}\n\n\t\tdetail.instance = lazysizes;\n\n\t\tevent.initEvent(name, !noBubbles, !noCancelable);\n\n\t\tevent.detail = detail;\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesCfg.pf) ) ){\n\t\t\tif(full && full.src && !el[_getAttribute]('srcset')){\n\t\t\t\tel.setAttribute('srcset', full.src);\n\t\t\t}\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar firstFns = [];\n\t\tvar secondFns = [];\n\t\tvar fns = firstFns;\n\n\t\tvar run = function(){\n\t\t\tvar runFns = fns;\n\n\t\t\tfns = firstFns.length ? secondFns : firstFns;\n\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\n\t\t\twhile(runFns.length){\n\t\t\t\trunFns.shift()();\n\t\t\t}\n\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn, queue){\n\t\t\tif(running && !queue){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push(fn);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = lazySizesCfg.throttleDelay;\n\t\tvar rICTimeout = lazySizesCfg.ricTimeout;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback && rICTimeout > 49 ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\n\t\t\t\tif(rICTimeout !== lazySizesCfg.ricTimeout){\n\t\t\t\t\trICTimeout = lazySizesCfg.ricTimeout;\n\t\t\t\t}\n\t\t\t} :\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 33;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || delay < 9){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\tvar loader = (function(){\n\t\tvar preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/(gle|ing)bot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isVisible = function (elem) {\n\t\t\tif (isBodyHidden == null) {\n\t\t\t\tisBodyHidden = getCSS(document.body, 'visibility') == 'hidden';\n\t\t\t}\n\n\t\t\treturn isBodyHidden || (getCSS(elem.parentNode, 'visibility') != 'hidden' && getCSS(elem, 'visibility') != 'hidden');\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = isVisible(elem);\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal,\n\t\t\t\tbeforeExpandVal, defaultExpand, preloadExpand, hFac;\n\t\t\tvar lazyloadElems = lazysizes.elements;\n\n\t\t\tif((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll || (lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i]))){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!defaultExpand) {\n\t\t\t\t\t\tdefaultExpand = (!lazySizesCfg.expand || lazySizesCfg.expand < 1) ?\n\t\t\t\t\t\t\tdocElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 :\n\t\t\t\t\t\t\tlazySizesCfg.expand;\n\n\t\t\t\t\t\tlazysizes._defEx = defaultExpand;\n\n\t\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesCfg.expFactor;\n\t\t\t\t\t\thFac = lazySizesCfg.hFac;\n\t\t\t\t\t\tisBodyHidden = null;\n\n\t\t\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\t\t\tlowRuns = 0;\n\t\t\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t(lazySizesCfg.loadHidden || isVisible(lazyloadElems[i])) &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesCfg.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesCfg.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\tvar elem = e.target;\n\n\t\t\tif (elem._lazyCache) {\n\t\t\t\tdelete elem._lazyCache;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresetPreloading(e);\n\t\t\taddClass(elem, lazySizesCfg.loadedClass);\n\t\t\tremoveClass(elem, lazySizesCfg.loadingClass);\n\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass);\n\t\t\ttriggerEvent(elem, 'lazyloaded');\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\ttry {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} catch(e){\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesCfg.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesCfg.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\taddClass(elem, lazySizesCfg.loadingClass);\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(isImg && (srcset || isPicture)){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(elem._lazyRace){\n\t\t\t\tdelete elem._lazyRace;\n\t\t\t}\n\t\t\tremoveClass(elem, lazySizesCfg.lazyClass);\n\n\t\t\trAF(function(){\n\t\t\t\t// Part of this can be removed as soon as this fix is older: https://bugs.chromium.org/p/chromium/issues/detail?id=7731 (2015)\n\t\t\t\tvar isLoaded = elem.complete && elem.naturalWidth > 1;\n\n\t\t\t\tif( !firesLoad || isLoaded){\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\taddClass(elem, 'ls-is-cached');\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t\telem._lazyCache = true;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tif ('_lazyCache' in elem) {\n\t\t\t\t\t\t\tdelete elem._lazyCache;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 9);\n\t\t\t\t}\n\t\t\t\tif (elem.loading == 'lazy') {\n\t\t\t\t\tisLoading--;\n\t\t\t\t}\n\t\t\t}, true);\n\t\t});\n\n\t\tvar unveilElement = function (elem){\n\t\t\tif (elem._lazyRace) {return;}\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar afterScroll = debounce(function(){\n\t\t\tlazySizesCfg.loadMode = 3;\n\t\t\tthrottledCheckElements();\n\t\t});\n\n\t\tvar altLoadmodeScrollListner = function(){\n\t\t\tif(lazySizesCfg.loadMode == 3){\n\t\t\t\tlazySizesCfg.loadMode = 2;\n\t\t\t}\n\t\t\tafterScroll();\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesCfg.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', altLoadmodeScrollListner, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazysizes.elements = document.getElementsByClassName(lazySizesCfg.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesCfg.lazyClass + ' ' + lazySizesCfg.preloadClass);\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazysizes.elements.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t\trAF._lsFlush();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement,\n\t\t\t_aLSL: altLoadmodeScrollListner,\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesCfg.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i && document.getElementsByClassName){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\tsetTimeout(function(){\n\t\tif(lazySizesCfg.init){\n\t\t\tinit();\n\t\t}\n\t});\n\n\tlazysizes = {\n\t\tcfg: lazySizesCfg,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n\n\treturn lazysizes;\n}\n));\n","/*! npm.im/object-fit-images 3.2.4 */\n'use strict';\n\nvar OFI = 'bfred-it:object-fit-images';\nvar propRegex = /(object-fit|object-position)\\s*:\\s*([-.\\w\\s%]+)/g;\nvar testImg = typeof Image === 'undefined' ? {style: {'object-position': 1}} : new Image();\nvar supportsObjectFit = 'object-fit' in testImg.style;\nvar supportsObjectPosition = 'object-position' in testImg.style;\nvar supportsOFI = 'background-size' in testImg.style;\nvar supportsCurrentSrc = typeof testImg.currentSrc === 'string';\nvar nativeGetAttribute = testImg.getAttribute;\nvar nativeSetAttribute = testImg.setAttribute;\nvar autoModeEnabled = false;\n\nfunction createPlaceholder(w, h) {\n\treturn (\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='\" + w + \"' height='\" + h + \"'%3E%3C/svg%3E\");\n}\n\nfunction polyfillCurrentSrc(el) {\n\tif (el.srcset && !supportsCurrentSrc && window.picturefill) {\n\t\tvar pf = window.picturefill._;\n\t\t// parse srcset with picturefill where currentSrc isn't available\n\t\tif (!el[pf.ns] || !el[pf.ns].evaled) {\n\t\t\t// force synchronous srcset parsing\n\t\t\tpf.fillImg(el, {reselect: true});\n\t\t}\n\n\t\tif (!el[pf.ns].curSrc) {\n\t\t\t// force picturefill to parse srcset\n\t\t\tel[pf.ns].supported = false;\n\t\t\tpf.fillImg(el, {reselect: true});\n\t\t}\n\n\t\t// retrieve parsed currentSrc, if any\n\t\tel.currentSrc = el[pf.ns].curSrc || el.src;\n\t}\n}\n\nfunction getStyle(el) {\n\tvar style = getComputedStyle(el).fontFamily;\n\tvar parsed;\n\tvar props = {};\n\twhile ((parsed = propRegex.exec(style)) !== null) {\n\t\tprops[parsed[1]] = parsed[2];\n\t}\n\treturn props;\n}\n\nfunction setPlaceholder(img, width, height) {\n\t// Default: fill width, no height\n\tvar placeholder = createPlaceholder(width || 1, height || 0);\n\n\t// Only set placeholder if it's different\n\tif (nativeGetAttribute.call(img, 'src') !== placeholder) {\n\t\tnativeSetAttribute.call(img, 'src', placeholder);\n\t}\n}\n\nfunction onImageReady(img, callback) {\n\t// naturalWidth is only available when the image headers are loaded,\n\t// this loop will poll it every 100ms.\n\tif (img.naturalWidth) {\n\t\tcallback(img);\n\t} else {\n\t\tsetTimeout(onImageReady, 100, img, callback);\n\t}\n}\n\nfunction fixOne(el) {\n\tvar style = getStyle(el);\n\tvar ofi = el[OFI];\n\tstyle['object-fit'] = style['object-fit'] || 'fill'; // default value\n\n\t// Avoid running where unnecessary, unless OFI had already done its deed\n\tif (!ofi.img) {\n\t\t// fill is the default behavior so no action is necessary\n\t\tif (style['object-fit'] === 'fill') {\n\t\t\treturn;\n\t\t}\n\n\t\t// Where object-fit is supported and object-position isn't (Safari < 10)\n\t\tif (\n\t\t\t!ofi.skipTest && // unless user wants to apply regardless of browser support\n\t\t\tsupportsObjectFit && // if browser already supports object-fit\n\t\t\t!style['object-position'] // unless object-position is used\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// keep a clone in memory while resetting the original to a blank\n\tif (!ofi.img) {\n\t\tofi.img = new Image(el.width, el.height);\n\t\tofi.img.srcset = nativeGetAttribute.call(el, \"data-ofi-srcset\") || el.srcset;\n\t\tofi.img.src = nativeGetAttribute.call(el, \"data-ofi-src\") || el.src;\n\n\t\t// preserve for any future cloneNode calls\n\t\t// https://github.com/bfred-it/object-fit-images/issues/53\n\t\tnativeSetAttribute.call(el, \"data-ofi-src\", el.src);\n\t\tif (el.srcset) {\n\t\t\tnativeSetAttribute.call(el, \"data-ofi-srcset\", el.srcset);\n\t\t}\n\n\t\tsetPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);\n\n\t\t// remove srcset because it overrides src\n\t\tif (el.srcset) {\n\t\t\tel.srcset = '';\n\t\t}\n\t\ttry {\n\t\t\tkeepSrcUsable(el);\n\t\t} catch (err) {\n\t\t\tif (window.console) {\n\t\t\t\tconsole.warn('https://bit.ly/ofi-old-browser');\n\t\t\t}\n\t\t}\n\t}\n\n\tpolyfillCurrentSrc(ofi.img);\n\n\tel.style.backgroundImage = \"url(\\\"\" + ((ofi.img.currentSrc || ofi.img.src).replace(/\"/g, '\\\\\"')) + \"\\\")\";\n\tel.style.backgroundPosition = style['object-position'] || 'center';\n\tel.style.backgroundRepeat = 'no-repeat';\n\tel.style.backgroundOrigin = 'content-box';\n\n\tif (/scale-down/.test(style['object-fit'])) {\n\t\tonImageReady(ofi.img, function () {\n\t\t\tif (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {\n\t\t\t\tel.style.backgroundSize = 'contain';\n\t\t\t} else {\n\t\t\t\tel.style.backgroundSize = 'auto';\n\t\t\t}\n\t\t});\n\t} else {\n\t\tel.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');\n\t}\n\n\tonImageReady(ofi.img, function (img) {\n\t\tsetPlaceholder(el, img.naturalWidth, img.naturalHeight);\n\t});\n}\n\nfunction keepSrcUsable(el) {\n\tvar descriptors = {\n\t\tget: function get(prop) {\n\t\t\treturn el[OFI].img[prop ? prop : 'src'];\n\t\t},\n\t\tset: function set(value, prop) {\n\t\t\tel[OFI].img[prop ? prop : 'src'] = value;\n\t\t\tnativeSetAttribute.call(el, (\"data-ofi-\" + prop), value); // preserve for any future cloneNode\n\t\t\tfixOne(el);\n\t\t\treturn value;\n\t\t}\n\t};\n\tObject.defineProperty(el, 'src', descriptors);\n\tObject.defineProperty(el, 'currentSrc', {\n\t\tget: function () { return descriptors.get('currentSrc'); }\n\t});\n\tObject.defineProperty(el, 'srcset', {\n\t\tget: function () { return descriptors.get('srcset'); },\n\t\tset: function (ss) { return descriptors.set(ss, 'srcset'); }\n\t});\n}\n\nfunction hijackAttributes() {\n\tfunction getOfiImageMaybe(el, name) {\n\t\treturn el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;\n\t}\n\tif (!supportsObjectPosition) {\n\t\tHTMLImageElement.prototype.getAttribute = function (name) {\n\t\t\treturn nativeGetAttribute.call(getOfiImageMaybe(this, name), name);\n\t\t};\n\n\t\tHTMLImageElement.prototype.setAttribute = function (name, value) {\n\t\t\treturn nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));\n\t\t};\n\t}\n}\n\nfunction fix(imgs, opts) {\n\tvar startAutoMode = !autoModeEnabled && !imgs;\n\topts = opts || {};\n\timgs = imgs || 'img';\n\n\tif ((supportsObjectPosition && !opts.skipTest) || !supportsOFI) {\n\t\treturn false;\n\t}\n\n\t// use imgs as a selector or just select all images\n\tif (imgs === 'img') {\n\t\timgs = document.getElementsByTagName('img');\n\t} else if (typeof imgs === 'string') {\n\t\timgs = document.querySelectorAll(imgs);\n\t} else if (!('length' in imgs)) {\n\t\timgs = [imgs];\n\t}\n\n\t// apply fix to all\n\tfor (var i = 0; i < imgs.length; i++) {\n\t\timgs[i][OFI] = imgs[i][OFI] || {\n\t\t\tskipTest: opts.skipTest\n\t\t};\n\t\tfixOne(imgs[i]);\n\t}\n\n\tif (startAutoMode) {\n\t\tdocument.body.addEventListener('load', function (e) {\n\t\t\tif (e.target.tagName === 'IMG') {\n\t\t\t\tfix(e.target, {\n\t\t\t\t\tskipTest: opts.skipTest\n\t\t\t\t});\n\t\t\t}\n\t\t}, true);\n\t\tautoModeEnabled = true;\n\t\timgs = 'img'; // reset to a generic selector for watchMQ\n\t}\n\n\t// if requested, watch media queries for object-fit change\n\tif (opts.watchMQ) {\n\t\twindow.addEventListener('resize', fix.bind(null, imgs, {\n\t\t\tskipTest: opts.skipTest\n\t\t}));\n\t}\n}\n\nfix.supportsObjectFit = supportsObjectFit;\nfix.supportsObjectPosition = supportsObjectPosition;\n\nhijackAttributes();\n\nmodule.exports = fix;\n","/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.15.0\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Popper = factory());\n}(this, (function () { 'use strict';\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nreturn Popper;\n\n})));\n//# sourceMappingURL=popper.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}